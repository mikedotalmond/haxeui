<haxe>
	<class path="ApplicationMain" params="" file="bin/flash/haxe/ApplicationMain.hx">
		<complete static="1"><x path="Bool"/></complete>
		<loaderInfo static="1"><t path="openfl.display.LoaderInfo"/></loaderInfo>
		<preloader static="1"><c path="NMEPreloader"/></preloader>
		<main public="1" set="method" line="23" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<start set="method" line="63" static="1"><f a=""><x path="Void"/></f></start>
		<update set="method" line="98" static="1"><f a=""><x path="Void"/></f></update>
		<current_onEnter set="method" line="116" static="1"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></current_onEnter>
		<loaderInfo_onComplete set="method" line="141" static="1"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></loaderInfo_onComplete>
		<loaderInfo_onInit set="method" line="149" static="1"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></loaderInfo_onInit>
		<loaderInfo_onProgress set="method" line="156" static="1"><f a="event">
	<t path="openfl.events.ProgressEvent"/>
	<x path="Void"/>
</f></loaderInfo_onProgress>
		<preloader_onComplete set="method" line="163" static="1"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></preloader_onComplete>
	</class>
	<class path="haxe.ui.toolkit.Main" params="" file="src/haxe/ui/toolkit/Main.hx"><main public="1" set="method" line="29" static="1"><f a=""><x path="Void"/></f></main></class>
	<class path="DocumentClass" params="" file="bin/flash/haxe/ApplicationMain.hx" module="ApplicationMain">
		<extends path="haxe.ui.toolkit.Main"/>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="Array" params="T" file="C:\Servers\Haxe\haxe\std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end	of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` exceeds or equals `pos`,
		the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.sort.MergeSort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, the result is the empty
		Array [].

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use Std.string() to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed acoordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurense of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurense of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<map public="1" params="S" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" set="method">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.</haxe_doc>
	</class>
	<abstract path="Class" params="T" file="C:\Servers\Haxe\haxe\std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="C:\Servers\Haxe\haxe\std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formated string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp of the date. It might only have a per-second
		precision depending on the platforms.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of the `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range).</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There is some extra functions available in the `DateTools` class.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
	</class>
	<class path="DateTools" params="" file="C:\Servers\Haxe\haxe\std/DateTools.hx">
		<__format_get set="method" line="36" static="1"><f a="d:e">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format_get>
		<__format set="method" line="89" static="1"><f a="d:f">
	<c path="Date"/>
	<c path="String"/>
	<c path="String"/>
</f></__format>
		<format public="1" set="method" line="114" static="1">
			<f a="d:f">
				<c path="Date"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the date `d` according to the format `f`. The format is
		compatible with the `strftime` standard format, except that there is no
		support in Flash and JS for day and months names (due to lack of proper
		internationalization API). On Haxe/Neko/Windows, some formats are not
		supported.</haxe_doc>
		</format>
		<haxe_doc>The DateTools class contains some extra functionalities for handling `Date`
	instances and timestamps.

	In the context of haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="openfl.AssetLibrary" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/openfl/Assets.hx" module="openfl.Assets">
		<eventCallback public="1"><d/></eventCallback>
		<exists public="1" set="method" line="1198"><f a="id:type">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
</f></exists>
		<getBitmapData public="1" set="method" line="1205"><f a="id">
	<c path="String"/>
	<t path="openfl.display.BitmapData"/>
</f></getBitmapData>
		<getBytes public="1" set="method" line="1212"><f a="id">
	<c path="String"/>
	<t path="openfl.utils.ByteArray"/>
</f></getBytes>
		<getFont public="1" set="method" line="1219"><f a="id">
	<c path="String"/>
	<t path="openfl.text.Font"/>
</f></getFont>
		<getMovieClip public="1" set="method" line="1226"><f a="id">
	<c path="String"/>
	<t path="openfl.display.MovieClip"/>
</f></getMovieClip>
		<getMusic public="1" set="method" line="1233"><f a="id">
	<c path="String"/>
	<t path="openfl.media.Sound"/>
</f></getMusic>
		<getPath public="1" set="method" line="1240"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getPath>
		<getSound public="1" set="method" line="1247"><f a="id">
	<c path="String"/>
	<t path="openfl.media.Sound"/>
</f></getSound>
		<getText public="1" set="method" line="1254"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<isLocal public="1" set="method" line="1279"><f a="id:type">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
</f></isLocal>
		<list public="1" set="method" line="1286"><f a="type">
	<e path="openfl.AssetType"/>
	<c path="Array"><c path="String"/></c>
</f></list>
		<load set="method" line="1293"><f a="handler">
	<f a="">
		<c path="openfl.AssetLibrary"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></load>
		<loadBitmapData public="1" set="method" line="1300"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.display.BitmapData"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBitmapData>
		<loadBytes public="1" set="method" line="1307"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.utils.ByteArray"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBytes>
		<loadFont public="1" set="method" line="1314"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.text.Font"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadFont>
		<loadMovieClip public="1" set="method" line="1321"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.display.MovieClip"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadMovieClip>
		<loadMusic public="1" set="method" line="1328"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadMusic>
		<loadSound public="1" set="method" line="1335"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadSound>
		<loadText public="1" set="method" line="1342"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadText>
		<new public="1" set="method" line="1191"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="DefaultAssetLibrary" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx">
		<extends path="openfl.AssetLibrary"/>
		<className public="1" set="null"><x path="Map">
	<c path="String"/>
	<d/>
</x></className>
		<path public="1" set="null"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></path>
		<type public="1" set="null"><x path="Map">
	<c path="String"/>
	<e path="openfl.AssetType"/>
</x></type>
		<lastModified><x path="Float"/></lastModified>
		<timer><c path="haxe.Timer"/></timer>
		<exists public="1" set="method" line="1338" override="1"><f a="id:type">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
</f></exists>
		<getBitmapData public="1" set="method" line="1393" override="1"><f a="id">
	<c path="String"/>
	<t path="openfl.display.BitmapData"/>
</f></getBitmapData>
		<getBytes public="1" set="method" line="1421" override="1"><f a="id">
	<c path="String"/>
	<t path="openfl.utils.ByteArray"/>
</f></getBytes>
		<getFont public="1" set="method" line="1467" override="1"><f a="id">
	<c path="String"/>
	<t path="openfl.text.Font"/>
</f></getFont>
		<getMusic public="1" set="method" line="1490" override="1"><f a="id">
	<c path="String"/>
	<t path="openfl.media.Sound"/>
</f></getMusic>
		<getPath public="1" set="method" line="1521" override="1"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getPath>
		<getSound public="1" set="method" line="1536" override="1"><f a="id">
	<c path="String"/>
	<t path="openfl.media.Sound"/>
</f></getSound>
		<getText public="1" set="method" line="1560" override="1"><f a="id">
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<isLocal public="1" set="method" line="1610" override="1"><f a="id:type">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
</f></isLocal>
		<list public="1" set="method" line="1627" override="1"><f a="type">
	<e path="openfl.AssetType"/>
	<c path="Array"><c path="String"/></c>
</f></list>
		<loadBitmapData public="1" set="method" line="1646" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.display.BitmapData"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBitmapData>
		<loadBytes public="1" set="method" line="1679" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.utils.ByteArray"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBytes>
		<loadFont public="1" set="method" line="1716" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.text.Font"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadFont>
		<loadMusic public="1" set="method" line="1803" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadMusic>
		<loadSound public="1" set="method" line="1832" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadSound>
		<loadText public="1" set="method" line="1861" override="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadText>
		<new public="1" set="method" line="43"><f a=""><x path="Void"/></f></new>
		<meta><m n=":access"><e>'???'</e></m></meta>
	</class>
	<class path="flash.utils.IDataInput" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/IDataInput.hx" extern="1" interface="1">
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
	</class>
	<class path="flash.utils.IDataInput2" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/IDataInput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataInput"/></class>
	<class path="flash.utils.IDataOutput" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/IDataOutput.hx" extern="1" interface="1">
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
	</class>
	<class path="flash.utils.IDataOutput2" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/IDataOutput2.hx" extern="1" interface="1"><extends path="flash.utils.IDataOutput"/></class>
	<class path="flash.utils.ByteArray" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/ByteArray.hx" extern="1">
		<implements path="flash.utils.IDataInput2"/>
		<implements path="flash.utils.IDataOutput2"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<bytesAvailable public="1" set="null"><x path="UInt"/></bytesAvailable>
		<endian public="1"><e path="flash.utils.Endian"/></endian>
		<length public="1"><x path="UInt"/></length>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<position public="1"><x path="UInt"/></position>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clear>
		<compress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></compress>
		<deflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</deflate>
		<inflate public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</inflate>
		<readBoolean public="1" set="method"><f a=""><x path="Bool"/></f></readBoolean>
		<readByte public="1" set="method"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></readBytes>
		<readDouble public="1" set="method"><f a=""><x path="Float"/></f></readDouble>
		<readFloat public="1" set="method"><f a=""><x path="Float"/></f></readFloat>
		<readInt public="1" set="method"><f a=""><x path="Int"/></f></readInt>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<x path="UInt"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readShort public="1" set="method"><f a=""><x path="Int"/></f></readShort>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readUTFBytes public="1" set="method"><f a="length">
	<x path="UInt"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUnsignedByte public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedByte>
		<readUnsignedInt public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedInt>
		<readUnsignedShort public="1" set="method"><f a=""><x path="UInt"/></f></readUnsignedShort>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<uncompress public="1" set="method"><f a="?algorithm">
	<e path="flash.utils.CompressionAlgorithm"/>
	<x path="Void"/>
</f></uncompress>
		<writeBoolean public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></writeBoolean>
		<writeByte public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></writeBytes>
		<writeDouble public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeDouble>
		<writeFloat public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></writeFloat>
		<writeInt public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeInt>
		<writeMultiByte public="1" set="method"><f a="value:charSet">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></writeMultiByte>
		<writeObject public="1" set="method"><f a="object">
	<d/>
	<x path="Void"/>
</f></writeObject>
		<writeShort public="1" set="method"><f a="value">
	<x path="Int"/>
	<x path="Void"/>
</f></writeShort>
		<writeUTF public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTF>
		<writeUTFBytes public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></writeUTFBytes>
		<writeUnsignedInt public="1" set="method"><f a="value">
	<x path="UInt"/>
	<x path="Void"/>
</f></writeUnsignedInt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="__ASSET__assets_custom_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1910"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.text.Font" params="" file="C:\Servers\Haxe\haxe\std/flash/text/Font.hx" extern="1">
		<enumerateFonts public="1" set="method" static="1"><f a="?enumerateDeviceFonts">
	<x path="Bool"/>
	<c path="Array"><c path="flash.text.Font"/></c>
</f></enumerateFonts>
		<registerFont public="1" set="method" static="1"><f a="font">
	<x path="Class"><d/></x>
	<x path="Void"/>
</f></registerFont>
		<fontName public="1" set="null"><c path="String"/></fontName>
		<fontStyle public="1" set="null"><e path="flash.text.FontStyle"/></fontStyle>
		<fontType public="1" set="null"><e path="flash.text.FontType"/></fontType>
		<hasGlyphs public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></hasGlyphs>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="__ASSET__assets_fonts_oxygen_bold_ttf" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.text.Font"/>
		<new public="1" set="method" line="1911"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_fonts_oxygen_ttf" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.text.Font"/>
		<new public="1" set="method" line="1912"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.display.IBitmapDrawable" params="" file="C:\Servers\Haxe\haxe\std/flash/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="flash.display.BitmapData" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/display/BitmapData.hx" extern="1">
		<implements path="flash.display.IBitmapDrawable"/>
		<height public="1" set="null"><x path="Int"/></height>
		<rect public="1" set="null"><c path="flash.geom.Rectangle"/></rect>
		<transparent public="1" set="null"><x path="Bool"/></transparent>
		<width public="1" set="null"><x path="Int"/></width>
		<applyFilter public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:filter">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.filters.BitmapFilter"/>
	<x path="Void"/>
</f></applyFilter>
		<clone public="1" set="method"><f a=""><c path="flash.display.BitmapData"/></f></clone>
		<colorTransform public="1" set="method"><f a="rect:colorTransform">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></colorTransform>
		<compare public="1" set="method"><f a="otherBitmapData">
	<c path="flash.display.BitmapData"/>
	<t path="flash.utils.Object"/>
</f></compare>
		<copyChannel public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></copyChannel>
		<copyPixels public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></copyPixels>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<draw public="1" set="method"><f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
	<c path="flash.display.IBitmapDrawable"/>
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.ColorTransform"/>
	<e path="flash.display.BlendMode"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></draw>
		<fillRect public="1" set="method"><f a="rect:color">
	<c path="flash.geom.Rectangle"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></fillRect>
		<floodFill public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></floodFill>
		<generateFilterRect public="1" set="method"><f a="sourceRect:filter">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.filters.BitmapFilter"/>
	<c path="flash.geom.Rectangle"/>
</f></generateFilterRect>
		<getColorBoundsRect public="1" set="method"><f a="mask:color:?findColor">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getColorBoundsRect>
		<getPixel public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel>
		<getPixel32 public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
</f></getPixel32>
		<getPixels public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
</f></getPixels>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="flash.geom.Rectangle"/>
				<x path="openfl.Vector"><x path="UInt"/></x>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getVector>
		<histogram public="1" set="method">
			<f a="?hRect">
				<c path="flash.geom.Rectangle"/>
				<x path="openfl.Vector"><x path="openfl.Vector"><x path="Float"/></x></x>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</histogram>
		<hitTest public="1" set="method"><f a="firstPoint:firstAlphaThreshold:secondObject:?secondBitmapDataPoint:?secondAlphaThreshold">
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<t path="flash.utils.Object"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="Bool"/>
</f></hitTest>
		<lock public="1" set="method"><f a=""><x path="Void"/></f></lock>
		<merge public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:redMultiplier:greenMultiplier:blueMultiplier:alphaMultiplier">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></merge>
		<noise public="1" set="method"><f a="randomSeed:?low:?high:?channelOptions:?grayScale">
	<x path="Int"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></noise>
		<paletteMap public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?redArray:?greenArray:?blueArray:?alphaArray">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<c path="Array"><x path="Int"/></c>
	<x path="Void"/>
</f></paletteMap>
		<perlinNoise public="1" set="method"><f a="baseX:baseY:numOctaves:randomSeed:stitch:fractalNoise:?channelOptions:?grayScale:?offsets">
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<c path="Array"><c path="flash.geom.Point"/></c>
	<x path="Void"/>
</f></perlinNoise>
		<pixelDissolve public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:?randomSeed:?numPixels:?fillColor">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Int"/>
</f></pixelDissolve>
		<scroll public="1" set="method"><f a="x:y">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></scroll>
		<setPixel public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel>
		<setPixel32 public="1" set="method"><f a="x:y:color">
	<x path="Int"/>
	<x path="Int"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setPixel32>
		<setPixels public="1" set="method"><f a="rect:inputByteArray">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></setPixels>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="flash.geom.Rectangle"/>
				<x path="openfl.Vector"><x path="UInt"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</setVector>
		<threshold public="1" set="method"><f a="sourceBitmapData:sourceRect:destPoint:operation:threshold:?color:?mask:?copySource">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Point"/>
	<c path="String"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="UInt"/>
</f></threshold>
		<unlock public="1" set="method"><f a="?changeRect">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></unlock>
		<new public="1" set="method"><f a="width:height:?transparent:?fillColor">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="__ASSET__assets_img_slinky_small_jpg" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1913"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_img_slinky_tiny_jpg" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1914"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_menu_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1915"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_default_circle_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1916"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_default_collapse_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1917"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_default_cross_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1918"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_default_expand_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1919"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_default_up_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1920"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1921"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_down_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1922"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_down_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1923"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_left_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1924"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_left_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1925"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_right_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1926"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_right2_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1927"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_right_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1928"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_right_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1929"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1930"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_arrow_up_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1931"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_circle_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1932"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_cross_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1933"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_cross_dark_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1934"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gradient_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1935"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gradient_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1936"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gradient_mobile_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1937"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gripper_horizontal_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1938"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gripper_horizontal_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1939"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gripper_vertical_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1940"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_gradient_gripper_vertical_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1941"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_accordion_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1942"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_accordion_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1943"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_button_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1944"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_buttons_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1945"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_buttons_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1946"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_calendar_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1947"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_checkbox_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1948"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_container_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1949"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_down_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1950"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_hscroll_thumb_gripper_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1951"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_hscroll_thumb_gripper_over_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1952"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_hscroll_thumb_gripper_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1953"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_left_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1954"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_right_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1955"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_up_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1956"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_vscroll_thumb_gripper_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1957"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_vscroll_thumb_gripper_over_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1958"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_glyphs_vscroll_thumb_gripper_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1959"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_hprogress_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1960"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_hscroll_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1961"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_listview_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1962"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_listview_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1963"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_listview_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1964"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_menus_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1965"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_optionbox_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1966"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_popup_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1967"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_popups_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1968"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_rtf_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1969"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_scrolls_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1970"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_scrolls_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1971"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_sliders_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1972"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_tab_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1973"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_tabs_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1974"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_textinput_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1975"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_vprogress_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1976"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_vscroll_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1977"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_styles_windows_windows_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1978"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_tab_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1979"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_tab2_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1980"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_test_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1981"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_test_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1982"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_test_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1983"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_test2_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1984"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_menus_edit_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1985"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_menus_file_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1986"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_menus_help_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1987"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_menus_program_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1988"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_menus_search_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1989"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__assets_ui_toolbar_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="1990"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_default_circle_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1991"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_default_collapse_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1992"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_default_cross_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1993"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_default_expand_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1994"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_default_up_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1995"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1996"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_down_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1997"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_down_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1998"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_left_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="1999"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_left_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2000"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_right_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2001"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_right2_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2002"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_right_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2003"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_right_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2004"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2005"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_arrow_up_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2006"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_circle_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2007"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_cross_dark_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2008"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_cross_dark_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2009"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gradient_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2010"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gradient_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2011"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gradient_mobile_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2012"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gripper_horizontal_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2013"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gripper_horizontal_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2014"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gripper_vertical_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2015"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_gradient_gripper_vertical_disabled_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2016"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_accordion_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2017"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_accordion_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2018"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_button_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2019"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_buttons_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2020"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_buttons_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2021"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_calendar_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2022"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_checkbox_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2023"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_container_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2024"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_down_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2025"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_hscroll_thumb_gripper_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2026"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_hscroll_thumb_gripper_over_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2027"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_hscroll_thumb_gripper_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2028"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_left_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2029"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_right_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2030"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_up_arrow_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2031"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_vscroll_thumb_gripper_down_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2032"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_vscroll_thumb_gripper_over_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2033"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_glyphs_vscroll_thumb_gripper_up_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2034"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_hprogress_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2035"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_hscroll_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2036"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_listview_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2037"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_listview_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2038"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_listview_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2039"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_menus_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2040"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_optionbox_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2041"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_popup_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2042"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_popups_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2043"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_rtf_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2044"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_scrolls_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2045"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_scrolls_min_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2046"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_sliders_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2047"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_tab_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2048"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_tabs_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2049"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_textinput_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2050"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_vprogress_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2051"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_vscroll_png" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2052"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__styles_windows_windows_css" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2053"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__img_slinky_small_jpg" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2054"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__img_slinky_tiny_jpg" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.display.BitmapData"/>
		<new public="1" set="method" line="2055"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__fonts_oxygen_bold_ttf" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.text.Font"/>
		<new public="1" set="method" line="2056"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__fonts_oxygen_ttf" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.text.Font"/>
		<new public="1" set="method" line="2057"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_menus_edit_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2058"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_menus_file_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2059"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_menus_help_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2060"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_menus_program_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2061"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_menus_search_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2062"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="__ASSET__ui_toolbar_xml" params="" file="bin/flash/haxe/DefaultAssetLibrary.hx" module="DefaultAssetLibrary">
		<extends path="flash.utils.ByteArray"/>
		<new public="1" set="method" line="2063"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="EReg" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/EReg.hx">
		<r><c path="flash.utils.RegExp"/></r>
		<result><c path="+Array"/></result>
		<match public="1" set="method" line="31">
			<f a="s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `this` regular expression matches String `s`.

		This method modifies the internal state.

		If `s` is `null`, the result is unspecified.</haxe_doc>
		</match>
		<matched public="1" set="method" line="37">
			<f a="n">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the matched sub-group `n` of `this` EReg.

		This method should only be called after `this.match` or
		`this.matchSub`, and then operates on the String of that operation.

		The index `n` corresponds to the n-th set of parentheses in the pattern
		of `this` EReg. If no such sub-group exists, an exception is thrown.

		If `n` equals 0, the whole matched substring is returned.</haxe_doc>
		</matched>
		<matchedRight public="1" set="method" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the part to the right of the last matched substring.

		If the most recent call to `this.match` or `this.matchSub` did not
		match anything, the result is unspecified.

		If the global g modifier was in place for the matching, only the
		substring to the right of the leftmost match is returned.

		The result does not include the matched part.</haxe_doc>
		</matchedRight>
		<split public="1" set="method" line="78">
			<f a="s">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits String `s` at all substrings `this` EReg matches.

		If a match is found at the start of `s`, the result contains a leading
		empty String "" entry.

		If a match is found at the end of `s`, the result contains a trailing
		empty String "" entry.

		If two matching substrings appear next to each other, the result
		contains the empty String "" between them.

		By default, this method splits `s` into two parts at the first matched
		substring. If the global g modifier is in place, `s` is split at each
		matched substring.

		If `s` is null, the result is unspecified.</haxe_doc>
		</split>
		<new public="1" set="method" line="27">
			<f a="r:opt">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new regular expression with pattern `r` and modifiers `opt`.

		This is equivalent to the shorthand syntax `~/r/opt`

		If `r` or `opt` are null, the result is unspecified.</haxe_doc>
		</new>
		<haxe_doc>The EReg class represents regular expressions.

	While basic usage and patterns consistently work across platforms, some more
	complex operations may yield different results. This is a necessary trade-
	off to retain a certain level of performance.

	EReg instances can be created by calling the constructor, or with the
	special syntax ~/pattern/modifier

	EReg instances maintain an internal state, which is affected by several of
	its methods.

	A detailed explanation of the supported operations is available at
	http://haxe.org/doc/cross/regexp</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Enum" params="T" file="C:\Servers\Haxe\haxe\std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="C:\Servers\Haxe\haxe\std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<class path="IntIterator" params="" file="C:\Servers\Haxe\haxe\std/IntIterator.hx">
		<min><x path="Int"/></min>
		<max><x path="Int"/></max>
		<new public="1" set="method" line="44">
			<f a="min:max">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Iterates from `min` (inclusive) to `max` (exclusive).

		If `max <= min`, the iterator will not act as a countdown.]]></haxe_doc>
		</new>
		<haxe_doc>IntIterator is used for implementing interval iterations.

	It is usually not used explicitly, but through it's special syntax:
	`min...max`

	While it is possible to assign an instance of IntIterator to a variable or
	field, it is worth noting that IntIterator does not reset after being used
	in a for-loop. Subsequent uses of the same instance will then have no
	effect.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Lambda" params="" file="C:\Servers\Haxe\haxe\std/Lambda.hx">
		<indexOf public="1" params="T" set="method" line="217" static="1">
			<f a="it:v">
				<t path="Iterable"><c path="indexOf.T"/></t>
				<c path="indexOf.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of the first element `v` within Iterable `it`.

		This function uses operator `==` to check for equality.

		If `v` does not exist in `it`, the result is -1.</haxe_doc>
		</indexOf>
		<haxe_doc>The `Lambda` class is a collection of methods to support functional
	programming. It is ideally used with 'using Lambda' and then acts as an
	extension to Iterable types.

	On static platforms, working with the Iterable structure might be slower
	than performing the operations directly on known types, such as Array and
	List.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="List" params="T" file="C:\Servers\Haxe\haxe\std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="49">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the beginning of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<first public="1" set="method" line="81">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		This function does not modify `this` List.</haxe_doc>
		</first>
		<pop public="1" set="method" line="100">
			<f a=""><t path="Null"><c path="List.T"/></t></f>
			<haxe_doc>Returns the first element of `this` List, or null if no elements exist.

		The element is removed from `this` List.</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="114">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if `this` List is empty.</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="124">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Empties `this` List.

		This function does not traverse the elements, but simply sets the
		internal references to null and `this.length` to 0.</haxe_doc>
		</clear>
		<remove public="1" set="method" line="138">
			<f a="v">
				<c path="List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="161">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>Returns an iterator on the elements of the list.</haxe_doc>
		</iterator>
		<new public="1" set="method" line="40">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole array content every time.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="Map" params="K:V" file="C:\Servers\Haxe\haxe\std/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="IMap">
	<c path="Map.K"/>
	<c path="Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="Map.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="Map.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="Map.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="Map.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `key1 => value1, key2 => value2` syntax.

	Map is an abstract type, it is not available at runtime.]]></haxe_doc>
		<meta><m n=":multiType"><e>K</e></m></meta>
		<impl><class path="_Map.Map_Impl_" params="" file="C:\Servers\Haxe\haxe\std/Map.hx" private="1" module="Map"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="IMap" params="K:V" file="C:\Servers\Haxe\haxe\std/Map.hx" module="Map" interface="1"><meta><m n=":keep"/></meta></class>
	<typedef path="_Map.Hashable" params="" file="C:\Servers\Haxe\haxe\std/Map.hx" private="1" module="Map"><a><hashCode set="method"><f a=""><x path="Int"/></f></hashCode></a></typedef>
	<class path="Math" params="" file="C:\Servers\Haxe\haxe\std/Math.hx" extern="1">
		<PI public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>Represents the ratio of the circumference of a circle to its diameter, 
		specified by the constant, π. `PI` is approximately 3.141592653589793.</haxe_doc>
		</PI>
		<NEGATIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of -1.0 / 0.0.

		Operations with NEGATIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes negative infinity.

		For example, this is the result of 1.0 / 0.0.

		Operations with POSITIVE_INFINITY as an operand may result in
		NEGATIVE_INFINITY, POSITIVE_INFINITY or NaN. 

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.</haxe_doc>
		</POSITIVE_INFINITY>
		<NaN public="1" set="null" static="1">
			<x path="Float"/>
			<haxe_doc>A special Float constant which denotes an invalid number.

		NaN stands for "Not a Number". It occurs when a mathematically incorrect
		operation is executed, such as taking the square root of a negative
		number: Math.sqrt(-1).

		All further operations with NaN as an operand will result in NaN.

		If this constant is converted to an Int, e.g. through Std.int(), the
		result is unspecified.

		In order to test if a value is NaN, you should use Math.isNaN() function.

		@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected
		results when performing arithmetic operations with NaN on Windows, 
		see [https://bugs.php.net/bug.php?id=42143]</haxe_doc>
		</NaN>
		<abs public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the absolute value of `v`.

		If `v` is positive or 0, the result is unchanged. Otherwise the result 
		is -`v`.
		
		If `v` is NEGATIVE_INFINITY or POSITIVE_INFINITY, the result is 
		POSITIVE_INFINITY.
		
		If `v` is NaN, the result is NaN.</haxe_doc>
		</abs>
		<min public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smaller of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.
		If `a` and `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.</haxe_doc>
		</min>
		<max public="1" set="method" static="1">
			<f a="a:b">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the greater of values `a` and `b`.

		If `a` or `b` are NaN, the result is NaN.
		If `a` or `b` are POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `a` and `b` are NEGATIVE_INFINITY, the result is NEGATIVE_INFINITY.</haxe_doc>
		</max>
		<sin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric sine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</sin>
		<cos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric cosine of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</cos>
		<tan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric tangent of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</tan>
		<asin public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc of the specified angle `v`, in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</asin>
		<acos public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc cosine of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</acos>
		<atan public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent of the specified angle `v`, 
		in radians.
		
		If `v` is NaN or infinite, the result is NaN.</haxe_doc>
		</atan>
		<atan2 public="1" set="method" static="1">
			<f a="y:x">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the trigonometric arc tangent whose tangent is the quotient of 
		two specified numbers, in radians.
		
		If parameter `x` or `y`  is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is NaN.</haxe_doc>
		</atan2>
		<exp public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns Euler's number, raised to the power of `v`.
		
		exp(1.0) is approximately 2.718281828459.
		
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is NEGATIVE_INFINITY, the result is 0.0.
		If `v` is NaN, the result is NaN.</haxe_doc>
		</exp>
		<log public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the natural logarithm of `v`.
		
		This is the mathematical inverse operation of exp, 
		i.e. `log(exp(v)) == v` always holds.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is NEGATIVE_INFINITY.</haxe_doc>
		</log>
		<pow public="1" set="method" static="1">
			<f a="v:exp">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns a specified base `v` raised to the specified power `exp`.</haxe_doc>
		</pow>
		<sqrt public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the square root of `v`.
		
		If `v` is negative (including NEGATIVE_INFINITY) or NaN, the result 
		is NaN.
		If `v` is POSITIVE_INFINITY, the result is POSITIVE_INFINITY.
		If `v` is 0.0, the result is 0.0.</haxe_doc>
		</sqrt>
		<round public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value.
		
		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</round>
		<floor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</floor>
		<ceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`.

		If `v` is outside of the signed Int32 range, or is NaN, NEGATIVE_INFINITY 
		or POSITIVE_INFINITY, the result is unspecified.</haxe_doc>
		</ceil>
		<random public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a pseudo-random number which is greater than or equal to 0.0, 
		and less than 1.0.</haxe_doc>
		</random>
		<ffloor public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the largest integer value that is not greater than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</ffloor>
		<fceil public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the smallest integer value that is not less than `v`, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fceil>
		<fround public="1" set="method" static="1">
			<f a="v">
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Rounds `v` to the nearest integer value, as a Float.

		If `v` is is NaN, NEGATIVE_INFINITY or POSITIVE_INFINITY, 
		the result is unspecified.</haxe_doc>
		</fround>
		<isFinite public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is a finite number.

		If `f` is POSITIVE_INFINITY, NEGATIVE_INFINITY or NaN, the result 
		is false, otherwise the result is true.</haxe_doc>
		</isFinite>
		<isNaN public="1" set="method" static="1">
			<f a="f">
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if `f` is not a valid number.

		If `f` is NaN, the result is true, otherwise the result is false. 
		In particular, both POSITIVE_INFINITY and NEGATIVE_INFINITY are
		not considered NaN.</haxe_doc>
		</isNaN>
		<haxe_doc>This class defines mathematical functions and constants.</haxe_doc>
	</class>
	<class path="flash.events.IEventDispatcher" params="" file="C:\Servers\Haxe\haxe\std/flash/events/IEventDispatcher.hx" extern="1" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="flash.events.EventDispatcher" params="" file="C:\Servers\Haxe\haxe\std/flash/events/EventDispatcher.hx" extern="1">
		<implements path="flash.events.IEventDispatcher"/>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<new public="1" set="method"><f a="?target">
	<c path="flash.events.IEventDispatcher"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.display.DisplayObject" params="" file="C:\Servers\Haxe\haxe\std/flash/display/DisplayObject.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="flash.display.IBitmapDrawable"/>
		<accessibilityProperties public="1"><c path="flash.accessibility.AccessibilityProperties"/></accessibilityProperties>
		<alpha public="1"><x path="Float"/></alpha>
		<blendMode public="1"><e path="flash.display.BlendMode"/></blendMode>
		<blendShader public="1" get="null">
			<c path="flash.display.Shader"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</blendShader>
		<cacheAsBitmap public="1"><x path="Bool"/></cacheAsBitmap>
		<filters public="1"><c path="Array"><c path="flash.filters.BitmapFilter"/></c></filters>
		<height public="1"><x path="Float"/></height>
		<loaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></loaderInfo>
		<mask public="1"><c path="flash.display.DisplayObject"/></mask>
		<mouseX public="1" set="null"><x path="Float"/></mouseX>
		<mouseY public="1" set="null"><x path="Float"/></mouseY>
		<name public="1"><c path="String"/></name>
		<opaqueBackground public="1"><t path="Null"><x path="UInt"/></t></opaqueBackground>
		<parent public="1" set="null"><c path="flash.display.DisplayObjectContainer"/></parent>
		<root public="1" set="null"><c path="flash.display.DisplayObject"/></root>
		<rotation public="1"><x path="Float"/></rotation>
		<rotationX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationX>
		<rotationY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationY>
		<rotationZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</rotationZ>
		<scale9Grid public="1"><c path="flash.geom.Rectangle"/></scale9Grid>
		<scaleX public="1"><x path="Float"/></scaleX>
		<scaleY public="1"><x path="Float"/></scaleY>
		<scaleZ public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</scaleZ>
		<scrollRect public="1"><c path="flash.geom.Rectangle"/></scrollRect>
		<stage public="1" set="null"><c path="flash.display.Stage"/></stage>
		<transform public="1"><c path="flash.geom.Transform"/></transform>
		<visible public="1"><x path="Bool"/></visible>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</z>
		<getBounds public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getBounds>
		<getRect public="1" set="method"><f a="targetCoordinateSpace">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.geom.Rectangle"/>
</f></getRect>
		<globalToLocal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></globalToLocal>
		<globalToLocal3D public="1" set="method">
			<f a="point">
				<c path="flash.geom.Point"/>
				<c path="flash.geom.Vector3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</globalToLocal3D>
		<hitTestObject public="1" set="method"><f a="obj">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></hitTestObject>
		<hitTestPoint public="1" set="method"><f a="x:y:?shapeFlag">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></hitTestPoint>
		<local3DToGlobal public="1" set="method">
			<f a="point3d">
				<c path="flash.geom.Vector3D"/>
				<c path="flash.geom.Point"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</local3DToGlobal>
		<localToGlobal public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></localToGlobal>
	</class>
	<class path="flash.display.InteractiveObject" params="" file="C:\Servers\Haxe\haxe\std/flash/display/InteractiveObject.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<accessibilityImplementation public="1"><c path="flash.accessibility.AccessibilityImplementation"/></accessibilityImplementation>
		<contextMenu public="1"><c path="flash.ui.ContextMenu"/></contextMenu>
		<doubleClickEnabled public="1"><x path="Bool"/></doubleClickEnabled>
		<focusRect public="1"><d/></focusRect>
		<mouseEnabled public="1"><x path="Bool"/></mouseEnabled>
		<needsSoftKeyboard public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</needsSoftKeyboard>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardInputAreaOfInterest>
		<tabEnabled public="1"><x path="Bool"/></tabEnabled>
		<tabIndex public="1"><x path="Int"/></tabIndex>
		<requestSoftKeyboard public="1" set="method">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestSoftKeyboard>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.DisplayObjectContainer" params="" file="C:\Servers\Haxe\haxe\std/flash/display/DisplayObjectContainer.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<mouseChildren public="1"><x path="Bool"/></mouseChildren>
		<numChildren public="1" set="null"><x path="Int"/></numChildren>
		<tabChildren public="1"><x path="Bool"/></tabChildren>
		<textSnapshot public="1" set="null"><c path="flash.text.TextSnapshot"/></textSnapshot>
		<addChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></addChildAt>
		<areInaccessibleObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></areInaccessibleObjectsUnderPoint>
		<contains public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildAt>
		<getChildByName public="1" set="method"><f a="name">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getChildByName>
		<getChildIndex public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
</f></getChildIndex>
		<getObjectsUnderPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="Array"><c path="flash.display.DisplayObject"/></c>
</f></getObjectsUnderPoint>
		<removeChild public="1" set="method"><f a="child">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="flash.display.DisplayObject"/>
</f></removeChildAt>
		<removeChildren public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</removeChildren>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="flash.display.DisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<swapChildren public="1" set="method"><f a="child1:child2">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></swapChildren>
		<swapChildrenAt public="1" set="method"><f a="index1:index2">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swapChildrenAt>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.Sprite" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Sprite.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<buttonMode public="1"><x path="Bool"/></buttonMode>
		<dropTarget public="1" set="null"><c path="flash.display.DisplayObject"/></dropTarget>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<hitArea public="1"><c path="flash.display.Sprite"/></hitArea>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useHandCursor public="1"><x path="Bool"/></useHandCursor>
		<startDrag public="1" set="method"><f a="?lockCenter:?bounds">
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></startDrag>
		<startTouchDrag public="1" set="method">
			<f a="touchPointID:?lockCenter:?bounds">
				<x path="Int"/>
				<x path="Bool"/>
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</startTouchDrag>
		<stopDrag public="1" set="method"><f a=""><x path="Void"/></f></stopDrag>
		<stopTouchDrag public="1" set="method">
			<f a="touchPointID">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</stopTouchDrag>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="NMEPreloader" params="" file="bin/flash/haxe/NMEPreloader.hx">
		<extends path="flash.display.Sprite"/>
		<outline><t path="openfl.display.Sprite"/></outline>
		<progress><t path="openfl.display.Sprite"/></progress>
		<getBackgroundColor public="1" set="method" line="52"><f a=""><x path="Int"/></f></getBackgroundColor>
		<getHeight public="1" set="method" line="58"><f a=""><x path="Float"/></f></getHeight>
		<getWidth public="1" set="method" line="74"><f a=""><x path="Float"/></f></getWidth>
		<onInit public="1" set="method" line="90"><f a=""><x path="Void"/></f></onInit>
		<onLoaded public="1" set="method" line="96"><f a=""><x path="Void"/></f></onLoaded>
		<onUpdate public="1" set="method" line="102"><f a="bytesLoaded:bytesTotal">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></onUpdate>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="Reflect" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/Reflect.hx">
		<hasField public="1" set="method" line="24" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if structure `o` has a field named `field`.

		This is only guaranteed to work for anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</hasField>
		<field public="1" set="method" line="28" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`.

		If `o` is not an object or has no field named `field`, the result is
		null.

		If the field is defined as a property, its accessors are ignored. Refer
		to `Reflect.getProperty` for a function supporting property accessors.

		If `field` is null, the result is unspecified.

		(As3) If used on a property field, the getter will be invoked. It is
		not possible to obtain the value directly.</haxe_doc>
		</field>
		<getProperty public="1" set="method" line="37" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Returns the value of the field named `field` on object `o`, taking
		property getter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.field`, but might be slower.

		If `o` or `field` are null, the result is unspecified.</haxe_doc>
		</getProperty>
		<setProperty public="1" set="method" line="47" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the field named `field` of object `o` to value `value`, taking
		property setter functions into account.

		If the field is not a property, this function behaves like
		`Reflect.setField`, but might be slower.

		If `field` is null, the result is unspecified.</haxe_doc>
		</setProperty>
		<fields public="1" set="method" line="59" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns the fields of structure `o`.

		This method is only guaranteed to work on anonymous structures. Refer to
		`Type.getInstanceFields` for a function supporting class instances.

		If `o` is null, the result is unspecified.</haxe_doc>
		</fields>
		<isFunction public="1" set="method" line="82" static="1">
			<f a="f">
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if `f` is a function, false otherwise.

		If `f` is null, the result is false.</haxe_doc>
		</isFunction>
		<makeVarArgs public="1" set="method" line="128" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.</haxe_doc>
			<overloads><makeVarArgs public="1" set="method"><f a="f">
	<f a="">
		<c path="Array"><d/></c>
		<x path="Void"/>
	</f>
	<d/>
</f></makeVarArgs></overloads>
		</makeVarArgs>
		<haxe_doc>The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/Std.hx">
		<is public="1" set="method" line="26" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t. Returns false if v or t are null.</haxe_doc>
		</is>
		<string public="1" set="method" line="34" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<parseInt public="1" set="method" line="42" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Converts a `String` to an `Int`.

		Leading whitespaces are ignored.

		If `x` starts with 0x or 0X, hexadecimal notation is recognized where the following digits may
		contain 0-9 and A-F.

		Otherwise `x` is read as decimal number with 0-9 being allowed characters. `x` may also start with
		a - to denote a negative value.

		In decimal mode, parsing continues until an invalid character is detected, in which case the
		result up to that point is returned. For hexadecimal notation, the effect of invalid characters
		is unspecified.

		Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal
		notation is not supported.

		If the input cannot be recognized, the result is null.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="49" static="1">
			<f a="x">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Converts a `String` to a `Float`.

		The parsing rules for `parseInt` apply here as well, with the exception of invalid input
		resulting in a NaN value instead of null.

		Additionally, decimal notation may contain a single `.` to denote the start of the fractions.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="53" static="1">
			<f a="x">
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[Return a random integer between 0 included and `x` excluded.

		If `x <= 1`, the result is always 0.]]></haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard Void type. Only `null` values can be of the type `Void`.</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard Float type, this is a double-precision IEEE 64bit float.

	On static targets, null cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard Int type. Its precision depends on the platform.

	On static targets, null cannot be assigned to Int. If this is necessary,
	`Null<Int>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Null" params="T" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>`Null` can be useful in two cases. In order to document some methods
	that accepts or can return a `null` value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<abstract path="Bool" params="" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be true or false.

	On static targets, null cannot be assigned to Bool. If this is necessary,
	`Null<Bool>` can be used instead.]]></haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>Dynamic is a special type which is compatible with all other types.

	Use of Dynamic should be minimized as it prevents several compiler
	checks and optimizations.</haxe_doc>
		<meta>
			<m n=":valueUsed"/>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the Iterator and advances to the next one.

		This method is not required to check hasNext() first. A call to this
		method while hasNext() is false yields unspecified behavior.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns false if the iteration is complete, true otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to next(). However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits iteration over elements of type T.

	Any class with matching hasNext and next fields is considered an Iterator
	and can then be used e.g. in for-loops. This makes it easy to implement
	custom iterators.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See `Lambda` for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Servers\Haxe\haxe\std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="C:\Servers\Haxe\haxe\std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.

		Affects the characters `a-z`. Other characters remain unchanged.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.

		Affects the characters `A-Z`. Other characters remain unchanged.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String ""
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<t path="Null"><x path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, null is returned.

		To obtain the character code of a single character, "x".code can be used
		instead to inline the character code at compile time. Note that this
		only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex`. Otherwise the search is
		performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurence of `delimiter`.

		If `this` String is the empty String "", the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String "", `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurence of
		`delimiter`. If `this` String starts (or ends) with [delimiter}, the
		result Array contains a leading (or trailing) empty String "" element.
		Two subsequent delimiters also result in an empty String "" element.</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String "" is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the string literal syntax "string value".

	String can be concatenated by using the + operator. If an operand is not a
	String, it is passed through Std.string() first.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="C:\Servers\Haxe\haxe\std/StringBuf.hx">
		<b><c path="String"/></b>
		<new public="1" set="method" line="47">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Its cross-platform implementation uses String concatenation internally, but
	StringBuf may be optimized for different targets.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values. However, the internal buffer cannot be modified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="StringTools" params="" file="C:\Servers\Haxe\haxe\std/StringTools.hx">
		<startsWith public="1" set="method" line="127" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` starts with the string `start`.

		If `start` is null, the result is unspecified.

		If `start` is the empty String "", the result is true.</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="144" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the string `s` ends with the string `end`.

		If `end` is null, the result is unspecified.

		If `end` is the empty String "", the result is true.</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="165" static="1">
			<f a="s:pos">
				<c path="String"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the character in the string `s` at position `pos` is a space.

		A character is considered to be a space character if its character code
		is 9,10,11,12,13 or 32.

		If `s` is the empty String "", or if pos is not a valid position within
		`s`, the result is false.</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="179" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="204" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes trailing space characters of `s`.

		This function internally calls isSpace() to decide which characters to
		remove.

		If `s` is the empty String "" or consists only of space characters, the
		result is the empty String "".</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="226" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Removes leading and trailing space characters of `s`.

		This is a convenience function for ltrim(rtrim(s)).</haxe_doc>
		</trim>
		<lpad public="1" set="method" line="248" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Concatenates `c` to `s` until `s.length` is at least `l`.

		If `c` is the empty String "" or if `l` does not exceed `s.length`,
		`s` is returned unchanged.

		If `c.length` is 1, the resulting String length is exactly `l`.

		Otherwise the length may exceed `l`.

		If `c` is null, the result is unspecified.</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="291" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Replace all occurences of the String `sub` in the String `s` by the
		String `by`.

		If `sub` is the empty String "", `by` is inserted after each character
		of `s`. If `by` is also the empty String "", `s` remains unchanged.

		This is a convenience function for `s.split(sub).join(by)`.

		If `sub` or `by` are null, the result is unspecified.</haxe_doc>
		</replace>
		<hex public="1" set="method" line="313" static="1">
			<f a="n:?digits" v=":null">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes `n` into a hexadecimal representation.

		If `digits` is specified, the resulting String is padded with "0" until
		its length equals `digits`.</haxe_doc>
		</hex>
		<haxe_doc>This class provides advanced methods on Strings. It is ideally used with
	'using StringTools' and then acts as an extension to the String class.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Type" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/Type.hx">
		<getClass public="1" params="T" set="method" line="36" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<x path="Class"><c path="getClass.T"/></x>
			</f>
			<haxe_doc>Returns the class of `o`, if `o` is a class instance.

		If `o` is null or of a different type, null is returned.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getClass>
		<getSuperClass public="1" set="method" line="62" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Returns the super-class of class `c`.

		If `c` has no super class, null is returned.

		If `c` is null, the result is unspecified.

		In general, type parameter information cannot be obtained at runtime.</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" line="69" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of class `c`, including its path.

		If `c` is inside a package, the package structure is returned dot-
		separated, with another dot separating the class name:
		`pack1.pack2.(...).packN.ClassName`
		If `c` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `c` has no package, the class name is returned.

		If `c` is null, the result is unspecified.

		The class name does not include any type parameters.</haxe_doc>
		</getClassName>
		<resolveClass public="1" set="method" line="89" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Class"><d/></x>
			</f>
			<haxe_doc>Resolves a class by name.

		If `name` is the path of an existing class, that class is returned.

		Otherwise null is returned.

		If `name` is null or the path to a different type, the result is
		unspecified.

		The class name must not include any type parameters.</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" line="113" static="1">
			<f a="name">
				<c path="String"/>
				<x path="Enum"><d/></x>
			</f>
			<haxe_doc>Resolves an enum by name.

		If `name` is the path of an existing enum, that enum is returned.

		Otherwise null is returned.

		If `name` is null the result is unspecified.

		If `name` is the path to a different type, null is returned.

		The enum name must not include any type parameters.</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" line="130" static="1">
			<f a="cl:args">
				<x path="Class"><c path="createInstance.T"/></x>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`, using `args` as arguments to the
		class constructor.

		This function guarantees that the class constructor is called.

		Default values of constructors arguments are not guaranteed to be
		taken into account.

		If `cl` or `args` are null, or if the number of elements in `args` does
		not match the expected number of constructor arguments, or if any
		argument has an invalid type,  or if `cl` has no own constructor, the
		result is unspecified.

		In particular, default values of constructor arguments are not
		guaranteed to be taken into account.</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" line="151" static="1">
			<f a="cl">
				<x path="Class"><c path="createEmptyInstance.T"/></x>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>Creates an instance of class `cl`.

		This function guarantees that the class constructor is not called.

		If `cl` is null, the result is unspecified.</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" line="164" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createEnum.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" line="176" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createEnumIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createEnumIndex>
		<describe set="method" line="182" static="1"><f a="t:fact">
	<d/>
	<x path="Bool"/>
	<c path="Array"><c path="String"/></c>
</f></describe>
		<getClassFields public="1" set="method" line="203" static="1">
			<f a="c">
				<x path="Class"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of static fields of class `c`.

		This does not include static fields of parent classes.

		The order of the fields in the returned Array is unspecified.

		If `c` is null, the result is unspecified.

		(As3) This method only returns class fields that are public.</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" line="210" static="1">
			<f a="e">
				<x path="Enum"><d/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getEnumConstructs>
		<enumEq public="1" params="T" set="method" line="247" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</enumEq>
		<haxe_doc>The haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="C:\Servers\Haxe\haxe\std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="UInt"/></this>
		<to><icast><x path="Int"/></icast></to>
		<haxe_doc>The unsigned Int type is only defined for Flash9 and C#. It's currently
	handled the same as a normal Int.</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<enum path="XmlType" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/Xml.hx" module="Xml"><meta><m n=":flatEnum"/></meta></enum>
	<class path="Xml" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/Xml.hx">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</DocType>
		<ProcessingInstruction public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</ProcessingInstruction>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>A type of Xml node.</haxe_doc>
		</Document>
		<parse public="1" set="method" line="45" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>Parse a String into an Xml object.</haxe_doc>
		</parse>
		<compare set="method" line="67" static="1">
			<f a="a:b">
				<c path="Xml"/>
				<c path="Xml"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":keep"/></meta>
		</compare>
		<getNodeType set="method" line="104" static="1"><f a="node">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
</f></getNodeType>
		<wrap set="method" line="180" static="1"><f a="node:?type" v=":null">
	<c path="flash.xml.XML"/>
	<e path="XmlType"/>
	<c path="Xml"/>
</f></wrap>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.</haxe_doc>
		</nodeType>
		<_node><c path="flash.xml.XML"/></_node>
		<get_nodeName set="method" line="120">
			<f a=""><c path="String"/></f>
			<meta><m n=":accessor"/></meta>
		</get_nodeName>
		<get_nodeValue set="method" line="140">
			<f a=""><c path="String"/></f>
			<meta><m n=":accessor"/></meta>
		</get_nodeValue>
		<wraps set="method" line="187"><f a="xList">
	<c path="flash.xml.XMLList"/>
	<c path="Array"><c path="Xml"/></c>
</f></wraps>
		<getAttribNS set="method" line="194"><f a="cur:ns">
	<c path="flash.xml.XML"/>
	<c path="Array"><c path="String"/></c>
	<c path="flash.xml.XMLList"/>
</f></getAttribNS>
		<get public="1" set="method" line="207">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.</haxe_doc>
		</get>
		<exists public="1" set="method" line="255">
			<f a="att">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if the Element node has a given attribute.
		Attributes are case-sensitive.</haxe_doc>
		</exists>
		<attributes public="1" set="method" line="266">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an [Iterator] on all the attribute names.</haxe_doc>
		</attributes>
		<elements public="1" set="method" line="304">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.</haxe_doc>
		</elements>
		<firstChild public="1" set="method" line="345">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node.</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method" line="354">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>Returns the first child node which is an Element.</haxe_doc>
		</firstElement>
		<toString public="1" set="method" line="395">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of the Xml node.</haxe_doc>
		</toString>
		<new set="method" line="71"><f a=""><x path="Void"/></f></new>
		<haxe_doc>The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="flash.display.MovieClip" params="" file="C:\Servers\Haxe\haxe\std/flash/display/MovieClip.hx" extern="1">
		<extends path="flash.display.Sprite"/>
		<currentFrame public="1" set="null"><x path="Int"/></currentFrame>
		<currentFrameLabel public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</currentFrameLabel>
		<currentLabel public="1" set="null"><c path="String"/></currentLabel>
		<currentLabels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></currentLabels>
		<currentScene public="1" set="null"><c path="flash.display.Scene"/></currentScene>
		<enabled public="1"><x path="Bool"/></enabled>
		<framesLoaded public="1" set="null"><x path="Int"/></framesLoaded>
		<isPlaying public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<scenes public="1" set="null"><c path="Array"><c path="flash.display.Scene"/></c></scenes>
		<totalFrames public="1" set="null"><x path="Int"/></totalFrames>
		<trackAsMenu public="1"><x path="Bool"/></trackAsMenu>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></addFrameScript>
		<gotoAndPlay public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndPlay>
		<gotoAndStop public="1" set="method"><f a="frame:?scene">
	<t path="flash.utils.Object"/>
	<c path="String"/>
	<x path="Void"/>
</f></gotoAndStop>
		<nextFrame public="1" set="method"><f a=""><x path="Void"/></f></nextFrame>
		<nextScene public="1" set="method"><f a=""><x path="Void"/></f></nextScene>
		<play public="1" set="method"><f a=""><x path="Void"/></f></play>
		<prevFrame public="1" set="method"><f a=""><x path="Void"/></f></prevFrame>
		<prevScene public="1" set="method"><f a=""><x path="Void"/></f></prevScene>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Boot" params="" file="C:\Servers\Haxe\haxe\std/flash/Boot.hx">
		<extends path="flash.display.MovieClip"/>
		<tf static="1"><c path="flash.text.TextField"/></tf>
		<lines static="1"><c path="Array"><c path="String"/></c></lines>
		<lastError static="1"><c path="flash.errors.Error"/></lastError>
		<skip_constructor public="1" line="51" static="1"><x path="Bool"/></skip_constructor>
		<enum_to_string public="1" set="method" line="83" static="1"><f a="e">
	<a>
		<tag><c path="String"/></tag>
		<params><c path="Array"><d/></c></params>
	</a>
	<c path="String"/>
</f></enum_to_string>
		<__instanceof public="1" set="method" line="92" static="1"><f a="v:t">
	<d/>
	<d/>
	<x path="Bool"/>
</f></__instanceof>
		<__clear_trace public="1" set="method" line="102" static="1"><f a=""><x path="Void"/></f></__clear_trace>
		<__set_trace_color public="1" set="method" line="110" static="1"><f a="rgb">
	<x path="UInt"/>
	<x path="Void"/>
</f></__set_trace_color>
		<getTrace public="1" set="method" line="116" static="1"><f a=""><c path="flash.text.TextField"/></f></getTrace>
		<__trace public="1" set="method" line="144" static="1"><f a="v:pos">
	<d/>
	<t path="haxe.PosInfos"/>
	<x path="Void"/>
</f></__trace>
		<__string_rec public="1" set="method" line="163" static="1"><f a="v:str">
	<d/>
	<c path="String"/>
	<c path="String"/>
</f></__string_rec>
		<__unprotect__ set="method" line="208" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></__unprotect__>
		<start set="method" line="53"><f a=""><x path="Void"/></f></start>
		<doInitDelay set="method" line="74"><f a="_">
	<unknown/>
	<x path="Void"/>
</f></doInitDelay>
		<init set="method" line="79"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="45"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash._Boot.RealBoot" params="" file="C:\Servers\Haxe\haxe\std/flash/Boot.hx" private="1" module="flash.Boot">
		<extends path="flash.Boot"/>
		<new set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.Lib" params="" file="C:\Servers\Haxe\haxe\std/flash/Lib.hx">
		<current public="1" static="1"><c path="flash.display.MovieClip"/></current>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="flash.Vector" params="T" file="C:\Servers\Haxe\haxe\std/flash/Vector.hx" extern="1">
		<ofArray public="1" params="T" get="inline" set="null" line="47" static="1"><f a="v">
	<c path="Array"><c path="ofArray.T"/></c>
	<c path="flash.Vector"><c path="ofArray.T"/></c>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="51" static="1"><f a="v">
	<c path="flash.Vector"><c path="convert.T"/></c>
	<c path="flash.Vector"><c path="convert.U"/></c>
</f></convert>
		<length public="1"><x path="Int"/></length>
		<fixed public="1"><x path="Bool"/></fixed>
		<concat public="1" set="method"><f a="?a">
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></concat>
		<join public="1" set="method"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></pop>
		<push public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method"><f a=""><t path="Null"><c path="flash.Vector.T"/></t></f></shift>
		<unshift public="1" set="method"><f a="x">
	<c path="flash.Vector.T"/>
	<x path="Void"/>
</f></unshift>
		<slice public="1" set="method"><f a="?pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></slice>
		<sort public="1" set="method"><f a="f">
	<f a=":">
		<c path="flash.Vector.T"/>
		<c path="flash.Vector.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.Vector"><c path="flash.Vector.T"/></c>
</f></splice>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<indexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method"><f a="x:?from">
	<c path="flash.Vector.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<new public="1" set="method"><f a="?length:?fixed">
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>The Vector class is very similar to Array but is only supported by the Flash Player 10+</haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.accessibility.AccessibilityImplementation" params="" file="C:\Servers\Haxe\haxe\std/flash/accessibility/AccessibilityImplementation.hx" extern="1">
		<errno public="1"><x path="UInt"/></errno>
		<stub public="1"><x path="Bool"/></stub>
		<accDoDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="Void"/>
</f></accDoDefaultAction>
		<accLocation public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<d/>
</f></accLocation>
		<accSelect public="1" set="method"><f a="operation:childID">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></accSelect>
		<getChildIDArray public="1" set="method"><f a=""><c path="Array"><d/></c></f></getChildIDArray>
		<get_accDefaultAction public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accDefaultAction>
		<get_accFocus public="1" set="method"><f a=""><x path="UInt"/></f></get_accFocus>
		<get_accName public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accName>
		<get_accRole public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accRole>
		<get_accSelection public="1" set="method"><f a=""><c path="Array"><d/></c></f></get_accSelection>
		<get_accState public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<x path="UInt"/>
</f></get_accState>
		<get_accValue public="1" set="method"><f a="childID">
	<x path="UInt"/>
	<c path="String"/>
</f></get_accValue>
		<get_selectionActiveIndex public="1" set="method"><f a=""><d/></f></get_selectionActiveIndex>
		<get_selectionAnchorIndex public="1" set="method"><f a=""><d/></f></get_selectionAnchorIndex>
		<isLabeledBy public="1" set="method"><f a="labelBounds">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></isLabeledBy>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.accessibility.AccessibilityProperties" params="" file="C:\Servers\Haxe\haxe\std/flash/accessibility/AccessibilityProperties.hx" extern="1">
		<description public="1"><c path="String"/></description>
		<forceSimple public="1"><x path="Bool"/></forceSimple>
		<name public="1"><c path="String"/></name>
		<noAutoLabeling public="1"><x path="Bool"/></noAutoLabeling>
		<shortcut public="1"><c path="String"/></shortcut>
		<silent public="1"><x path="Bool"/></silent>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.ActionScriptVersion" params="" file="C:\Servers\Haxe\haxe\std/flash/display/ActionScriptVersion.hx">
		<ACTIONSCRIPT2/>
		<ACTIONSCRIPT3/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.display.Bitmap" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Bitmap.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<bitmapData public="1"><c path="flash.display.BitmapData"/></bitmapData>
		<pixelSnapping public="1"><e path="flash.display.PixelSnapping"/></pixelSnapping>
		<smoothing public="1"><x path="Bool"/></smoothing>
		<new public="1" set="method"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="flash.display.BitmapData"/>
	<e path="flash.display.PixelSnapping"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.display.BlendMode" params="" file="C:\Servers\Haxe\haxe\std/flash/display/BlendMode.hx">
		<ADD/>
		<ALPHA/>
		<DARKEN/>
		<DIFFERENCE/>
		<ERASE/>
		<HARDLIGHT/>
		<INVERT/>
		<LAYER/>
		<LIGHTEN/>
		<MULTIPLY/>
		<NORMAL/>
		<OVERLAY/>
		<SCREEN/>
		<SHADER/>
		<SUBTRACT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.CapsStyle" params="" file="C:\Servers\Haxe\haxe\std/flash/display/CapsStyle.hx">
		<NONE/>
		<ROUND/>
		<SQUARE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrection" params="" file="C:\Servers\Haxe\haxe\std/flash/display/ColorCorrection.hx">
		<DEFAULT/>
		<OFF/>
		<ON/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<enum path="flash.display.ColorCorrectionSupport" params="" file="C:\Servers\Haxe\haxe\std/flash/display/ColorCorrectionSupport.hx">
		<DEFAULT_OFF/>
		<DEFAULT_ON/>
		<UNSUPPORTED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</enum>
	<class path="flash.display.FrameLabel" params="" file="C:\Servers\Haxe\haxe\std/flash/display/FrameLabel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<frame public="1" set="null"><x path="Int"/></frame>
		<name public="1" set="null"><c path="String"/></name>
		<new public="1" set="method"><f a="name:frame">
	<c path="String"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GradientType" params="" file="C:\Servers\Haxe\haxe\std/flash/display/GradientType.hx">
		<LINEAR/>
		<RADIAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Graphics" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/display/Graphics.hx" extern="1">
		<beginBitmapFill public="1" set="method"><f a="bitmap:?matrix:?repeat:?smooth">
	<c path="flash.display.BitmapData"/>
	<c path="flash.geom.Matrix"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></beginBitmapFill>
		<beginFill public="1" set="method"><f a="color:?alpha">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginShaderFill public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</beginShaderFill>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<copyFrom public="1" set="method">
			<f a="sourceGraphics">
				<c path="flash.display.Graphics"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</copyFrom>
		<cubicCurveTo public="1" set="method">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<curveTo public="1" set="method"><f a="controlX:controlY:anchorX:anchorY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<drawCircle public="1" set="method"><f a="x:y:radius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawEllipse>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<x path="openfl.Vector"><c path="flash.display.IGraphicsData"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawGraphicsData>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<x path="openfl.Vector"><x path="Int"/></x>
				<x path="openfl.Vector"><x path="Float"/></x>
				<e path="flash.display.GraphicsPathWinding"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawPath>
		<drawRect public="1" set="method"><f a="x:y:width:height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method"><f a="x:y:width:height:ellipseWidth:?ellipseHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></drawRoundRectComplex>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<c path="flash.Vector"><x path="Float"/></c>
				<x path="openfl.Vector"><x path="Int"/></x>
				<x path="openfl.Vector"><x path="Float"/></x>
				<e path="flash.display.TriangleCulling"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</drawTriangles>
		<endFill public="1" set="method"><f a=""><x path="Void"/></f></endFill>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="flash.display.BitmapData"/>
				<c path="flash.geom.Matrix"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineBitmapStyle>
		<lineGradientStyle public="1" set="method"><f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
	<e path="flash.display.GradientType"/>
	<c path="Array"><x path="UInt"/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="flash.geom.Matrix"/>
	<e path="flash.display.SpreadMethod"/>
	<e path="flash.display.InterpolationMethod"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineGradientStyle>
		<lineShaderStyle public="1" set="method">
			<f a="shader:?matrix">
				<c path="flash.display.Shader"/>
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</lineShaderStyle>
		<lineStyle public="1" set="method"><f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Bool"/>
	<e path="flash.display.LineScaleMode"/>
	<e path="flash.display.CapsStyle"/>
	<e path="flash.display.JointStyle"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineStyle>
		<lineTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display.GraphicsPathWinding" params="" file="C:\Servers\Haxe\haxe\std/flash/display/GraphicsPathWinding.hx">
		<EVEN_ODD/>
		<NON_ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.IGraphicsData" params="" file="C:\Servers\Haxe\haxe\std/flash/display/IGraphicsData.hx" extern="1" interface="1"/>
	<enum path="flash.display.InterpolationMethod" params="" file="C:\Servers\Haxe\haxe\std/flash/display/InterpolationMethod.hx">
		<LINEAR_RGB/>
		<RGB/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.JointStyle" params="" file="C:\Servers\Haxe\haxe\std/flash/display/JointStyle.hx">
		<BEVEL/>
		<MITER/>
		<ROUND/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.LineScaleMode" params="" file="C:\Servers\Haxe\haxe\std/flash/display/LineScaleMode.hx">
		<HORIZONTAL/>
		<NONE/>
		<NORMAL/>
		<VERTICAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Loader" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Loader.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentLoaderInfo public="1" set="null"><c path="flash.display.LoaderInfo"/></contentLoaderInfo>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadBytes public="1" set="method"><f a="bytes:?context">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.system.LoaderContext"/>
	<x path="Void"/>
</f></loadBytes>
		<unload public="1" set="method"><f a=""><x path="Void"/></f></unload>
		<unloadAndStop public="1" set="method">
			<f a="?gc">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unloadAndStop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.display.LoaderInfo" params="" file="C:\Servers\Haxe\haxe\std/flash/display/LoaderInfo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1"><f a="object">
	<d/>
	<c path="flash.display.LoaderInfo"/>
</f></getLoaderInfoByDefinition>
		<actionScriptVersion public="1" set="null"><e path="flash.display.ActionScriptVersion"/></actionScriptVersion>
		<applicationDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<bytes public="1" set="null"><c path="flash.utils.ByteArray"/></bytes>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<childAllowsParent public="1" set="null"><x path="Bool"/></childAllowsParent>
		<content public="1" set="null"><c path="flash.display.DisplayObject"/></content>
		<contentType public="1" set="null"><c path="String"/></contentType>
		<frameRate public="1" set="null"><x path="Float"/></frameRate>
		<height public="1" set="null"><x path="Int"/></height>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<loader public="1" set="null"><c path="flash.display.Loader"/></loader>
		<loaderURL public="1" set="null"><c path="String"/></loaderURL>
		<parameters public="1" set="null"><d><c path="String"/></d></parameters>
		<parentAllowsChild public="1" set="null"><x path="Bool"/></parentAllowsChild>
		<sameDomain public="1" set="null"><x path="Bool"/></sameDomain>
		<sharedEvents public="1" set="null"><c path="flash.events.EventDispatcher"/></sharedEvents>
		<swfVersion public="1" set="null"><x path="UInt"/></swfVersion>
		<uncaughtErrorEvents public="1" set="null">
			<c path="flash.events.UncaughtErrorEvents"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</uncaughtErrorEvents>
		<url public="1" set="null"><c path="String"/></url>
		<width public="1" set="null"><x path="Int"/></width>
	</class>
	<class path="flash.display.NativeMenu" params="" file="C:\Servers\Haxe\haxe\std/flash/display/NativeMenu.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="flash.display.PixelSnapping" params="" file="C:\Servers\Haxe\haxe\std/flash/display/PixelSnapping.hx">
		<ALWAYS/>
		<AUTO/>
		<NEVER/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Scene" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Scene.hx" extern="1">
		<labels public="1" set="null"><c path="Array"><c path="flash.display.FrameLabel"/></c></labels>
		<name public="1" set="null"><c path="String"/></name>
		<numFrames public="1" set="null"><x path="Int"/></numFrames>
		<new public="1" set="method"><f a="name:labels:numFrames">
	<c path="String"/>
	<c path="Array"><c path="flash.display.FrameLabel"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display.Shader" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Shader.hx" extern="1">
		<byteCode public="1" get="null"><c path="flash.utils.ByteArray"/></byteCode>
		<data public="1"><c path="flash.display.ShaderData"/></data>
		<precisionHint public="1"><e path="flash.display.ShaderPrecision"/></precisionHint>
		<new public="1" set="method"><f a="?code">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.display.ShaderData" params="" file="C:\Servers\Haxe\haxe\std/flash/display/ShaderData.hx" extern="1">
		<new public="1" set="method"><f a="byteCode">
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.display.ShaderPrecision" params="" file="C:\Servers\Haxe\haxe\std/flash/display/ShaderPrecision.hx">
		<FAST/>
		<FULL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Shape" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Shape.hx" extern="1">
		<extends path="flash.display.DisplayObject"/>
		<graphics public="1" set="null"><c path="flash.display.Graphics"/></graphics>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.display.SpreadMethod" params="" file="C:\Servers\Haxe\haxe\std/flash/display/SpreadMethod.hx">
		<PAD/>
		<REFLECT/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display.Stage" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/display/Stage.hx" extern="1">
		<extends path="flash.display.DisplayObjectContainer"/>
		<align public="1"><e path="flash.display.StageAlign"/></align>
		<allowsFullScreen public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</allowsFullScreen>
		<color public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</color>
		<colorCorrection public="1">
			<e path="flash.display.ColorCorrection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrection>
		<colorCorrectionSupport public="1" set="null">
			<e path="flash.display.ColorCorrectionSupport"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</colorCorrectionSupport>
		<displayContextInfo public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</displayContextInfo>
		<displayState public="1"><e path="flash.display.StageDisplayState"/></displayState>
		<focus public="1"><c path="flash.display.InteractiveObject"/></focus>
		<frameRate public="1"><x path="Float"/></frameRate>
		<fullScreenHeight public="1" set="null"><x path="UInt"/></fullScreenHeight>
		<fullScreenSourceRect public="1"><c path="flash.geom.Rectangle"/></fullScreenSourceRect>
		<fullScreenWidth public="1" set="null"><x path="UInt"/></fullScreenWidth>
		<mouseLock public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</mouseLock>
		<quality public="1"><e path="flash.display.StageQuality"/></quality>
		<scaleMode public="1"><e path="flash.display.StageScaleMode"/></scaleMode>
		<showDefaultContextMenu public="1"><x path="Bool"/></showDefaultContextMenu>
		<softKeyboardRect public="1" set="null">
			<c path="flash.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</softKeyboardRect>
		<stage3Ds public="1" set="null">
			<x path="openfl.Vector"><c path="flash.display.Stage3D"/></x>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</stage3Ds>
		<stageFocusRect public="1"><x path="Bool"/></stageFocusRect>
		<stageHeight public="1"><x path="Int"/></stageHeight>
		<stageVideos public="1" set="null">
			<x path="openfl.Vector"><c path="flash.media.StageVideo"/></x>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</stageVideos>
		<stageWidth public="1"><x path="Int"/></stageWidth>
		<wmodeGPU public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</wmodeGPU>
		<invalidate public="1" set="method"><f a=""><x path="Void"/></f></invalidate>
		<isFocusInaccessible public="1" set="method"><f a=""><x path="Bool"/></f></isFocusInaccessible>
	</class>
	<class path="flash.display.Stage3D" params="" file="C:\Servers\Haxe\haxe\std/flash/display/Stage3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<context3D public="1" set="null"><c path="flash.display3D.Context3D"/></context3D>
		<visible public="1"><x path="Bool"/></visible>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<requestContext3D public="1" set="method"><f a="?context3DRenderMode:?profile">
	<c path="String"/>
	<e path="flash.display3D.Context3DProfile"/>
	<x path="Void"/>
</f></requestContext3D>
		<meta><m n=":require"><e>flash11</e></m></meta>
	</class>
	<enum path="flash.display.StageAlign" params="" file="C:\Servers\Haxe\haxe\std/flash/display/StageAlign.hx">
		<BOTTOM/>
		<BOTTOM_LEFT/>
		<BOTTOM_RIGHT/>
		<LEFT/>
		<RIGHT/>
		<TOP/>
		<TOP_LEFT/>
		<TOP_RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageDisplayState" params="" file="C:\Servers\Haxe\haxe\std/flash/display/StageDisplayState.hx">
		<FULL_SCREEN/>
		<FULL_SCREEN_INTERACTIVE/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageQuality" params="" file="C:\Servers\Haxe\haxe\std/flash/display/StageQuality.hx">
		<BEST/>
		<HIGH/>
		<HIGH_16X16/>
		<HIGH_16X16_LINEAR/>
		<HIGH_8X8/>
		<HIGH_8X8_LINEAR/>
		<LOW/>
		<MEDIUM/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.StageScaleMode" params="" file="C:\Servers\Haxe\haxe\std/flash/display/StageScaleMode.hx">
		<EXACT_FIT/>
		<NO_BORDER/>
		<NO_SCALE/>
		<SHOW_ALL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display.TriangleCulling" params="" file="C:\Servers\Haxe\haxe\std/flash/display/TriangleCulling.hx">
		<NEGATIVE/>
		<NONE/>
		<POSITIVE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.Context3D" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3D.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<driverInfo public="1" set="null"><c path="String"/></driverInfo>
		<enableErrorChecking public="1"><x path="Bool"/></enableErrorChecking>
		<clear public="1" set="method"><f a="?red:?green:?blue:?alpha:?depth:?stencil:?mask">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></clear>
		<configureBackBuffer public="1" set="method"><f a="width:height:antiAlias:?enableDepthAndStencil:?wantsBestResolution">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></configureBackBuffer>
		<createCubeTexture public="1" set="method"><f a="size:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.CubeTexture"/>
</f></createCubeTexture>
		<createIndexBuffer public="1" set="method"><f a="numIndices">
	<x path="Int"/>
	<c path="flash.display3D.IndexBuffer3D"/>
</f></createIndexBuffer>
		<createProgram public="1" set="method"><f a=""><c path="flash.display3D.Program3D"/></f></createProgram>
		<createTexture public="1" set="method"><f a="width:height:format:optimizeForRenderToTexture:?streamingLevels">
	<x path="Int"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DTextureFormat"/>
	<x path="Bool"/>
	<x path="Int"/>
	<c path="flash.display3D.textures.Texture"/>
</f></createTexture>
		<createVertexBuffer public="1" set="method"><f a="numVertices:data32PerVertex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
</f></createVertexBuffer>
		<dispose public="1" set="method"><f a="?recreate">
	<x path="Bool"/>
	<x path="Void"/>
</f></dispose>
		<drawToBitmapData public="1" set="method"><f a="destination">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></drawToBitmapData>
		<drawTriangles public="1" set="method"><f a="indexBuffer:?firstIndex:?numTriangles">
	<c path="flash.display3D.IndexBuffer3D"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></drawTriangles>
		<present public="1" set="method"><f a=""><x path="Void"/></f></present>
		<setBlendFactors public="1" set="method"><f a="sourceFactor:destinationFactor">
	<e path="flash.display3D.Context3DBlendFactor"/>
	<e path="flash.display3D.Context3DBlendFactor"/>
	<x path="Void"/>
</f></setBlendFactors>
		<setColorMask public="1" set="method"><f a="red:green:blue:alpha">
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setColorMask>
		<setCulling public="1" set="method"><f a="triangleFaceToCull">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<x path="Void"/>
</f></setCulling>
		<setDepthTest public="1" set="method"><f a="depthMask:passCompareMode">
	<x path="Bool"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<x path="Void"/>
</f></setDepthTest>
		<setProgram public="1" set="method"><f a="program">
	<c path="flash.display3D.Program3D"/>
	<x path="Void"/>
</f></setProgram>
		<setProgramConstantsFromByteArray public="1" set="method">
			<f a="programType:firstRegister:numRegisters:data:byteArrayOffset">
				<e path="flash.display3D.Context3DProgramType"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</setProgramConstantsFromByteArray>
		<setProgramConstantsFromMatrix public="1" set="method"><f a="programType:firstRegister:matrix:?transposedMatrix">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setProgramConstantsFromMatrix>
		<setProgramConstantsFromVector public="1" set="method"><f a="programType:firstRegister:data:?numRegisters">
	<e path="flash.display3D.Context3DProgramType"/>
	<x path="Int"/>
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Void"/>
</f></setProgramConstantsFromVector>
		<setRenderToBackBuffer public="1" set="method"><f a=""><x path="Void"/></f></setRenderToBackBuffer>
		<setRenderToTexture public="1" set="method"><f a="texture:?enableDepthAndStencil:?antiAlias:?surfaceSelector">
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setRenderToTexture>
		<setScissorRectangle public="1" set="method"><f a="rectangle">
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></setScissorRectangle>
		<setStencilActions public="1" set="method"><f a="?triangleFace:?compareMode:?actionOnBothPass:?actionOnDepthFail:?actionOnDepthPassStencilFail">
	<e path="flash.display3D.Context3DTriangleFace"/>
	<e path="flash.display3D.Context3DCompareMode"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<e path="flash.display3D.Context3DStencilAction"/>
	<x path="Void"/>
</f></setStencilActions>
		<setStencilReferenceValue public="1" set="method"><f a="referenceValue:?readMask:?writeMask">
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></setStencilReferenceValue>
		<setTextureAt public="1" set="method"><f a="sampler:texture">
	<x path="Int"/>
	<c path="flash.display3D.textures.TextureBase"/>
	<x path="Void"/>
</f></setTextureAt>
		<setVertexBufferAt public="1" set="method"><f a="index:buffer:?bufferOffset:?format">
	<x path="Int"/>
	<c path="flash.display3D.VertexBuffer3D"/>
	<x path="Int"/>
	<e path="flash.display3D.Context3DVertexBufferFormat"/>
	<x path="Void"/>
</f></setVertexBufferAt>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.display3D.Context3DBlendFactor" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DBlendFactor.hx">
		<DESTINATION_ALPHA/>
		<DESTINATION_COLOR/>
		<ONE/>
		<ONE_MINUS_DESTINATION_ALPHA/>
		<ONE_MINUS_DESTINATION_COLOR/>
		<ONE_MINUS_SOURCE_ALPHA/>
		<ONE_MINUS_SOURCE_COLOR/>
		<SOURCE_ALPHA/>
		<SOURCE_COLOR/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DCompareMode" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DCompareMode.hx">
		<ALWAYS/>
		<EQUAL/>
		<GREATER/>
		<GREATER_EQUAL/>
		<LESS/>
		<LESS_EQUAL/>
		<NEVER/>
		<NOT_EQUAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DMipFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DMipFilter.hx">
		<MIPLINEAR/>
		<MIPNEAREST/>
		<MIPNONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProfile" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DProfile.hx">
		<BASELINE/>
		<BASELINE_CONSTRAINED/>
		<BASELINE_EXTENDED/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DProgramType" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DProgramType.hx">
		<FRAGMENT/>
		<VERTEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DStencilAction" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DStencilAction.hx">
		<DECREMENT_SATURATE/>
		<DECREMENT_WRAP/>
		<INCREMENT_SATURATE/>
		<INCREMENT_WRAP/>
		<INVERT/>
		<KEEP/>
		<SET/>
		<ZERO/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DTextureFilter.hx">
		<LINEAR/>
		<NEAREST/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTextureFormat" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DTextureFormat.hx">
		<BGRA/>
		<BGRA_PACKED/>
		<BGR_PACKED/>
		<COMPRESSED/>
		<COMPRESSED_ALPHA/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DTriangleFace" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DTriangleFace.hx">
		<BACK/>
		<FRONT/>
		<FRONT_AND_BACK/>
		<NONE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DVertexBufferFormat" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DVertexBufferFormat.hx">
		<BYTES_4/>
		<FLOAT_1/>
		<FLOAT_2/>
		<FLOAT_3/>
		<FLOAT_4/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.display3D.Context3DWrapMode" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Context3DWrapMode.hx">
		<CLAMP/>
		<REPEAT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.display3D.IndexBuffer3D" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/IndexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startOffset:count">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startOffset:count">
	<c path="flash.Vector"><x path="UInt"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.Program3D" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/Program3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<upload public="1" set="method"><f a="vertexProgram:fragmentProgram">
	<c path="flash.utils.ByteArray"/>
	<c path="flash.utils.ByteArray"/>
	<x path="Void"/>
</f></upload>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.VertexBuffer3D" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/VertexBuffer3D.hx" extern="1">
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:startVertex:numVertices">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<uploadFromVector public="1" set="method"><f a="data:startVertex:numVertices">
	<c path="flash.Vector"><x path="Float"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></uploadFromVector>
	</class>
	<class path="flash.display3D.textures.TextureBase" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/textures/TextureBase.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
	</class>
	<class path="flash.display3D.textures.CubeTexture" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/textures/CubeTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:side:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:side:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.RectangleTexture" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/textures/RectangleTexture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadFromBitmapData public="1" set="method"><f a="source">
	<c path="flash.display.BitmapData"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.display3D.textures.Texture" params="" file="C:\Servers\Haxe\haxe\std/flash/display3D/textures/Texture.hx" extern="1">
		<extends path="flash.display3D.textures.TextureBase"/>
		<uploadCompressedTextureFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?async">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></uploadCompressedTextureFromByteArray>
		<uploadFromBitmapData public="1" set="method"><f a="source:?miplevel">
	<c path="flash.display.BitmapData"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromBitmapData>
		<uploadFromByteArray public="1" set="method"><f a="data:byteArrayOffset:?miplevel">
	<c path="flash.utils.ByteArray"/>
	<x path="UInt"/>
	<x path="UInt"/>
	<x path="Void"/>
</f></uploadFromByteArray>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.errors.Error" params="" file="C:\Servers\Haxe\haxe\std/flash/errors/Error.hx" extern="1">
		<length public="1" static="1"><x path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<x path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<x path="Class"><d/></x>
	<x path="UInt"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<errorID public="1" set="null"><x path="Int"/></errorID>
		<message public="1"><d/></message>
		<name public="1"><d/></name>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.errors.TypeError" params="" file="C:\Servers\Haxe\haxe\std/flash/errors/TypeError.hx" extern="1">
		<extends path="flash.errors.Error"/>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="flash.events.Event" params="" file="C:\Servers\Haxe\haxe\std/flash/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1"><c path="String"/></ACTIVATE>
		<ADDED public="1" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" static="1"><c path="String"/></ADDED_TO_STAGE>
		<CANCEL public="1" static="1"><c path="String"/></CANCEL>
		<CHANGE public="1" static="1"><c path="String"/></CHANGE>
		<CHANNEL_MESSAGE public="1" static="1"><c path="String"/></CHANNEL_MESSAGE>
		<CHANNEL_STATE public="1" static="1"><c path="String"/></CHANNEL_STATE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CLEAR>
		<CLOSE public="1" static="1"><c path="String"/></CLOSE>
		<COMPLETE public="1" static="1"><c path="String"/></COMPLETE>
		<CONNECT public="1" static="1"><c path="String"/></CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CUT>
		<DEACTIVATE public="1" static="1"><c path="String"/></DEACTIVATE>
		<ENTER_FRAME public="1" static="1"><c path="String"/></ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</FRAME_CONSTRUCTED>
		<FULLSCREEN public="1" static="1"><c path="String"/></FULLSCREEN>
		<ID3 public="1" static="1"><c path="String"/></ID3>
		<INIT public="1" static="1"><c path="String"/></INIT>
		<MOUSE_LEAVE public="1" static="1"><c path="String"/></MOUSE_LEAVE>
		<OPEN public="1" static="1"><c path="String"/></OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</PASTE>
		<REMOVED public="1" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<RENDER public="1" static="1"><c path="String"/></RENDER>
		<RESIZE public="1" static="1"><c path="String"/></RESIZE>
		<SCROLL public="1" static="1"><c path="String"/></SCROLL>
		<SELECT public="1" static="1"><c path="String"/></SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1"><c path="String"/></SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" static="1"><c path="String"/></TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1"><c path="String"/></TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1"><c path="String"/></TAB_INDEX_CHANGE>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1"><c path="String"/></UNLOAD>
		<VIDEO_FRAME public="1" static="1"><c path="String"/></VIDEO_FRAME>
		<WORKER_STATE public="1" static="1"><c path="String"/></WORKER_STATE>
		<bubbles public="1" set="null"><x path="Bool"/></bubbles>
		<cancelable public="1" set="null"><x path="Bool"/></cancelable>
		<currentTarget public="1" set="null"><d/></currentTarget>
		<eventPhase public="1" set="null"><e path="flash.events.EventPhase"/></eventPhase>
		<target public="1" set="null"><d/></target>
		<type public="1" set="null"><c path="String"/></type>
		<clone public="1" set="method"><f a=""><c path="flash.events.Event"/></f></clone>
		<formatToString public="1" set="method"><f a="className:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<c path="String"/>
</f></formatToString>
		<isDefaultPrevented public="1" set="method"><f a=""><x path="Bool"/></f></isDefaultPrevented>
		<preventDefault public="1" set="method"><f a=""><x path="Void"/></f></preventDefault>
		<stopImmediatePropagation public="1" set="method"><f a=""><x path="Void"/></f></stopImmediatePropagation>
		<stopPropagation public="1" set="method"><f a=""><x path="Void"/></f></stopPropagation>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.events.EventPhase" params="" file="C:\Servers\Haxe\haxe\std/flash/events/EventPhase.hx">
		<AT_TARGET/>
		<BUBBLING_PHASE/>
		<CAPTURING_PHASE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>UInt</e></m>
		</meta>
	</enum>
	<class path="flash.events.MouseEvent" params="" file="C:\Servers\Haxe\haxe\std/flash/events/MouseEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<CLICK public="1" static="1"><c path="String"/></CLICK>
		<CONTEXT_MENU public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</CONTEXT_MENU>
		<DOUBLE_CLICK public="1" static="1"><c path="String"/></DOUBLE_CLICK>
		<MIDDLE_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_CLICK>
		<MIDDLE_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_DOWN>
		<MIDDLE_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</MIDDLE_MOUSE_UP>
		<MOUSE_DOWN public="1" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1"><c path="String"/></MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_OVER public="1" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_UP public="1" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1"><c path="String"/></MOUSE_WHEEL>
		<RIGHT_CLICK public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_CLICK>
		<RIGHT_MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_DOWN>
		<RIGHT_MOUSE_UP public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</RIGHT_MOUSE_UP>
		<ROLL_OUT public="1" static="1"><c path="String"/></ROLL_OUT>
		<ROLL_OVER public="1" static="1"><c path="String"/></ROLL_OVER>
		<altKey public="1"><x path="Bool"/></altKey>
		<buttonDown public="1"><x path="Bool"/></buttonDown>
		<ctrlKey public="1"><x path="Bool"/></ctrlKey>
		<delta public="1"><x path="Int"/></delta>
		<isRelatedObjectInaccessible public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isRelatedObjectInaccessible>
		<localX public="1"><x path="Float"/></localX>
		<localY public="1"><x path="Float"/></localY>
		<movementX public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementX>
		<movementY public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</movementY>
		<relatedObject public="1"><c path="flash.display.InteractiveObject"/></relatedObject>
		<shiftKey public="1"><x path="Bool"/></shiftKey>
		<stageX public="1" set="null"><x path="Float"/></stageX>
		<stageY public="1" set="null"><x path="Float"/></stageY>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.display.InteractiveObject"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.ProgressEvent" params="" file="C:\Servers\Haxe\haxe\std/flash/events/ProgressEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<PROGRESS public="1" static="1"><c path="String"/></PROGRESS>
		<SOCKET_DATA public="1" static="1"><c path="String"/></SOCKET_DATA>
		<bytesLoaded public="1"><x path="Float"/></bytesLoaded>
		<bytesTotal public="1"><x path="Float"/></bytesTotal>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.TimerEvent" params="" file="C:\Servers\Haxe\haxe\std/flash/events/TimerEvent.hx" extern="1">
		<extends path="flash.events.Event"/>
		<TIMER public="1" static="1"><c path="String"/></TIMER>
		<TIMER_COMPLETE public="1" static="1"><c path="String"/></TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method"><f a=""><x path="Void"/></f></updateAfterEvent>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.events.UncaughtErrorEvents" params="" file="C:\Servers\Haxe\haxe\std/flash/events/UncaughtErrorEvents.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="flash.external.ExternalInterface" params="" file="C:\Servers\Haxe\haxe\std/flash/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1"><x path="Bool"/></available>
		<marshallExceptions public="1" static="1"><x path="Bool"/></marshallExceptions>
		<objectID public="1" set="null" static="1"><c path="String"/></objectID>
		<addCallback public="1" set="method" static="1"><f a="functionName:closure">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addCallback>
		<call public="1" set="method" static="1"><f a="functionName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></call>
	</class>
	<class path="flash.filters.BitmapFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method"><f a=""><c path="flash.filters.BitmapFilter"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.filters.BlurFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/filters/BlurFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<quality public="1"><x path="Int"/></quality>
		<new public="1" set="method"><f a="?blurX:?blurY:?quality">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.DropShadowFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/filters/DropShadowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<angle public="1"><x path="Float"/></angle>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<distance public="1"><x path="Float"/></distance>
		<hideObject public="1"><x path="Bool"/></hideObject>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method"><f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
	<x path="Float"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.filters.GlowFilter" params="" file="C:\Servers\Haxe\haxe\std/flash/filters/GlowFilter.hx" extern="1">
		<extends path="flash.filters.BitmapFilter"/>
		<alpha public="1"><x path="Float"/></alpha>
		<blurX public="1"><x path="Float"/></blurX>
		<blurY public="1"><x path="Float"/></blurY>
		<color public="1"><x path="UInt"/></color>
		<inner public="1"><x path="Bool"/></inner>
		<knockout public="1"><x path="Bool"/></knockout>
		<quality public="1"><x path="Int"/></quality>
		<strength public="1"><x path="Float"/></strength>
		<new public="1" set="method"><f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
	<x path="UInt"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.geom.ColorTransform" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/ColorTransform.hx" extern="1">
		<alphaMultiplier public="1"><x path="Float"/></alphaMultiplier>
		<alphaOffset public="1"><x path="Float"/></alphaOffset>
		<blueMultiplier public="1"><x path="Float"/></blueMultiplier>
		<blueOffset public="1"><x path="Float"/></blueOffset>
		<color public="1"><x path="UInt"/></color>
		<greenMultiplier public="1"><x path="Float"/></greenMultiplier>
		<greenOffset public="1"><x path="Float"/></greenOffset>
		<redMultiplier public="1"><x path="Float"/></redMultiplier>
		<redOffset public="1"><x path="Float"/></redOffset>
		<concat public="1" set="method"><f a="second">
	<c path="flash.geom.ColorTransform"/>
	<x path="Void"/>
</f></concat>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Matrix.hx" extern="1">
		<a public="1"><x path="Float"/></a>
		<b public="1"><x path="Float"/></b>
		<c public="1"><x path="Float"/></c>
		<d public="1"><x path="Float"/></d>
		<tx public="1"><x path="Float"/></tx>
		<ty public="1"><x path="Float"/></ty>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix"/></f></clone>
		<concat public="1" set="method"><f a="m">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></concat>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix">
				<c path="flash.geom.Matrix"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<createBox public="1" set="method"><f a="scaleX:scaleY:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createBox>
		<createGradientBox public="1" set="method"><f a="width:height:?rotation:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></createGradientBox>
		<deltaTransformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></deltaTransformPoint>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<invert public="1" set="method"><f a=""><x path="Void"/></f></invert>
		<rotate public="1" set="method"><f a="angle">
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<scale public="1" set="method"><f a="sx:sy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></scale>
		<setTo public="1" set="method">
			<f a="aa:ba:ca:da:txa:tya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<transformPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></transformPoint>
		<translate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></translate>
		<new public="1" set="method"><f a="?a:?b:?c:?d:?tx:?ty">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Matrix3D" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" set="method" static="1"><f a="thisMat:toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<c path="flash.geom.Matrix3D"/>
</f></interpolate>
		<determinant public="1" set="null"><x path="Float"/></determinant>
		<position public="1"><c path="flash.geom.Vector3D"/></position>
		<rawData public="1"><x path="openfl.Vector"><x path="Float"/></x></rawData>
		<append public="1" set="method"><f a="lhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></append>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></appendRotation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendScale>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></appendTranslation>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></clone>
		<copyColumnFrom public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<copyColumnTo public="1" set="method">
			<f a="column:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyFrom public="1" set="method">
			<f a="sourceMatrix3D">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyRawDataFrom public="1" set="method">
			<f a="vector:?index:?transpose">
				<x path="openfl.Vector"><x path="Float"/></x>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyRawDataTo public="1" set="method">
			<f a="vector:?index:?transpose">
				<x path="openfl.Vector"><x path="Float"/></x>
				<x path="UInt"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRowFrom public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRowTo public="1" set="method">
			<f a="row:vector3D">
				<x path="UInt"/>
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyToMatrix3D public="1" set="method">
			<f a="dest">
				<c path="flash.geom.Matrix3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<decompose public="1" set="method"><f a="?orientationStyle">
	<e path="flash.geom.Orientation3D"/>
	<x path="openfl.Vector"><c path="flash.geom.Vector3D"/></x>
</f></decompose>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></deltaTransformVector>
		<identity public="1" set="method"><f a=""><x path="Void"/></f></identity>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="flash.geom.Matrix3D"/>
	<x path="Float"/>
	<x path="Void"/>
</f></interpolateTo>
		<invert public="1" set="method"><f a=""><x path="Bool"/></f></invert>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></pointAt>
		<prepend public="1" set="method"><f a="rhs">
	<c path="flash.geom.Matrix3D"/>
	<x path="Void"/>
</f></prepend>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<x path="Float"/>
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></prependRotation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependScale>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></prependTranslation>
		<recompose public="1" set="method"><f a="components:?orientationStyle">
	<x path="openfl.Vector"><c path="flash.geom.Vector3D"/></x>
	<e path="flash.geom.Orientation3D"/>
	<x path="Bool"/>
</f></recompose>
		<transformVector public="1" set="method"><f a="v">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></transformVector>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<x path="openfl.Vector"><x path="Float"/></x>
	<x path="openfl.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></transformVectors>
		<transpose public="1" set="method"><f a=""><x path="Void"/></f></transpose>
		<new public="1" set="method"><f a="?v">
	<x path="openfl.Vector"><x path="Float"/></x>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<enum path="flash.geom.Orientation3D" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Orientation3D.hx">
		<AXIS_ANGLE/>
		<EULER_ANGLES/>
		<QUATERNION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.geom.PerspectiveProjection" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/PerspectiveProjection.hx" extern="1">
		<fieldOfView public="1"><x path="Float"/></fieldOfView>
		<focalLength public="1"><x path="Float"/></focalLength>
		<projectionCenter public="1"><c path="flash.geom.Point"/></projectionCenter>
		<toMatrix3D public="1" set="method"><f a=""><c path="flash.geom.Matrix3D"/></f></toMatrix3D>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.geom.Point" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
</f></distance>
		<interpolate public="1" set="method" static="1"><f a="pt1:pt2:f">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></interpolate>
		<polar public="1" set="method" static="1"><f a="len:angle">
	<x path="Float"/>
	<x path="Float"/>
	<c path="flash.geom.Point"/>
</f></polar>
		<length public="1" set="null"><x path="Float"/></length>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<add public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Point"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourcePoint">
				<c path="flash.geom.Point"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></equals>
		<normalize public="1" set="method"><f a="thickness">
	<x path="Float"/>
	<x path="Void"/>
</f></normalize>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<setTo public="1" set="method">
			<f a="xa:ya">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="v">
	<c path="flash.geom.Point"/>
	<c path="flash.geom.Point"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Rectangle" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Rectangle.hx" extern="1">
		<bottom public="1"><x path="Float"/></bottom>
		<bottomRight public="1"><c path="flash.geom.Point"/></bottomRight>
		<height public="1"><x path="Float"/></height>
		<left public="1"><x path="Float"/></left>
		<right public="1"><x path="Float"/></right>
		<size public="1"><c path="flash.geom.Point"/></size>
		<top public="1"><x path="Float"/></top>
		<topLeft public="1"><c path="flash.geom.Point"/></topLeft>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Rectangle"/></f></clone>
		<contains public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></contains>
		<containsPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Bool"/>
</f></containsPoint>
		<containsRect public="1" set="method"><f a="rect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></containsRect>
		<copyFrom public="1" set="method">
			<f a="sourceRect">
				<c path="flash.geom.Rectangle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<equals public="1" set="method"><f a="toCompare">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></equals>
		<inflate public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></inflate>
		<inflatePoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></inflatePoint>
		<intersection public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></intersection>
		<intersects public="1" set="method"><f a="toIntersect">
	<c path="flash.geom.Rectangle"/>
	<x path="Bool"/>
</f></intersects>
		<isEmpty public="1" set="method"><f a=""><x path="Bool"/></f></isEmpty>
		<offset public="1" set="method"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></offset>
		<offsetPoint public="1" set="method"><f a="point">
	<c path="flash.geom.Point"/>
	<x path="Void"/>
</f></offsetPoint>
		<setEmpty public="1" set="method"><f a=""><x path="Void"/></f></setEmpty>
		<setTo public="1" set="method">
			<f a="xa:ya:widtha:heighta">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<union public="1" set="method"><f a="toUnion">
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
</f></union>
		<new public="1" set="method"><f a="?x:?y:?width:?height">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Transform" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Transform.hx" extern="1">
		<colorTransform public="1"><c path="flash.geom.ColorTransform"/></colorTransform>
		<concatenatedColorTransform public="1" set="null"><c path="flash.geom.ColorTransform"/></concatenatedColorTransform>
		<concatenatedMatrix public="1" set="null"><c path="flash.geom.Matrix"/></concatenatedMatrix>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<matrix3D public="1">
			<c path="flash.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</matrix3D>
		<perspectiveProjection public="1">
			<c path="flash.geom.PerspectiveProjection"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</perspectiveProjection>
		<pixelBounds public="1" set="null"><c path="flash.geom.Rectangle"/></pixelBounds>
		<getRelativeMatrix3D public="1" set="method">
			<f a="relativeTo">
				<c path="flash.display.DisplayObject"/>
				<c path="flash.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</getRelativeMatrix3D>
		<new public="1" set="method"><f a="displayObject">
	<c path="flash.display.DisplayObject"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.geom.Vector3D" params="" file="C:\Servers\Haxe\haxe\std/flash/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="flash.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" set="method" static="1"><f a="a:b">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></angleBetween>
		<distance public="1" set="method" static="1"><f a="pt1:pt2">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></distance>
		<length public="1" set="null"><x path="Float"/></length>
		<lengthSquared public="1" set="null"><x path="Float"/></lengthSquared>
		<w public="1"><x path="Float"/></w>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<z public="1"><x path="Float"/></z>
		<add public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></add>
		<clone public="1" set="method"><f a=""><c path="flash.geom.Vector3D"/></f></clone>
		<copyFrom public="1" set="method">
			<f a="sourceVector3D">
				<c path="flash.geom.Vector3D"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<crossProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></crossProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></decrementBy>
		<dotProduct public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
</f></dotProduct>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></equals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<x path="Void"/>
</f></incrementBy>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="flash.geom.Vector3D"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></nearEquals>
		<negate public="1" set="method"><f a=""><x path="Void"/></f></negate>
		<normalize public="1" set="method"><f a=""><x path="Float"/></f></normalize>
		<project public="1" set="method"><f a=""><x path="Void"/></f></project>
		<scaleBy public="1" set="method"><f a="s">
	<x path="Float"/>
	<x path="Void"/>
</f></scaleBy>
		<setTo public="1" set="method">
			<f a="xa:ya:za">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<subtract public="1" set="method"><f a="a">
	<c path="flash.geom.Vector3D"/>
	<c path="flash.geom.Vector3D"/>
</f></subtract>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="?x:?y:?z:?w">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="flash.media.AVCaptionStyle" params="" file="C:\Servers\Haxe\haxe\std/flash/media/AVCaptionStyle.hx" extern="1">
		<BLACK public="1" static="1"><c path="String"/></BLACK>
		<BLUE public="1" static="1"><c path="String"/></BLUE>
		<BRIGHT_BLUE public="1" static="1"><c path="String"/></BRIGHT_BLUE>
		<BRIGHT_CYAN public="1" static="1"><c path="String"/></BRIGHT_CYAN>
		<BRIGHT_GREEN public="1" static="1"><c path="String"/></BRIGHT_GREEN>
		<BRIGHT_MAGENTA public="1" static="1"><c path="String"/></BRIGHT_MAGENTA>
		<BRIGHT_RED public="1" static="1"><c path="String"/></BRIGHT_RED>
		<BRIGHT_WHITE public="1" static="1"><c path="String"/></BRIGHT_WHITE>
		<BRIGHT_YELLOW public="1" static="1"><c path="String"/></BRIGHT_YELLOW>
		<CASUAL public="1" static="1"><c path="String"/></CASUAL>
		<CURSIVE public="1" static="1"><c path="String"/></CURSIVE>
		<CYAN public="1" static="1"><c path="String"/></CYAN>
		<DARK_BLUE public="1" static="1"><c path="String"/></DARK_BLUE>
		<DARK_CYAN public="1" static="1"><c path="String"/></DARK_CYAN>
		<DARK_GREEN public="1" static="1"><c path="String"/></DARK_GREEN>
		<DARK_MAGENTA public="1" static="1"><c path="String"/></DARK_MAGENTA>
		<DARK_RED public="1" static="1"><c path="String"/></DARK_RED>
		<DARK_YELLOW public="1" static="1"><c path="String"/></DARK_YELLOW>
		<DEFAULT public="1" static="1"><c path="String"/></DEFAULT>
		<DEPRESSED public="1" static="1"><c path="String"/></DEPRESSED>
		<GRAY public="1" static="1"><c path="String"/></GRAY>
		<GREEN public="1" static="1"><c path="String"/></GREEN>
		<LARGE public="1" static="1"><c path="String"/></LARGE>
		<LEFT_DROP_SHADOW public="1" static="1"><c path="String"/></LEFT_DROP_SHADOW>
		<MAGENTA public="1" static="1"><c path="String"/></MAGENTA>
		<MEDIUM public="1" static="1"><c path="String"/></MEDIUM>
		<MONOSPACED_WITHOUT_SERIFS public="1" static="1"><c path="String"/></MONOSPACED_WITHOUT_SERIFS>
		<MONOSPACE_WITH_SERIFS public="1" static="1"><c path="String"/></MONOSPACE_WITH_SERIFS>
		<NONE public="1" static="1"><c path="String"/></NONE>
		<PROPORTIONAL_WITHOUT_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITHOUT_SERIFS>
		<PROPORTIONAL_WITH_SERIFS public="1" static="1"><c path="String"/></PROPORTIONAL_WITH_SERIFS>
		<RAISED public="1" static="1"><c path="String"/></RAISED>
		<RED public="1" static="1"><c path="String"/></RED>
		<RIGHT_DROP_SHADOW public="1" static="1"><c path="String"/></RIGHT_DROP_SHADOW>
		<SMALL public="1" static="1"><c path="String"/></SMALL>
		<SMALL_CAPITALS public="1" static="1"><c path="String"/></SMALL_CAPITALS>
		<UNIFORM public="1" static="1"><c path="String"/></UNIFORM>
		<WHITE public="1" static="1"><c path="String"/></WHITE>
		<YELLOW public="1" static="1"><c path="String"/></YELLOW>
		<backgroundColor public="1"><c path="String"/></backgroundColor>
		<backgroundOpacity public="1"><c path="String"/></backgroundOpacity>
		<edgeColor public="1"><c path="String"/></edgeColor>
		<fillColor public="1"><c path="String"/></fillColor>
		<fillOpacity public="1"><c path="String"/></fillOpacity>
		<font public="1"><c path="String"/></font>
		<fontColor public="1"><c path="String"/></fontColor>
		<fontEdge public="1"><c path="String"/></fontEdge>
		<fontOpacity public="1"><c path="String"/></fontOpacity>
		<size public="1"><c path="String"/></size>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVPlayState" params="" file="C:\Servers\Haxe\haxe\std/flash/media/AVPlayState.hx" extern="1">
		<BUFFERING public="1" static="1"><x path="Int"/></BUFFERING>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<PAUSED public="1" static="1"><x path="Int"/></PAUSED>
		<PLAYING public="1" static="1"><x path="Int"/></PLAYING>
		<READY public="1" static="1"><x path="Int"/></READY>
		<SUSPENDED public="1" static="1"><x path="Int"/></SUSPENDED>
		<TRICK_PLAY public="1" static="1"><x path="Int"/></TRICK_PLAY>
		<UNINITIALIZED public="1" static="1"><x path="Int"/></UNINITIALIZED>
		<UNRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></UNRECOVERABLE_ERROR>
		<state public="1" set="null"><x path="Int"/></state>
		<new public="1" set="method"><f a="state">
	<x path="UInt"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVResult" params="" file="C:\Servers\Haxe\haxe\std/flash/media/AVResult.hx" extern="1">
		<ASYNC_OPERATION_IN_PROGRESS public="1" static="1"><x path="Int"/></ASYNC_OPERATION_IN_PROGRESS>
		<AUDIO_START_ERROR public="1" static="1"><x path="Int"/></AUDIO_START_ERROR>
		<BAD_MANIFEST_SIGNATURE public="1" static="1"><x path="Int"/></BAD_MANIFEST_SIGNATURE>
		<BAD_MEDIASAMPLE_FOUND public="1" static="1"><x path="Int"/></BAD_MEDIASAMPLE_FOUND>
		<BAD_MEDIA_INTERLEAVING public="1" static="1"><x path="Int"/></BAD_MEDIA_INTERLEAVING>
		<CALLED_FROM_WRONG_THREAD public="1" static="1"><x path="Int"/></CALLED_FROM_WRONG_THREAD>
		<CANNOT_ERASE_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_ERASE_TIMELINE>
		<CANNOT_FAIL_OVER public="1" static="1"><x path="Int"/></CANNOT_FAIL_OVER>
		<CANNOT_LOAD_PLAY_LIST public="1" static="1"><x path="Int"/></CANNOT_LOAD_PLAY_LIST>
		<CANNOT_SPLIT_TIMELINE public="1" static="1"><x path="Int"/></CANNOT_SPLIT_TIMELINE>
		<CODEC_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CODEC_NOT_SUPPORTED>
		<COMPONENT_CREATION_FAILURE public="1" static="1"><x path="Int"/></COMPONENT_CREATION_FAILURE>
		<CONTAINER_NOT_SUPPORTED public="1" static="1"><x path="Int"/></CONTAINER_NOT_SUPPORTED>
		<CONTENT_LENGTH_MISMATCH public="1" static="1"><x path="Int"/></CONTENT_LENGTH_MISMATCH>
		<CURRENT_PERIOD_EXPIRED public="1" static="1"><x path="Int"/></CURRENT_PERIOD_EXPIRED>
		<DECODER_FAILED public="1" static="1"><x path="Int"/></DECODER_FAILED>
		<DEVICE_OPEN_ERROR public="1" static="1"><x path="Int"/></DEVICE_OPEN_ERROR>
		<DID_NOT_GET_NEXT_FRAGMENT public="1" static="1"><x path="Int"/></DID_NOT_GET_NEXT_FRAGMENT>
		<DRM_INIT_ERROR public="1" static="1"><x path="Int"/></DRM_INIT_ERROR>
		<DRM_NOT_AVAILABLE public="1" static="1"><x path="Int"/></DRM_NOT_AVAILABLE>
		<END_OF_PERIOD public="1" static="1"><x path="Int"/></END_OF_PERIOD>
		<EOF public="1" static="1"><x path="Int"/></EOF>
		<FILE_NOT_FOUND public="1" static="1"><x path="Int"/></FILE_NOT_FOUND>
		<FILE_OPEN_ERROR public="1" static="1"><x path="Int"/></FILE_OPEN_ERROR>
		<FILE_READ_ERROR public="1" static="1"><x path="Int"/></FILE_READ_ERROR>
		<FILE_STRUCTURE_INVALID public="1" static="1"><x path="Int"/></FILE_STRUCTURE_INVALID>
		<FILE_WRITE_ERROR public="1" static="1"><x path="Int"/></FILE_WRITE_ERROR>
		<FRAGMENT_READ_ERROR public="1" static="1"><x path="Int"/></FRAGMENT_READ_ERROR>
		<GENERIC_ERROR public="1" static="1"><x path="Int"/></GENERIC_ERROR>
		<HTTP_TIME_OUT public="1" static="1"><x path="Int"/></HTTP_TIME_OUT>
		<INCOMPATIBLE_RENDER_MODE public="1" static="1"><x path="Int"/></INCOMPATIBLE_RENDER_MODE>
		<INCOMPATIBLE_VERSION public="1" static="1"><x path="Int"/></INCOMPATIBLE_VERSION>
		<INTERNAL_ERROR public="1" static="1"><x path="Int"/></INTERNAL_ERROR>
		<INVALID_OPERATION public="1" static="1"><x path="Int"/></INVALID_OPERATION>
		<INVALID_PARAMETER public="1" static="1"><x path="Int"/></INVALID_PARAMETER>
		<INVALID_REPLACE_DURATION public="1" static="1"><x path="Int"/></INVALID_REPLACE_DURATION>
		<INVALID_SEEK_TIME public="1" static="1"><x path="Int"/></INVALID_SEEK_TIME>
		<INVALID_WITH_AUDIO_ONLY_FILE public="1" static="1"><x path="Int"/></INVALID_WITH_AUDIO_ONLY_FILE>
		<IRRECOVERABLE_ERROR public="1" static="1"><x path="Int"/></IRRECOVERABLE_ERROR>
		<LISTENER_NOT_FOUND public="1" static="1"><x path="Int"/></LISTENER_NOT_FOUND>
		<LIVE_HOLD public="1" static="1"><x path="Int"/></LIVE_HOLD>
		<LIVE_WINDOW_MOVED_BACKWARD public="1" static="1"><x path="Int"/></LIVE_WINDOW_MOVED_BACKWARD>
		<LOST_CONNECTION_RECOVERABLE public="1" static="1"><x path="Int"/></LOST_CONNECTION_RECOVERABLE>
		<MANIFEST_FILE_UNEXPECTEDLY_CHANGED public="1" static="1"><x path="Int"/></MANIFEST_FILE_UNEXPECTEDLY_CHANGED>
		<NETWORK_DOWN public="1" static="1"><x path="Int"/></NETWORK_DOWN>
		<NETWORK_ERROR public="1" static="1"><x path="Int"/></NETWORK_ERROR>
		<NETWORK_UNAVAILABLE public="1" static="1"><x path="Int"/></NETWORK_UNAVAILABLE>
		<NOT_IMPLEMENTED public="1" static="1"><x path="Int"/></NOT_IMPLEMENTED>
		<NO_AUDIO_SINK public="1" static="1"><x path="Int"/></NO_AUDIO_SINK>
		<NO_FIXED_SIZE public="1" static="1"><x path="Int"/></NO_FIXED_SIZE>
		<NO_TIMELINE public="1" static="1"><x path="Int"/></NO_TIMELINE>
		<NO_USEABLE_BITRATE_PROFILE public="1" static="1"><x path="Int"/></NO_USEABLE_BITRATE_PROFILE>
		<NULL_OPERATION public="1" static="1"><x path="Int"/></NULL_OPERATION>
		<ONLY_ALLOWED_IN_PAUSED_STATE public="1" static="1"><x path="Int"/></ONLY_ALLOWED_IN_PAUSED_STATE>
		<OPERATION_ABORTED public="1" static="1"><x path="Int"/></OPERATION_ABORTED>
		<OUT_OF_MEMORY public="1" static="1"><x path="Int"/></OUT_OF_MEMORY>
		<OVERFLOW public="1" static="1"><x path="Int"/></OVERFLOW>
		<PARSE_ERROR public="1" static="1"><x path="Int"/></PARSE_ERROR>
		<PARTIAL_REPLACEMENT public="1" static="1"><x path="Int"/></PARTIAL_REPLACEMENT>
		<PERIOD_HOLD public="1" static="1"><x path="Int"/></PERIOD_HOLD>
		<PERIOD_NOT_LOADED public="1" static="1"><x path="Int"/></PERIOD_NOT_LOADED>
		<PLAYBACK_NOT_ENABLED public="1" static="1"><x path="Int"/></PLAYBACK_NOT_ENABLED>
		<POSTROLL_WITH_LIVE_NOT_ALLOWED public="1" static="1"><x path="Int"/></POSTROLL_WITH_LIVE_NOT_ALLOWED>
		<PREVIOUS_STEP_SEEK_IN_PROGRESS public="1" static="1"><x path="Int"/></PREVIOUS_STEP_SEEK_IN_PROGRESS>
		<PROTOCOL_NOT_SUPPORTED public="1" static="1"><x path="Int"/></PROTOCOL_NOT_SUPPORTED>
		<RANGE_ERROR public="1" static="1"><x path="Int"/></RANGE_ERROR>
		<RANGE_SPANS_READHEAD public="1" static="1"><x path="Int"/></RANGE_SPANS_READHEAD>
		<RENDITION_M3U8_ERROR public="1" static="1"><x path="Int"/></RENDITION_M3U8_ERROR>
		<REPLACEMENT_FAILED public="1" static="1"><x path="Int"/></REPLACEMENT_FAILED>
		<RESOURCE_NOT_SPECIFIED public="1" static="1"><x path="Int"/></RESOURCE_NOT_SPECIFIED>
		<SEEK_FAILED public="1" static="1"><x path="Int"/></SEEK_FAILED>
		<SEGMENT_SKIPPED_ON_FAILURE public="1" static="1"><x path="Int"/></SEGMENT_SKIPPED_ON_FAILURE>
		<SIZE_UNKNOWN public="1" static="1"><x path="Int"/></SIZE_UNKNOWN>
		<SPS_PPS_FOUND_OUTSIDE_AVCC public="1" static="1"><x path="Int"/></SPS_PPS_FOUND_OUTSIDE_AVCC>
		<SUCCESS public="1" static="1"><x path="Int"/></SUCCESS>
		<SWITCH_TO_ASYMMETRIC_PROFILE public="1" static="1"><x path="Int"/></SWITCH_TO_ASYMMETRIC_PROFILE>
		<UNDERFLOW public="1" static="1"><x path="Int"/></UNDERFLOW>
		<UNSUPPORTED_CONFIGURATION public="1" static="1"><x path="Int"/></UNSUPPORTED_CONFIGURATION>
		<UNSUPPORTED_HLS_VERSION public="1" static="1"><x path="Int"/></UNSUPPORTED_HLS_VERSION>
		<UNSUPPORTED_OPERATION public="1" static="1"><x path="Int"/></UNSUPPORTED_OPERATION>
		<VIDEO_PROFILE_NOT_SUPPORTED public="1" static="1"><x path="Int"/></VIDEO_PROFILE_NOT_SUPPORTED>
		<WAITING_FOR_INIT public="1" static="1"><x path="Int"/></WAITING_FOR_INIT>
		<result public="1" set="null"><x path="Int"/></result>
		<new public="1" set="method"><f a="inResult">
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.AVSource" params="" file="C:\Servers\Haxe\haxe\std/flash/media/AVSource.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.media.AVStream" params="" file="C:\Servers\Haxe\haxe\std/flash/media/AVStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<HARDWARE public="1" static="1"><c path="String"/></HARDWARE>
		<SOFTWARE public="1" static="1"><c path="String"/></SOFTWARE>
		<UNDEFINED public="1" static="1"><c path="String"/></UNDEFINED>
		<backBufferLength public="1" set="null"><x path="Float"/></backBufferLength>
		<backBufferTime public="1" get="null"><x path="Float"/></backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1" get="null"><x path="Float"/></bufferTime>
		<captionStyle public="1" get="null"><c path="flash.media.AVCaptionStyle"/></captionStyle>
		<captionsEnabled public="1"><x path="Bool"/></captionsEnabled>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<decoderType public="1" set="null"><c path="String"/></decoderType>
		<droppedFrames public="1" set="null"><x path="Int"/></droppedFrames>
		<frameTime public="1" set="null"><x path="Float"/></frameTime>
		<initialBufferTime public="1" get="null"><x path="Float"/></initialBufferTime>
		<playState public="1" set="null"><c path="flash.media.AVPlayState"/></playState>
		<renderType public="1" set="null"><c path="String"/></renderType>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1"><x path="Bool"/></useHardwareDecoder>
		<volume public="1"><x path="Float"/></volume>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<fastForward public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></fastForward>
		<pause public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></pause>
		<play public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></play>
		<resume public="1" set="method"><f a=""><x path="Bool"/></f></resume>
		<rewind public="1" set="method"><f a="rate">
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></rewind>
		<seek public="1" set="method"><f a="offset:?inBufferSeek">
	<x path="Float"/>
	<x path="Bool"/>
	<c path="flash.media.AVResult"/>
</f></seek>
		<seekToLivePoint public="1" set="method"><f a=""><c path="flash.media.AVResult"/></f></seekToLivePoint>
		<seekToLocalTime public="1" set="method"><f a="periodIndex:time">
	<x path="Int"/>
	<x path="Float"/>
	<c path="flash.media.AVResult"/>
</f></seekToLocalTime>
		<setPlaySpeed public="1" set="method"><f a="speed:reserved">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setPlaySpeed>
		<step public="1" set="method"><f a="frames">
	<x path="Int"/>
	<c path="flash.media.AVResult"/>
</f></step>
		<new public="1" set="method"><f a="source">
	<c path="flash.media.AVSource"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.Camera" params="" file="C:\Servers\Haxe\haxe\std/flash/media/Camera.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<_scanHardware public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</_scanHardware>
		<getCamera public="1" set="method" static="1"><f a="?name">
	<c path="String"/>
	<c path="flash.media.Camera"/>
</f></getCamera>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<index public="1" set="null"><x path="Int"/></index>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<loopback public="1" set="null"><x path="Bool"/></loopback>
		<motionLevel public="1" set="null"><x path="Int"/></motionLevel>
		<motionTimeout public="1" set="null"><x path="Int"/></motionTimeout>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<position public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</position>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setCursor public="1" set="method"><f a="value">
	<x path="Bool"/>
	<x path="Void"/>
</f></setCursor>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setLoopback public="1" set="method"><f a="?compress">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopback>
		<setMode public="1" set="method"><f a="width:height:fps:?favorArea">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setMode>
		<setMotionLevel public="1" set="method"><f a="motionLevel:?timeout">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setMotionLevel>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.ID3Info" params="" file="C:\Servers\Haxe\haxe\std/flash/media/ID3Info.hx" extern="1">
		<album public="1"><c path="String"/></album>
		<artist public="1"><c path="String"/></artist>
		<comment public="1"><c path="String"/></comment>
		<genre public="1"><c path="String"/></genre>
		<songName public="1"><c path="String"/></songName>
		<track public="1"><c path="String"/></track>
		<year public="1"><c path="String"/></year>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.media.Microphone" params="" file="C:\Servers\Haxe\haxe\std/flash/media/Microphone.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<names public="1" set="null" static="1"><c path="Array"><d/></c></names>
		<getEnhancedMicrophone public="1" set="method" static="1">
			<f a="?index">
				<x path="Int"/>
				<c path="flash.media.Microphone"/>
			</f>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</getEnhancedMicrophone>
		<getMicrophone public="1" set="method" static="1"><f a="?index">
	<x path="Int"/>
	<c path="flash.media.Microphone"/>
</f></getMicrophone>
		<activityLevel public="1" set="null"><x path="Float"/></activityLevel>
		<codec public="1">
			<e path="flash.media.SoundCodec"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</codec>
		<enableVAD public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</enableVAD>
		<encodeQuality public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</encodeQuality>
		<enhancedOptions public="1">
			<c path="flash.media.MicrophoneEnhancedOptions"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
		</enhancedOptions>
		<framesPerPacket public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</framesPerPacket>
		<gain public="1"><x path="Float"/></gain>
		<index public="1" set="null"><x path="Int"/></index>
		<muted public="1" set="null"><x path="Bool"/></muted>
		<name public="1" set="null"><c path="String"/></name>
		<noiseSuppressionLevel public="1">
			<x path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</noiseSuppressionLevel>
		<rate public="1"><x path="Int"/></rate>
		<silenceLevel public="1" set="null"><x path="Float"/></silenceLevel>
		<silenceTimeout public="1" set="null"><x path="Int"/></silenceTimeout>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<useEchoSuppression public="1" set="null"><x path="Bool"/></useEchoSuppression>
		<setLoopBack public="1" set="method"><f a="?state">
	<x path="Bool"/>
	<x path="Void"/>
</f></setLoopBack>
		<setSilenceLevel public="1" set="method"><f a="silenceLevel:?timeout">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSilenceLevel>
		<setUseEchoSuppression public="1" set="method"><f a="useEchoSuppression">
	<x path="Bool"/>
	<x path="Void"/>
</f></setUseEchoSuppression>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.MicrophoneEnhancedMode" params="" file="C:\Servers\Haxe\haxe\std/flash/media/MicrophoneEnhancedMode.hx">
		<FULL_DUPLEX/>
		<HALF_DUPLEX/>
		<HEADSET/>
		<OFF/>
		<SPEAKER_MUTE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</enum>
	<class path="flash.media.MicrophoneEnhancedOptions" params="" file="C:\Servers\Haxe\haxe\std/flash/media/MicrophoneEnhancedOptions.hx" extern="1">
		<autoGain public="1"><x path="Bool"/></autoGain>
		<echoPath public="1"><x path="Int"/></echoPath>
		<isVoiceDetected public="1"><x path="Int"/></isVoiceDetected>
		<mode public="1"><e path="flash.media.MicrophoneEnhancedMode"/></mode>
		<nonLinearProcessing public="1"><x path="Bool"/></nonLinearProcessing>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_2</e></m>
		</meta>
	</class>
	<class path="flash.media.Sound" params="" file="C:\Servers\Haxe\haxe\std/flash/media/Sound.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="Int"/></bytesTotal>
		<id3 public="1" set="null"><c path="flash.media.ID3Info"/></id3>
		<isBuffering public="1" set="null"><x path="Bool"/></isBuffering>
		<isURLInaccessible public="1" set="null">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isURLInaccessible>
		<length public="1" set="null"><x path="Float"/></length>
		<url public="1" set="null"><c path="String"/></url>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<extract public="1" set="method">
			<f a="target:length:?startPosition">
				<c path="flash.utils.ByteArray"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</extract>
		<load public="1" set="method"><f a="stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></load>
		<loadCompressedDataFromByteArray public="1" set="method">
			<f a="bytes:bytesLength">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadCompressedDataFromByteArray>
		<loadPCMFromByteArray public="1" set="method">
			<f a="bytes:samples:?format:?stereo:?sampleRate">
				<c path="flash.utils.ByteArray"/>
				<x path="UInt"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadPCMFromByteArray>
		<play public="1" set="method"><f a="?startTime:?loops:?sndTransform">
	<x path="Float"/>
	<x path="Int"/>
	<c path="flash.media.SoundTransform"/>
	<c path="flash.media.SoundChannel"/>
</f></play>
		<new public="1" set="method"><f a="?stream:?context">
	<c path="flash.net.URLRequest"/>
	<c path="flash.media.SoundLoaderContext"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundChannel" params="" file="C:\Servers\Haxe\haxe\std/flash/media/SoundChannel.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<leftPeak public="1" set="null"><x path="Float"/></leftPeak>
		<position public="1" set="null"><x path="Float"/></position>
		<rightPeak public="1" set="null"><x path="Float"/></rightPeak>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.media.SoundCodec" params="" file="C:\Servers\Haxe\haxe\std/flash/media/SoundCodec.hx">
		<NELLYMOSER/>
		<PCMA/>
		<PCMU/>
		<SPEEX/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.media.SoundLoaderContext" params="" file="C:\Servers\Haxe\haxe\std/flash/media/SoundLoaderContext.hx" extern="1">
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<new public="1" set="method"><f a="?bufferTime:?checkPolicyFile">
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.media.SoundTransform" params="" file="C:\Servers\Haxe\haxe\std/flash/media/SoundTransform.hx" extern="1">
		<leftToLeft public="1"><x path="Float"/></leftToLeft>
		<leftToRight public="1"><x path="Float"/></leftToRight>
		<pan public="1"><x path="Float"/></pan>
		<rightToLeft public="1"><x path="Float"/></rightToLeft>
		<rightToRight public="1"><x path="Float"/></rightToRight>
		<volume public="1"><x path="Float"/></volume>
		<new public="1" set="method"><f a="?vol:?panning">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.media.StageVideo" params="" file="C:\Servers\Haxe\haxe\std/flash/media/StageVideo.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<colorSpaces public="1" set="null"><c path="flash.Vector"><c path="String"/></c></colorSpaces>
		<depth public="1"><x path="Int"/></depth>
		<pan public="1"><c path="flash.geom.Point"/></pan>
		<videoHeight public="1" set="null"><x path="Int"/></videoHeight>
		<videoWidth public="1" set="null"><x path="Int"/></videoWidth>
		<viewPort public="1"><c path="flash.geom.Rectangle"/></viewPort>
		<zoom public="1"><c path="flash.geom.Point"/></zoom>
		<attachNetStream public="1" set="method"><f a="netStream">
	<c path="flash.net.NetStream"/>
	<x path="Void"/>
</f></attachNetStream>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":require"><e>flash10_2</e></m></meta>
	</class>
	<class path="flash.media.VideoStreamSettings" params="" file="C:\Servers\Haxe\haxe\std/flash/media/VideoStreamSettings.hx" extern="1">
		<bandwidth public="1" set="null"><x path="Int"/></bandwidth>
		<codec public="1" set="null"><c path="String"/></codec>
		<fps public="1" set="null"><x path="Float"/></fps>
		<height public="1" set="null"><x path="Int"/></height>
		<keyFrameInterval public="1" set="null"><x path="Int"/></keyFrameInterval>
		<quality public="1" set="null"><x path="Int"/></quality>
		<width public="1" set="null"><x path="Int"/></width>
		<setKeyFrameInterval public="1" set="method"><f a="keyFrameInterval">
	<x path="Int"/>
	<x path="Void"/>
</f></setKeyFrameInterval>
		<setMode public="1" set="method"><f a="width:height:fps">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setMode>
		<setQuality public="1" set="method"><f a="bandwidth:quality">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setQuality>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetConnection" params="" file="C:\Servers\Haxe\haxe\std/flash/net/NetConnection.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1"><x path="UInt"/></defaultObjectEncoding>
		<client public="1"><d/></client>
		<connected public="1" set="null"><x path="Bool"/></connected>
		<connectedProxyType public="1" set="null"><c path="String"/></connectedProxyType>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<maxPeerConnections public="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPeerConnections>
		<nearID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearID>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1"><x path="UInt"/></objectEncoding>
		<protocol public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</protocol>
		<proxyType public="1"><c path="String"/></proxyType>
		<unconnectedPeerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</unconnectedPeerStreams>
		<uri public="1" set="null"><c path="String"/></uri>
		<usingTLS public="1" set="null"><x path="Bool"/></usingTLS>
		<addHeader public="1" set="method"><f a="operation:?mustUnderstand:?param">
	<c path="String"/>
	<x path="Bool"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></addHeader>
		<call public="1" set="method"><f a="command:responder:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<c path="flash.net.Responder"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></call>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<connect public="1" set="method"><f a="command:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></connect>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.net.NetStream" params="" file="C:\Servers\Haxe\haxe\std/flash/net/NetStream.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<CONNECT_TO_FMS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</CONNECT_TO_FMS>
		<DIRECT_CONNECTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</DIRECT_CONNECTIONS>
		<resetDRMVouchers public="1" set="method" static="1"><f a=""><x path="Void"/></f></resetDRMVouchers>
		<audioCodec public="1" set="null"><x path="UInt"/></audioCodec>
		<audioReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioReliable>
		<audioSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</audioSampleAccess>
		<backBufferLength public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferLength>
		<backBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</backBufferTime>
		<bufferLength public="1" set="null"><x path="Float"/></bufferLength>
		<bufferTime public="1"><x path="Float"/></bufferTime>
		<bufferTimeMax public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</bufferTimeMax>
		<bytesLoaded public="1" set="null"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1" set="null"><x path="UInt"/></bytesTotal>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<client public="1"><d/></client>
		<currentFPS public="1" set="null"><x path="Float"/></currentFPS>
		<dataReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</dataReliable>
		<decodedFrames public="1" set="null"><x path="UInt"/></decodedFrames>
		<farID public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farID>
		<farNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</farNonce>
		<inBufferSeek public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</inBufferSeek>
		<info public="1" set="null">
			<c path="flash.net.NetStreamInfo"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</info>
		<liveDelay public="1" set="null"><x path="Float"/></liveDelay>
		<maxPauseBufferTime public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxPauseBufferTime>
		<multicastAvailabilitySendToAll public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilitySendToAll>
		<multicastAvailabilityUpdatePeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastAvailabilityUpdatePeriod>
		<multicastFetchPeriod public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastFetchPeriod>
		<multicastInfo public="1" set="null">
			<c path="flash.net.NetStreamMulticastInfo"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastInfo>
		<multicastPushNeighborLimit public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastPushNeighborLimit>
		<multicastRelayMarginDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastRelayMarginDuration>
		<multicastWindowDuration public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</multicastWindowDuration>
		<nearNonce public="1" set="null">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</nearNonce>
		<objectEncoding public="1" set="null"><x path="UInt"/></objectEncoding>
		<peerStreams public="1" set="null">
			<c path="Array"><d/></c>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</peerStreams>
		<soundTransform public="1"><c path="flash.media.SoundTransform"/></soundTransform>
		<time public="1" set="null"><x path="Float"/></time>
		<useHardwareDecoder public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</useHardwareDecoder>
		<videoCodec public="1" set="null"><x path="UInt"/></videoCodec>
		<videoReliable public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoReliable>
		<videoSampleAccess public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoSampleAccess>
		<videoStreamSettings public="1">
			<c path="flash.media.VideoStreamSettings"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</videoStreamSettings>
		<appendBytes public="1" set="method">
			<f a="bytes">
				<c path="flash.utils.ByteArray"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytes>
		<appendBytesAction public="1" set="method">
			<f a="netStreamAppendBytesAction">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</appendBytesAction>
		<attach public="1" set="method">
			<f a="connection">
				<c path="flash.net.NetConnection"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</attach>
		<attachAudio public="1" set="method"><f a="microphone">
	<c path="flash.media.Microphone"/>
	<x path="Void"/>
</f></attachAudio>
		<attachCamera public="1" set="method"><f a="theCamera:?snapshotMilliseconds">
	<c path="flash.media.Camera"/>
	<x path="Int"/>
	<x path="Void"/>
</f></attachCamera>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<meta><m n=":require"><e>flash11_2</e></m></meta>
		</dispose>
		<onPeerConnect public="1" set="method">
			<f a="subscriber">
				<c path="flash.net.NetStream"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</onPeerConnect>
		<pause public="1" set="method"><f a=""><x path="Void"/></f></pause>
		<play public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></play>
		<play2 public="1" set="method">
			<f a="param">
				<c path="flash.net.NetStreamPlayOptions"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</play2>
		<publish public="1" set="method"><f a="?name:?type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></publish>
		<receiveAudio public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveAudio>
		<receiveVideo public="1" set="method"><f a="flag">
	<x path="Bool"/>
	<x path="Void"/>
</f></receiveVideo>
		<receiveVideoFPS public="1" set="method"><f a="FPS">
	<x path="Float"/>
	<x path="Void"/>
</f></receiveVideoFPS>
		<resume public="1" set="method"><f a=""><x path="Void"/></f></resume>
		<seek public="1" set="method"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></seek>
		<send public="1" set="method"><f a="handlerName:?p1:?p2:?p3:?p4:?p5">
	<c path="String"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<x path="Void"/>
</f></send>
		<step public="1" set="method">
			<f a="frames">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</step>
		<togglePause public="1" set="method"><f a=""><x path="Void"/></f></togglePause>
		<new public="1" set="method"><f a="connection:?peerID">
	<c path="flash.net.NetConnection"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.net.NetStreamInfo" params="" file="C:\Servers\Haxe\haxe\std/flash/net/NetStreamInfo.hx" extern="1">
		<SRTT public="1" set="null"><x path="Float"/></SRTT>
		<audioBufferByteLength public="1" set="null"><x path="Float"/></audioBufferByteLength>
		<audioBufferLength public="1" set="null"><x path="Float"/></audioBufferLength>
		<audioByteCount public="1" set="null"><x path="Float"/></audioByteCount>
		<audioBytesPerSecond public="1" set="null"><x path="Float"/></audioBytesPerSecond>
		<audioLossRate public="1" set="null"><x path="Float"/></audioLossRate>
		<byteCount public="1" set="null"><x path="Float"/></byteCount>
		<currentBytesPerSecond public="1" set="null"><x path="Float"/></currentBytesPerSecond>
		<dataBufferByteLength public="1" set="null"><x path="Float"/></dataBufferByteLength>
		<dataBufferLength public="1" set="null"><x path="Float"/></dataBufferLength>
		<dataByteCount public="1" set="null"><x path="Float"/></dataByteCount>
		<dataBytesPerSecond public="1" set="null"><x path="Float"/></dataBytesPerSecond>
		<droppedFrames public="1" set="null"><x path="Float"/></droppedFrames>
		<isLive public="1" set="null"><x path="Bool"/></isLive>
		<maxBytesPerSecond public="1" set="null"><x path="Float"/></maxBytesPerSecond>
		<metaData public="1" set="null"><d/></metaData>
		<playbackBytesPerSecond public="1" set="null"><x path="Float"/></playbackBytesPerSecond>
		<resourceName public="1" set="null"><c path="String"/></resourceName>
		<uri public="1" set="null"><c path="String"/></uri>
		<videoBufferByteLength public="1" set="null"><x path="Float"/></videoBufferByteLength>
		<videoBufferLength public="1" set="null"><x path="Float"/></videoBufferLength>
		<videoByteCount public="1" set="null"><x path="Float"/></videoByteCount>
		<videoBytesPerSecond public="1" set="null"><x path="Float"/></videoBytesPerSecond>
		<videoLossRate public="1" set="null">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</videoLossRate>
		<xmpData public="1" set="null"><d/></xmpData>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="curBPS:byteCount:maxBPS:audioBPS:audioByteCount:videoBPS:videoByteCount:dataBPS:dataByteCount:playbackBPS:droppedFrames:audioBufferByteLength:videoBufferByteLength:dataBufferByteLength:audioBufferLength:videoBufferLength:dataBufferLength:srtt:audioLossRate:videoLossRate:?metaData:?xmpData:?uri:?resourceName:?isLive">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<d/>
	<d/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.NetStreamMulticastInfo" params="" file="C:\Servers\Haxe\haxe\std/flash/net/NetStreamMulticastInfo.hx" extern="1">
		<bytesPushedFromPeers public="1" set="null"><x path="Float"/></bytesPushedFromPeers>
		<bytesPushedToPeers public="1" set="null"><x path="Float"/></bytesPushedToPeers>
		<bytesReceivedFromIPMulticast public="1" set="null"><x path="Float"/></bytesReceivedFromIPMulticast>
		<bytesReceivedFromServer public="1" set="null"><x path="Float"/></bytesReceivedFromServer>
		<bytesRequestedByPeers public="1" set="null"><x path="Float"/></bytesRequestedByPeers>
		<bytesRequestedFromPeers public="1" set="null"><x path="Float"/></bytesRequestedFromPeers>
		<fragmentsPushedFromPeers public="1" set="null"><x path="Float"/></fragmentsPushedFromPeers>
		<fragmentsPushedToPeers public="1" set="null"><x path="Float"/></fragmentsPushedToPeers>
		<fragmentsReceivedFromIPMulticast public="1" set="null"><x path="Float"/></fragmentsReceivedFromIPMulticast>
		<fragmentsReceivedFromServer public="1" set="null"><x path="Float"/></fragmentsReceivedFromServer>
		<fragmentsRequestedByPeers public="1" set="null"><x path="Float"/></fragmentsRequestedByPeers>
		<fragmentsRequestedFromPeers public="1" set="null"><x path="Float"/></fragmentsRequestedFromPeers>
		<receiveControlBytesPerSecond public="1" set="null"><x path="Float"/></receiveControlBytesPerSecond>
		<receiveDataBytesPerSecond public="1" set="null"><x path="Float"/></receiveDataBytesPerSecond>
		<receiveDataBytesPerSecondFromIPMulticast public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromIPMulticast>
		<receiveDataBytesPerSecondFromServer public="1" set="null"><x path="Float"/></receiveDataBytesPerSecondFromServer>
		<sendControlBytesPerSecond public="1" set="null"><x path="Float"/></sendControlBytesPerSecond>
		<sendControlBytesPerSecondToServer public="1" set="null"><x path="Float"/></sendControlBytesPerSecondToServer>
		<sendDataBytesPerSecond public="1" set="null"><x path="Float"/></sendDataBytesPerSecond>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="sendDataBytesPerSecond:sendControlBytesPerSecond:receiveDataBytesPerSecond:receiveControlBytesPerSecond:bytesPushedToPeers:fragmentsPushedToPeers:bytesRequestedByPeers:fragmentsRequestedByPeers:bytesPushedFromPeers:fragmentsPushedFromPeers:bytesRequestedFromPeers:fragmentsRequestedFromPeers:sendControlBytesPerSecondToServer:receiveDataBytesPerSecondFromServer:bytesReceivedFromServer:fragmentsReceivedFromServer:receiveDataBytesPerSecondFromIPMulticast:bytesReceivedFromIPMulticast:fragmentsReceivedFromIPMulticast">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":final"/>
			<m n=":require"><e>flash10_1</e></m>
		</meta>
	</class>
	<class path="flash.net.NetStreamPlayOptions" params="" file="C:\Servers\Haxe\haxe\std/flash/net/NetStreamPlayOptions.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<len public="1"><x path="Float"/></len>
		<offset public="1">
			<x path="Float"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</offset>
		<oldStreamName public="1"><c path="String"/></oldStreamName>
		<start public="1"><x path="Float"/></start>
		<streamName public="1"><c path="String"/></streamName>
		<transition public="1"><c path="String"/></transition>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.net.Responder" params="" file="C:\Servers\Haxe\haxe\std/flash/net/Responder.hx" extern="1"><new public="1" set="method"><f a="result:?status">
	<d/>
	<d/>
	<x path="Void"/>
</f></new></class>
	<class path="flash.net.URLLoader" params="" file="C:\Servers\Haxe\haxe\std/flash/net/URLLoader.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<bytesLoaded public="1"><x path="UInt"/></bytesLoaded>
		<bytesTotal public="1"><x path="UInt"/></bytesTotal>
		<data public="1"><d/></data>
		<dataFormat public="1"><e path="flash.net.URLLoaderDataFormat"/></dataFormat>
		<close public="1" set="method"><f a=""><x path="Void"/></f></close>
		<load public="1" set="method"><f a="request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></load>
		<new public="1" set="method"><f a="?request">
	<c path="flash.net.URLRequest"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.net.URLLoaderDataFormat" params="" file="C:\Servers\Haxe\haxe\std/flash/net/URLLoaderDataFormat.hx">
		<BINARY/>
		<TEXT/>
		<VARIABLES/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.net.URLRequest" params="" file="C:\Servers\Haxe\haxe\std/flash/net/URLRequest.hx" extern="1">
		<contentType public="1"><c path="String"/></contentType>
		<data public="1"><d/></data>
		<digest public="1"><c path="String"/></digest>
		<method public="1"><c path="String"/></method>
		<requestHeaders public="1"><c path="Array"><c path="flash.net.URLRequestHeader"/></c></requestHeaders>
		<url public="1"><c path="String"/></url>
		<useRedirectedURL public="1" set="method"><f a="sourceRequest:?wholeURL:?pattern:?replace">
	<c path="flash.net.URLRequest"/>
	<x path="Bool"/>
	<d/>
	<c path="String"/>
	<x path="Void"/>
</f></useRedirectedURL>
		<new public="1" set="method"><f a="?url">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.net.URLRequestHeader" params="" file="C:\Servers\Haxe\haxe\std/flash/net/URLRequestHeader.hx" extern="1">
		<name public="1"><c path="String"/></name>
		<value public="1"><c path="String"/></value>
		<new public="1" set="method"><f a="?name:?value">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.ApplicationDomain" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/system/ApplicationDomain.hx" extern="1">
		<MIN_DOMAIN_MEMORY_LENGTH public="1" set="null" static="1">
			<x path="UInt"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</MIN_DOMAIN_MEMORY_LENGTH>
		<currentDomain public="1" set="null" static="1"><c path="flash.system.ApplicationDomain"/></currentDomain>
		<domainMemory public="1">
			<c path="flash.utils.ByteArray"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</domainMemory>
		<parentDomain public="1" set="null"><c path="flash.system.ApplicationDomain"/></parentDomain>
		<getDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getDefinition>
		<hasDefinition public="1" set="method"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDefinition>
		<new public="1" set="method"><f a="?parentDomain">
	<c path="flash.system.ApplicationDomain"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.system.Capabilities" params="" file="C:\Servers\Haxe\haxe\std/flash/system/Capabilities.hx" extern="1">
		<_internal public="1" set="null" static="1"><x path="UInt"/></_internal>
		<avHardwareDisable public="1" set="null" static="1"><x path="Bool"/></avHardwareDisable>
		<cpuArchitecture public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</cpuArchitecture>
		<hasAccessibility public="1" set="null" static="1"><x path="Bool"/></hasAccessibility>
		<hasAudio public="1" set="null" static="1"><x path="Bool"/></hasAudio>
		<hasAudioEncoder public="1" set="null" static="1"><x path="Bool"/></hasAudioEncoder>
		<hasEmbeddedVideo public="1" set="null" static="1"><x path="Bool"/></hasEmbeddedVideo>
		<hasIME public="1" set="null" static="1"><x path="Bool"/></hasIME>
		<hasMP3 public="1" set="null" static="1"><x path="Bool"/></hasMP3>
		<hasPrinting public="1" set="null" static="1"><x path="Bool"/></hasPrinting>
		<hasScreenBroadcast public="1" set="null" static="1"><x path="Bool"/></hasScreenBroadcast>
		<hasScreenPlayback public="1" set="null" static="1"><x path="Bool"/></hasScreenPlayback>
		<hasStreamingAudio public="1" set="null" static="1"><x path="Bool"/></hasStreamingAudio>
		<hasStreamingVideo public="1" set="null" static="1"><x path="Bool"/></hasStreamingVideo>
		<hasTLS public="1" set="null" static="1"><x path="Bool"/></hasTLS>
		<hasVideoEncoder public="1" set="null" static="1"><x path="Bool"/></hasVideoEncoder>
		<isDebugger public="1" set="null" static="1"><x path="Bool"/></isDebugger>
		<isEmbeddedInAcrobat public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isEmbeddedInAcrobat>
		<language public="1" set="null" static="1"><c path="String"/></language>
		<localFileReadDisable public="1" set="null" static="1"><x path="Bool"/></localFileReadDisable>
		<manufacturer public="1" set="null" static="1"><c path="String"/></manufacturer>
		<maxLevelIDC public="1" set="null" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</maxLevelIDC>
		<os public="1" set="null" static="1"><c path="String"/></os>
		<pixelAspectRatio public="1" set="null" static="1"><x path="Float"/></pixelAspectRatio>
		<playerType public="1" set="null" static="1"><c path="String"/></playerType>
		<screenColor public="1" set="null" static="1"><c path="String"/></screenColor>
		<screenDPI public="1" set="null" static="1"><x path="Float"/></screenDPI>
		<screenResolutionX public="1" set="null" static="1"><x path="Float"/></screenResolutionX>
		<screenResolutionY public="1" set="null" static="1"><x path="Float"/></screenResolutionY>
		<serverString public="1" set="null" static="1"><c path="String"/></serverString>
		<supports32BitProcesses public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports32BitProcesses>
		<supports64BitProcesses public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</supports64BitProcesses>
		<touchscreenType public="1" set="null" static="1">
			<e path="flash.system.TouchscreenType"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</touchscreenType>
		<version public="1" set="null" static="1"><c path="String"/></version>
		<hasMultiChannelAudio public="1" set="method" static="1">
			<f a="type">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</hasMultiChannelAudio>
	</class>
	<enum path="flash.system.ImageDecodingPolicy" params="" file="C:\Servers\Haxe\haxe\std/flash/system/ImageDecodingPolicy.hx">
		<ON_DEMAND/>
		<ON_LOAD/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.system.LoaderContext" params="" file="C:\Servers\Haxe\haxe\std/flash/system/LoaderContext.hx" extern="1">
		<allowCodeImport public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowCodeImport>
		<allowLoadBytesCodeExecution public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</allowLoadBytesCodeExecution>
		<applicationDomain public="1"><c path="flash.system.ApplicationDomain"/></applicationDomain>
		<checkPolicyFile public="1"><x path="Bool"/></checkPolicyFile>
		<imageDecodingPolicy public="1">
			<e path="flash.system.ImageDecodingPolicy"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</imageDecodingPolicy>
		<parameters public="1">
			<d/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</parameters>
		<requestedContentParent public="1">
			<c path="flash.display.DisplayObjectContainer"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</requestedContentParent>
		<securityDomain public="1"><c path="flash.system.SecurityDomain"/></securityDomain>
		<new public="1" set="method"><f a="?checkPolicyFile:?applicationDomain:?securityDomain">
	<x path="Bool"/>
	<c path="flash.system.ApplicationDomain"/>
	<c path="flash.system.SecurityDomain"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.system.SecurityDomain" params="" file="C:\Servers\Haxe\haxe\std/flash/system/SecurityDomain.hx" extern="1"><currentDomain public="1" set="null" static="1"><c path="flash.system.SecurityDomain"/></currentDomain></class>
	<enum path="flash.system.TouchscreenType" params="" file="C:\Servers\Haxe\haxe\std/flash/system/TouchscreenType.hx">
		<FINGER/>
		<NONE/>
		<STYLUS/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.AntiAliasType" params="" file="C:\Servers\Haxe\haxe\std/flash/text/AntiAliasType.hx">
		<ADVANCED/>
		<NORMAL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.FontStyle" params="" file="C:\Servers\Haxe\haxe\std/flash/text/FontStyle.hx">
		<BOLD/>
		<BOLD_ITALIC/>
		<ITALIC/>
		<REGULAR/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.FontType" params="" file="C:\Servers\Haxe\haxe\std/flash/text/FontType.hx">
		<DEVICE/>
		<EMBEDDED/>
		<EMBEDDED_CFF/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.GridFitType" params="" file="C:\Servers\Haxe\haxe\std/flash/text/GridFitType.hx">
		<NONE/>
		<PIXEL/>
		<SUBPIXEL/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.StyleSheet" params="" file="C:\Servers\Haxe\haxe\std/flash/text/StyleSheet.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<styleNames public="1" set="null"><c path="Array"><d/></c></styleNames>
		<clear public="1" set="method"><f a=""><x path="Void"/></f></clear>
		<getStyle public="1" set="method"><f a="styleName">
	<c path="String"/>
	<t path="flash.utils.Object"/>
</f></getStyle>
		<parseCSS public="1" set="method"><f a="CSSText">
	<c path="String"/>
	<x path="Void"/>
</f></parseCSS>
		<setStyle public="1" set="method"><f a="styleName:styleObject">
	<c path="String"/>
	<t path="flash.utils.Object"/>
	<x path="Void"/>
</f></setStyle>
		<transform public="1" set="method"><f a="formatObject">
	<t path="flash.utils.Object"/>
	<c path="flash.text.TextFormat"/>
</f></transform>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.text.TextField" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextField.hx" extern="1">
		<extends path="flash.display.InteractiveObject"/>
		<isFontCompatible public="1" set="method" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</isFontCompatible>
		<alwaysShowSelection public="1"><x path="Bool"/></alwaysShowSelection>
		<antiAliasType public="1"><e path="flash.text.AntiAliasType"/></antiAliasType>
		<autoSize public="1"><e path="flash.text.TextFieldAutoSize"/></autoSize>
		<background public="1"><x path="Bool"/></background>
		<backgroundColor public="1"><x path="UInt"/></backgroundColor>
		<border public="1"><x path="Bool"/></border>
		<borderColor public="1"><x path="UInt"/></borderColor>
		<bottomScrollV public="1" set="null"><x path="Int"/></bottomScrollV>
		<caretIndex public="1" set="null"><x path="Int"/></caretIndex>
		<condenseWhite public="1"><x path="Bool"/></condenseWhite>
		<defaultTextFormat public="1"><c path="flash.text.TextFormat"/></defaultTextFormat>
		<displayAsPassword public="1"><x path="Bool"/></displayAsPassword>
		<embedFonts public="1"><x path="Bool"/></embedFonts>
		<gridFitType public="1"><e path="flash.text.GridFitType"/></gridFitType>
		<htmlText public="1"><c path="String"/></htmlText>
		<length public="1" set="null"><x path="Int"/></length>
		<maxChars public="1"><x path="Int"/></maxChars>
		<maxScrollH public="1" set="null"><x path="Int"/></maxScrollH>
		<maxScrollV public="1" set="null"><x path="Int"/></maxScrollV>
		<mouseWheelEnabled public="1"><x path="Bool"/></mouseWheelEnabled>
		<multiline public="1"><x path="Bool"/></multiline>
		<numLines public="1" set="null"><x path="Int"/></numLines>
		<restrict public="1"><c path="String"/></restrict>
		<scrollH public="1"><x path="Int"/></scrollH>
		<scrollV public="1"><x path="Int"/></scrollV>
		<selectable public="1"><x path="Bool"/></selectable>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectionBeginIndex public="1" set="null"><x path="Int"/></selectionBeginIndex>
		<selectionEndIndex public="1" set="null"><x path="Int"/></selectionEndIndex>
		<sharpness public="1"><x path="Float"/></sharpness>
		<styleSheet public="1"><c path="flash.text.StyleSheet"/></styleSheet>
		<text public="1"><c path="String"/></text>
		<textColor public="1"><x path="UInt"/></textColor>
		<textHeight public="1" set="null"><x path="Float"/></textHeight>
		<textInteractionMode public="1" set="null">
			<e path="flash.text.TextInteractionMode"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</textInteractionMode>
		<textWidth public="1" set="null"><x path="Float"/></textWidth>
		<thickness public="1"><x path="Float"/></thickness>
		<type public="1"><e path="flash.text.TextFieldType"/></type>
		<useRichTextClipboard public="1"><x path="Bool"/></useRichTextClipboard>
		<wordWrap public="1"><x path="Bool"/></wordWrap>
		<appendText public="1" set="method"><f a="newText">
	<c path="String"/>
	<x path="Void"/>
</f></appendText>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<getCharBoundaries public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<c path="flash.geom.Rectangle"/>
</f></getCharBoundaries>
		<getCharIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getCharIndexAtPoint>
		<getFirstCharInParagraph public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getFirstCharInParagraph>
		<getImageReference public="1" set="method"><f a="id">
	<c path="String"/>
	<c path="flash.display.DisplayObject"/>
</f></getImageReference>
		<getLineIndexAtPoint public="1" set="method"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
</f></getLineIndexAtPoint>
		<getLineIndexOfChar public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineIndexOfChar>
		<getLineLength public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineLength>
		<getLineMetrics public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="flash.text.TextLineMetrics"/>
</f></getLineMetrics>
		<getLineOffset public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getLineOffset>
		<getLineText public="1" set="method"><f a="lineIndex">
	<x path="Int"/>
	<c path="String"/>
</f></getLineText>
		<getParagraphLength public="1" set="method"><f a="charIndex">
	<x path="Int"/>
	<x path="Int"/>
</f></getParagraphLength>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getTextFormat public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="flash.text.TextFormat"/>
</f></getTextFormat>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></insertXMLText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<x path="Bool"/>
</f></pasteRichText>
		<replaceSelectedText public="1" set="method"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></replaceSelectedText>
		<replaceText public="1" set="method"><f a="beginIndex:endIndex:newText">
	<x path="Int"/>
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></replaceText>
		<setSelection public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setSelection>
		<setTextFormat public="1" set="method"><f a="format:?beginIndex:?endIndex">
	<c path="flash.text.TextFormat"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setTextFormat>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="flash.text.TextFieldAutoSize" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextFieldAutoSize.hx">
		<CENTER/>
		<LEFT/>
		<NONE/>
		<RIGHT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFieldType" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextFieldType.hx">
		<DYNAMIC/>
		<INPUT/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextFormat" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextFormat.hx" extern="1">
		<align public="1"><e path="flash.text.TextFormatAlign"/></align>
		<blockIndent public="1"><t path="Null"><x path="Float"/></t></blockIndent>
		<bold public="1"><t path="Null"><x path="Bool"/></t></bold>
		<bullet public="1"><t path="Null"><x path="Bool"/></t></bullet>
		<color public="1"><t path="Null"><x path="UInt"/></t></color>
		<display public="1"><e path="flash.text.TextFormatDisplay"/></display>
		<font public="1"><c path="String"/></font>
		<indent public="1"><t path="Null"><x path="Float"/></t></indent>
		<italic public="1"><t path="Null"><x path="Bool"/></t></italic>
		<kerning public="1"><t path="Null"><x path="Bool"/></t></kerning>
		<leading public="1"><t path="Null"><x path="Float"/></t></leading>
		<leftMargin public="1"><t path="Null"><x path="Float"/></t></leftMargin>
		<letterSpacing public="1"><t path="Null"><x path="Float"/></t></letterSpacing>
		<rightMargin public="1"><t path="Null"><x path="Float"/></t></rightMargin>
		<size public="1"><t path="Null"><x path="Float"/></t></size>
		<tabStops public="1"><c path="Array"><x path="UInt"/></c></tabStops>
		<target public="1"><c path="String"/></target>
		<underline public="1"><t path="Null"><x path="Bool"/></t></underline>
		<url public="1"><c path="String"/></url>
		<new public="1" set="method"><f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
	<c path="String"/>
	<x path="Float"/>
	<x path="UInt"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<e path="flash.text.TextFormatAlign"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="flash.text.TextFormatAlign" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextFormatAlign.hx">
		<CENTER/>
		<END/>
		<JUSTIFY/>
		<LEFT/>
		<RIGHT/>
		<START/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextFormatDisplay" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextFormatDisplay.hx">
		<BLOCK/>
		<INLINE/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<enum path="flash.text.TextInteractionMode" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextInteractionMode.hx">
		<NORMAL/>
		<SELECTION/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<class path="flash.text.TextLineMetrics" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextLineMetrics.hx" extern="1">
		<ascent public="1"><x path="Float"/></ascent>
		<descent public="1"><x path="Float"/></descent>
		<height public="1"><x path="Float"/></height>
		<leading public="1"><x path="Float"/></leading>
		<width public="1"><x path="Float"/></width>
		<x public="1"><x path="Float"/></x>
		<new public="1" set="method"><f a="x:width:height:ascent:descent:leading">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.text.TextSnapshot" params="" file="C:\Servers\Haxe\haxe\std/flash/text/TextSnapshot.hx" extern="1">
		<charCount public="1" set="null"><x path="Int"/></charCount>
		<findText public="1" set="method"><f a="beginIndex:textToFind:caseSensitive">
	<x path="Int"/>
	<c path="String"/>
	<x path="Bool"/>
	<x path="Int"/>
</f></findText>
		<getSelected public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
</f></getSelected>
		<getSelectedText public="1" set="method"><f a="?includeLineEndings">
	<x path="Bool"/>
	<c path="String"/>
</f></getSelectedText>
		<getText public="1" set="method"><f a="beginIndex:endIndex:?includeLineEndings">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<c path="String"/>
</f></getText>
		<getTextRunInfo public="1" set="method"><f a="beginIndex:endIndex">
	<x path="Int"/>
	<x path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRunInfo>
		<hitTestTextNearPos public="1" set="method"><f a="x:y:?maxDistance">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></hitTestTextNearPos>
		<setSelectColor public="1" set="method"><f a="?hexColor">
	<x path="UInt"/>
	<x path="Void"/>
</f></setSelectColor>
		<setSelected public="1" set="method"><f a="beginIndex:endIndex:select">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></setSelected>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="flash.ui.ContextMenu" params="" file="C:\Servers\Haxe\haxe\std/flash/ui/ContextMenu.hx" extern="1">
		<extends path="flash.display.NativeMenu"/>
		<isSupported public="1" set="null" static="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
		</isSupported>
		<builtInItems public="1"><c path="flash.ui.ContextMenuBuiltInItems"/></builtInItems>
		<clipboardItems public="1">
			<c path="flash.ui.ContextMenuClipboardItems"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardItems>
		<clipboardMenu public="1">
			<x path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</clipboardMenu>
		<customItems public="1"><c path="Array"><d/></c></customItems>
		<link public="1">
			<c path="flash.net.URLRequest"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
		</link>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenu"/></f></clone>
		<hideBuiltInItems public="1" set="method"><f a=""><x path="Void"/></f></hideBuiltInItems>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuBuiltInItems" params="" file="C:\Servers\Haxe\haxe\std/flash/ui/ContextMenuBuiltInItems.hx" extern="1">
		<forwardAndBack public="1"><x path="Bool"/></forwardAndBack>
		<loop public="1"><x path="Bool"/></loop>
		<play public="1"><x path="Bool"/></play>
		<print public="1"><x path="Bool"/></print>
		<quality public="1"><x path="Bool"/></quality>
		<rewind public="1"><x path="Bool"/></rewind>
		<save public="1"><x path="Bool"/></save>
		<zoom public="1"><x path="Bool"/></zoom>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuBuiltInItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.ui.ContextMenuClipboardItems" params="" file="C:\Servers\Haxe\haxe\std/flash/ui/ContextMenuClipboardItems.hx" extern="1">
		<clear public="1"><x path="Bool"/></clear>
		<copy public="1"><x path="Bool"/></copy>
		<cut public="1"><x path="Bool"/></cut>
		<paste public="1"><x path="Bool"/></paste>
		<selectAll public="1"><x path="Bool"/></selectAll>
		<clone public="1" set="method"><f a=""><c path="flash.ui.ContextMenuClipboardItems"/></f></clone>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="flash.utils.CompressionAlgorithm" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/flash/utils/CompressionAlgorithm.hx">
		<DEFLATE/>
		<LZMA/>
		<ZLIB/>
		<GZIP/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
			<m n=":require"><e>flash11</e></m>
		</meta>
	</enum>
	<class path="flash.utils.Dictionary" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Dictionary.hx" extern="1">
		<new public="1" set="method"><f a="?weakKeys">
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="flash.utils.Endian" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Endian.hx">
		<BIG_ENDIAN/>
		<LITTLE_ENDIAN/>
		<meta>
			<m n=":flatEnum"/>
			<m n=":fakeEnum"><e>String</e></m>
		</meta>
	</enum>
	<typedef path="flash.utils.Function" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Function.hx"><d/></typedef>
	<class path="flash.utils.Namespace" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Namespace.hx" extern="1">
		<prefix public="1" set="null"><d/></prefix>
		<uri public="1" set="null"><c path="String"/></uri>
		<new public="1" set="method"><f a="?prefix:?uri">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<typedef path="flash.utils.Object" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Object.hx"><d/></typedef>
	<class path="flash.utils.QName" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/QName.hx" extern="1">
		<localName public="1" set="null"><c path="String"/></localName>
		<uri public="1" set="null"><d/></uri>
		<new public="1" set="method"><f a="?namespace:?name">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="flash.utils.RegExp" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/RegExp.hx" extern="1">
		<dotall public="1" set="null"><x path="Bool"/></dotall>
		<extended public="1" set="null"><x path="Bool"/></extended>
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<exec public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</exec>
		<test public="1" set="method">
			<f a="?s">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":ns"><e>"http://adobe.com/AS3/2006/builtin"</e></m></meta>
		</test>
		<new public="1" set="method"><f a="?pattern:?options">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="flash.utils.Timer" params="" file="C:\Servers\Haxe\haxe\std/flash/utils/Timer.hx" extern="1">
		<extends path="flash.events.EventDispatcher"/>
		<currentCount public="1" set="null"><x path="Int"/></currentCount>
		<delay public="1"><x path="Float"/></delay>
		<repeatCount public="1"><x path="Int"/></repeatCount>
		<running public="1" set="null"><x path="Bool"/></running>
		<reset public="1" set="method"><f a=""><x path="Void"/></f></reset>
		<start public="1" set="method"><f a=""><x path="Void"/></f></start>
		<stop public="1" set="method"><f a=""><x path="Void"/></f></stop>
		<new public="1" set="method"><f a="delay:?repeatCount">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="flash.xml.XML" params="" file="C:\Servers\Haxe\haxe\std/flash/xml/XML.hx" extern="1">
		<ignoreComments public="1" static="1"><x path="Bool"/></ignoreComments>
		<ignoreProcessingInstructions public="1" static="1"><x path="Bool"/></ignoreProcessingInstructions>
		<ignoreWhitespace public="1" static="1"><x path="Bool"/></ignoreWhitespace>
		<prettyIndent public="1" static="1"><x path="Int"/></prettyIndent>
		<prettyPrinting public="1" static="1"><x path="Bool"/></prettyPrinting>
		<defaultSettings public="1" set="method" static="1"><f a=""><d/></f></defaultSettings>
		<setSettings public="1" set="method" static="1"><f a="?o">
	<d/>
	<x path="Void"/>
</f></setSettings>
		<settings public="1" set="method" static="1"><f a=""><d/></f></settings>
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></normalize>
		<notification public="1" set="method"><f a=""><t path="flash.utils.Function"/></f></notification>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<setNotification public="1" set="method"><f a="f">
	<t path="flash.utils.Function"/>
	<d/>
</f></setNotification>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><c path="flash.xml.XMLList"/></haxe_dynamic>
	</class>
	<class path="flash.xml.XMLList" params="" file="C:\Servers\Haxe\haxe\std/flash/xml/XMLList.hx" extern="1">
		<addNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></addNamespace>
		<appendChild public="1" set="method"><f a="child">
	<d/>
	<c path="flash.xml.XML"/>
</f></appendChild>
		<attribute public="1" set="method"><f a="arg">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></attribute>
		<attributes public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></attributes>
		<child public="1" set="method"><f a="propertyName">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></child>
		<childIndex public="1" set="method"><f a=""><x path="Int"/></f></childIndex>
		<children public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></children>
		<comments public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></comments>
		<contains public="1" set="method"><f a="value">
	<d/>
	<x path="Bool"/>
</f></contains>
		<copy public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></copy>
		<descendants public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></descendants>
		<elements public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></elements>
		<hasComplexContent public="1" set="method"><f a=""><x path="Bool"/></f></hasComplexContent>
		<hasSimpleContent public="1" set="method"><f a=""><x path="Bool"/></f></hasSimpleContent>
		<inScopeNamespaces public="1" set="method"><f a=""><c path="Array"><d/></c></f></inScopeNamespaces>
		<insertChildAfter public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildAfter>
		<insertChildBefore public="1" set="method"><f a="child1:child2">
	<d/>
	<d/>
	<d/>
</f></insertChildBefore>
		<length public="1" set="method"><f a=""><x path="Int"/></f></length>
		<localName public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></localName>
		<name public="1" set="method"><f a=""><t path="flash.utils.Object"/></f></name>
		<namespace public="1" set="method"><f a="?prefix">
	<d/>
	<c path="flash.utils.Namespace"/>
</f></namespace>
		<namespaceDeclarations public="1" set="method"><f a=""><c path="Array"><d/></c></f></namespaceDeclarations>
		<nodeKind public="1" set="method"><f a=""><c path="String"/></f></nodeKind>
		<normalize public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></normalize>
		<parent public="1" set="method"><f a=""><c path="flash.xml.XML"/></f></parent>
		<prependChild public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></prependChild>
		<processingInstructions public="1" set="method"><f a="?name">
	<d/>
	<c path="flash.xml.XMLList"/>
</f></processingInstructions>
		<removeNamespace public="1" set="method"><f a="ns">
	<d/>
	<c path="flash.xml.XML"/>
</f></removeNamespace>
		<replace public="1" set="method"><f a="propertyName:value">
	<d/>
	<d/>
	<c path="flash.xml.XML"/>
</f></replace>
		<setChildren public="1" set="method"><f a="value">
	<d/>
	<c path="flash.xml.XML"/>
</f></setChildren>
		<setLocalName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setLocalName>
		<setName public="1" set="method"><f a="name">
	<d/>
	<x path="Void"/>
</f></setName>
		<setNamespace public="1" set="method"><f a="ns">
	<d/>
	<x path="Void"/>
</f></setNamespace>
		<text public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></text>
		<toJSON public="1" set="method">
			<f a="k">
				<c path="String"/>
				<d/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</toJSON>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<toXMLString public="1" set="method"><f a=""><c path="String"/></f></toXMLString>
		<valueOf public="1" set="method"><f a=""><c path="flash.xml.XMLList"/></f></valueOf>
		<new public="1" set="method"><f a="?value">
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":final"/></meta>
	</class>
	<class path="format.SVG" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/SVG.hx">
		<data public="1"><c path="format.svg.SVGData"/></data>
		<render public="1" set="method" line="24"><f a="graphics:?x:?y:?width:?height" v=":0:0:-1:-1">
	<c path="flash.display.Graphics"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></render>
		<new public="1" set="method" line="17"><f a="content">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.gfx.Gfx" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/Gfx.hx">
		<geometryOnly public="1" set="method" line="16"><f a=""><x path="Bool"/></f></geometryOnly>
		<size public="1" set="method" line="17"><f a="inWidth:inHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></size>
		<beginGradientFill public="1" set="method" line="18"><f a="grad">
	<c path="format.gfx.Gradient"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method" line="20"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<endFill public="1" set="method" line="21"><f a=""><x path="Void"/></f></endFill>
		<lineStyle public="1" set="method" line="23"><f a="style">
	<c path="format.gfx.LineStyle"/>
	<x path="Void"/>
</f></lineStyle>
		<endLineStyle public="1" set="method" line="24"><f a=""><x path="Void"/></f></endLineStyle>
		<moveTo public="1" set="method" line="26"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="27"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method" line="28"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<renderText public="1" set="method" line="30"><f a="text">
	<c path="format.svg.Text"/>
	<x path="Void"/>
</f></renderText>
		<eof public="1" set="method" line="32"><f a=""><x path="Void"/></f></eof>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.gfx.Gfx2Haxe" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/Gfx2Haxe.hx">
		<extends path="format.gfx.Gfx"/>
		<commands public="1"><c path="Array"><c path="String"/></c></commands>
		<f2a set="method" line="22"><f a="f">
	<x path="Float"/>
	<c path="String"/>
</f></f2a>
		<newMatrix set="method" line="30"><f a="m">
	<c path="flash.geom.Matrix"/>
	<c path="String"/>
</f></newMatrix>
		<beginGradientFill public="1" set="method" line="36" override="1"><f a="grad">
	<c path="format.gfx.Gradient"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method" line="43" override="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<endFill public="1" set="method" line="47" override="1"><f a=""><x path="Void"/></f></endFill>
		<lineStyle public="1" set="method" line="50" override="1"><f a="style">
	<c path="format.gfx.LineStyle"/>
	<x path="Void"/>
</f></lineStyle>
		<endLineStyle public="1" set="method" line="57" override="1"><f a=""><x path="Void"/></f></endLineStyle>
		<moveTo public="1" set="method" line="59" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="61" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method" line="63" override="1"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.gfx.GfxBytes" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/GfxBytes.hx">
		<extends path="format.gfx.Gfx"/>
		<EOF get="inline" set="null" line="24" static="1"><x path="Int"/></EOF>
		<SIZE get="inline" set="null" line="25" static="1"><x path="Int"/></SIZE>
		<BEGIN_FILL get="inline" set="null" line="27" static="1"><x path="Int"/></BEGIN_FILL>
		<GRADIENT_FILL get="inline" set="null" line="28" static="1"><x path="Int"/></GRADIENT_FILL>
		<END_FILL get="inline" set="null" line="29" static="1"><x path="Int"/></END_FILL>
		<LINE_STYLE get="inline" set="null" line="31" static="1"><x path="Int"/></LINE_STYLE>
		<END_LINE_STYLE get="inline" set="null" line="32" static="1"><x path="Int"/></END_LINE_STYLE>
		<MOVE get="inline" set="null" line="34" static="1"><x path="Int"/></MOVE>
		<LINE get="inline" set="null" line="35" static="1"><x path="Int"/></LINE>
		<CURVE get="inline" set="null" line="36" static="1"><x path="Int"/></CURVE>
		<base64 line="41" static="1"><c path="String"/></base64>
		<baseCoder static="1"><c path="haxe.crypto.BaseCode"/></baseCoder>
		<fromString public="1" set="method" line="73" static="1"><f a="inString">
	<c path="String"/>
	<c path="format.gfx.GfxBytes"/>
</f></fromString>
		<scaleModes line="93" static="1"><c path="Array"><e path="flash.display.LineScaleMode"/></c></scaleModes>
		<capsStyles line="94" static="1"><c path="Array"><e path="flash.display.CapsStyle"/></c></capsStyles>
		<jointStyles line="95" static="1"><c path="Array"><e path="flash.display.JointStyle"/></c></jointStyles>
		<spreadMethods line="96" static="1"><c path="Array"><e path="flash.display.SpreadMethod"/></c></spreadMethods>
		<interpolationMethods line="97" static="1"><c path="Array"><e path="flash.display.InterpolationMethod"/></c></interpolationMethods>
		<buffer public="1"><c path="flash.utils.ByteArray"/></buffer>
		<toString public="1" set="method" line="50"><f a=""><c path="String"/></f></toString>
		<eof public="1" set="method" line="91" override="1"><f a=""><x path="Void"/></f></eof>
		<iterate public="1" set="method" line="99"><f a="inGfx">
	<c path="format.gfx.Gfx"/>
	<x path="Void"/>
</f></iterate>
		<size public="1" set="method" line="181" override="1"><f a="inWidth:inHeight">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></size>
		<pushClipped get="inline" set="null" line="188"><f a="inVal">
	<x path="Float"/>
	<x path="Void"/>
</f></pushClipped>
		<writeRGB set="method" line="192"><f a="inVal">
	<x path="Int"/>
	<x path="Void"/>
</f></writeRGB>
		<readRGB set="method" line="198"><f a=""><x path="Int"/></f></readRGB>
		<beginGradientFill public="1" set="method" line="208" override="1"><f a="grad">
	<c path="format.gfx.Gradient"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method" line="230" override="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<endFill public="1" set="method" line="236" override="1"><f a=""><x path="Void"/></f></endFill>
		<lineStyle public="1" set="method" line="241" override="1"><f a="style">
	<c path="format.gfx.LineStyle"/>
	<x path="Void"/>
</f></lineStyle>
		<endLineStyle public="1" set="method" line="254" override="1"><f a=""><x path="Void"/></f></endLineStyle>
		<moveTo public="1" set="method" line="259" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="266" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method" line="273" override="1"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="44"><f a="?inBuffer:?inFlags" v="null:0">
	<c path="flash.utils.ByteArray"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.gfx.GfxExtent" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/GfxExtent.hx">
		<extends path="format.gfx.Gfx"/>
		<extent public="1"><c path="flash.geom.Rectangle"/></extent>
		<addExtent set="method" line="16"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></addExtent>
		<geometryOnly public="1" set="method" line="30" override="1"><f a=""><x path="Bool"/></f></geometryOnly>
		<moveTo public="1" set="method" line="31" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="35" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method" line="39" override="1"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.gfx.GfxGraphics" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/GfxGraphics.hx">
		<extends path="format.gfx.Gfx"/>
		<graphics><c path="flash.display.Graphics"/></graphics>
		<beginGradientFill public="1" set="method" line="23" override="1"><f a="grad">
	<c path="format.gfx.Gradient"/>
	<x path="Void"/>
</f></beginGradientFill>
		<beginFill public="1" set="method" line="28" override="1"><f a="color:alpha">
	<x path="Int"/>
	<x path="Float"/>
	<x path="Void"/>
</f></beginFill>
		<endFill public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></endFill>
		<lineStyle public="1" set="method" line="31" override="1"><f a="style">
	<c path="format.gfx.LineStyle"/>
	<x path="Void"/>
</f></lineStyle>
		<endLineStyle public="1" set="method" line="35" override="1"><f a=""><x path="Void"/></f></endLineStyle>
		<moveTo public="1" set="method" line="37" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveTo>
		<lineTo public="1" set="method" line="38" override="1"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></lineTo>
		<curveTo public="1" set="method" line="39" override="1"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></curveTo>
		<new public="1" set="method" line="17"><f a="inGraphics">
	<c path="flash.display.Graphics"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.gfx.GfxTextFinder" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/GfxTextFinder.hx">
		<extends path="format.gfx.Gfx"/>
		<text public="1"><c path="format.svg.Text"/></text>
		<geometryOnly public="1" set="method" line="11" override="1"><f a=""><x path="Bool"/></f></geometryOnly>
		<renderText public="1" set="method" line="12" override="1"><f a="inText">
	<c path="format.svg.Text"/>
	<x path="Void"/>
</f></renderText>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.gfx.Gradient" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/Gradient.hx">
		<type public="1"><e path="flash.display.GradientType"/></type>
		<colors public="1"><c path="Array"><x path="UInt"/></c></colors>
		<alphas public="1"><c path="Array"><x path="Float"/></c></alphas>
		<ratios public="1"><c path="Array"><x path="Int"/></c></ratios>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<spread public="1"><e path="flash.display.SpreadMethod"/></spread>
		<interp public="1"><e path="flash.display.InterpolationMethod"/></interp>
		<focus public="1"><x path="Float"/></focus>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.gfx.LineStyle" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/gfx/LineStyle.hx">
		<thickness public="1"><x path="Float"/></thickness>
		<color public="1"><x path="Int"/></color>
		<alpha public="1"><x path="Float"/></alpha>
		<pixelHinting public="1"><x path="Bool"/></pixelHinting>
		<scaleMode public="1"><e path="flash.display.LineScaleMode"/></scaleMode>
		<capsStyle public="1"><e path="flash.display.CapsStyle"/></capsStyle>
		<jointStyle public="1"><e path="flash.display.JointStyle"/></jointStyle>
		<miterLimit public="1"><x path="Float"/></miterLimit>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.svg.FillType" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/FillType.hx">
		<FillGrad a="grad"><c path="format.svg.Grad"/></FillGrad>
		<FillSolid a="colour"><x path="Int"/></FillSolid>
		<FillNone/>
	</enum>
	<class path="format.svg.Grad" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Grad.hx">
		<extends path="format.gfx.Gradient"/>
		<gradMatrix public="1"><c path="flash.geom.Matrix"/></gradMatrix>
		<radius public="1"><x path="Float"/></radius>
		<x1 public="1"><x path="Float"/></x1>
		<y1 public="1"><x path="Float"/></y1>
		<x2 public="1"><x path="Float"/></x2>
		<y2 public="1"><x path="Float"/></y2>
		<updateMatrix public="1" set="method" line="34"><f a="inMatrix">
	<c path="flash.geom.Matrix"/>
	<x path="Void"/>
</f></updateMatrix>
		<new public="1" set="method" line="22"><f a="inType">
	<e path="flash.display.GradientType"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.svg.GradHash" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Grad.hx" module="format.svg.Grad"><c path="haxe.ds.StringMap"><c path="format.svg.Grad"/></c></typedef>
	<class path="format.svg.Group" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Group.hx">
		<hasGroup public="1" set="method" line="12"><f a="inName">
	<c path="String"/>
	<x path="Bool"/>
</f></hasGroup>
		<findGroup public="1" set="method" line="13"><f a="inName">
	<c path="String"/>
	<c path="format.svg.Group"/>
</f></findGroup>
		<name public="1"><c path="String"/></name>
		<children public="1"><c path="Array"><e path="format.svg.DisplayElement"/></c></children>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="format.svg.DisplayElement" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Group.hx" module="format.svg.Group">
		<DisplayPath a="path"><c path="format.svg.Path"/></DisplayPath>
		<DisplayGroup a="group"><c path="format.svg.Group"/></DisplayGroup>
		<DisplayText a="text"><c path="format.svg.Text"/></DisplayText>
	</enum>
	<typedef path="format.svg.DisplayElements" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Group.hx" module="format.svg.Group"><c path="Array"><e path="format.svg.DisplayElement"/></c></typedef>
	<typedef path="format.svg.PathSegments" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Path.hx" module="format.svg.Path"><c path="Array"><c path="format.svg.PathSegment"/></c></typedef>
	<class path="format.svg.Path" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Path.hx">
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<name public="1"><c path="String"/></name>
		<font_size public="1"><x path="Float"/></font_size>
		<fill public="1"><e path="format.svg.FillType"/></fill>
		<alpha public="1"><x path="Float"/></alpha>
		<fill_alpha public="1"><x path="Float"/></fill_alpha>
		<stroke_alpha public="1"><x path="Float"/></stroke_alpha>
		<stroke_colour public="1"><t path="Null"><x path="Int"/></t></stroke_colour>
		<stroke_width public="1"><x path="Float"/></stroke_width>
		<stroke_caps public="1"><e path="flash.display.CapsStyle"/></stroke_caps>
		<joint_style public="1"><e path="flash.display.JointStyle"/></joint_style>
		<miter_limit public="1"><x path="Float"/></miter_limit>
		<segments public="1"><t path="format.svg.PathSegments"/></segments>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.svg.PathParser" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathParser.hx">
		<sCommandArgs static="1"><c path="Array"><x path="Int"/></c></sCommandArgs>
		<MOVE get="inline" set="null" line="18" static="1"><x path="Int"/></MOVE>
		<MOVER get="inline" set="null" line="19" static="1"><x path="Int"/></MOVER>
		<LINE get="inline" set="null" line="20" static="1"><x path="Int"/></LINE>
		<LINER get="inline" set="null" line="21" static="1"><x path="Int"/></LINER>
		<HLINE get="inline" set="null" line="22" static="1"><x path="Int"/></HLINE>
		<HLINER get="inline" set="null" line="23" static="1"><x path="Int"/></HLINER>
		<VLINE get="inline" set="null" line="24" static="1"><x path="Int"/></VLINE>
		<VLINER get="inline" set="null" line="25" static="1"><x path="Int"/></VLINER>
		<CUBIC get="inline" set="null" line="26" static="1"><x path="Int"/></CUBIC>
		<CUBICR get="inline" set="null" line="27" static="1"><x path="Int"/></CUBICR>
		<SCUBIC get="inline" set="null" line="28" static="1"><x path="Int"/></SCUBIC>
		<SCUBICR get="inline" set="null" line="29" static="1"><x path="Int"/></SCUBICR>
		<QUAD get="inline" set="null" line="30" static="1"><x path="Int"/></QUAD>
		<QUADR get="inline" set="null" line="31" static="1"><x path="Int"/></QUADR>
		<SQUAD get="inline" set="null" line="32" static="1"><x path="Int"/></SQUAD>
		<SQUADR get="inline" set="null" line="33" static="1"><x path="Int"/></SQUADR>
		<ARC get="inline" set="null" line="34" static="1"><x path="Int"/></ARC>
		<ARCR get="inline" set="null" line="35" static="1"><x path="Int"/></ARCR>
		<CLOSE get="inline" set="null" line="36" static="1"><x path="Int"/></CLOSE>
		<CLOSER get="inline" set="null" line="37" static="1"><x path="Int"/></CLOSER>
		<UNKNOWN line="39" static="1"><x path="Int"/></UNKNOWN>
		<SEPARATOR line="40" static="1"><x path="Int"/></SEPARATOR>
		<FLOAT line="41" static="1"><x path="Int"/></FLOAT>
		<FLOAT_SIGN line="42" static="1"><x path="Int"/></FLOAT_SIGN>
		<FLOAT_DOT line="43" static="1"><x path="Int"/></FLOAT_DOT>
		<FLOAT_EXP line="44" static="1"><x path="Int"/></FLOAT_EXP>
		<lastMoveX><x path="Float"/></lastMoveX>
		<lastMoveY><x path="Float"/></lastMoveY>
		<prev><c path="format.svg.PathSegment"/></prev>
		<parse public="1" set="method" line="57"><f a="pathToParse:inConvertCubics">
	<c path="String"/>
	<x path="Bool"/>
	<c path="Array"><c path="format.svg.PathSegment"/></c>
</f></parse>
		<commandArgs set="method" line="195"><f a="inCode">
	<x path="Int"/>
	<x path="Int"/>
</f></commandArgs>
		<prevX set="method" line="221"><f a=""><x path="Float"/></f></prevX>
		<prevY set="method" line="222"><f a=""><x path="Float"/></f></prevY>
		<prevCX set="method" line="223"><f a=""><x path="Float"/></f></prevCX>
		<prevCY set="method" line="224"><f a=""><x path="Float"/></f></prevCY>
		<createCommand set="method" line="226"><f a="code:a">
	<x path="Int"/>
	<c path="Array"><x path="Float"/></c>
	<c path="format.svg.PathSegment"/>
</f></createCommand>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="format.svg.PathSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx">
		<MOVE public="1" get="inline" set="null" line="10" static="1"><x path="Int"/></MOVE>
		<DRAW public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></DRAW>
		<CURVE public="1" get="inline" set="null" line="12" static="1"><x path="Int"/></CURVE>
		<CUBIC public="1" get="inline" set="null" line="13" static="1"><x path="Int"/></CUBIC>
		<ARC public="1" get="inline" set="null" line="14" static="1"><x path="Int"/></ARC>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<getType public="1" set="method" line="24"><f a=""><x path="Int"/></f></getType>
		<prevX public="1" set="method" line="26"><f a=""><x path="Float"/></f></prevX>
		<prevY public="1" set="method" line="27"><f a=""><x path="Float"/></f></prevY>
		<prevCX public="1" set="method" line="28"><f a=""><x path="Float"/></f></prevCX>
		<prevCY public="1" set="method" line="29"><f a=""><x path="Float"/></f></prevCY>
		<toGfx public="1" set="method" line="31"><f a="inGfx:ioContext">
	<c path="format.gfx.Gfx"/>
	<c path="format.svg.RenderContext"/>
	<x path="Void"/>
</f></toGfx>
		<new public="1" set="method" line="19"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.MoveSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx" module="format.svg.PathSegment">
		<extends path="format.svg.PathSegment"/>
		<getType public="1" set="method" line="44" override="1"><f a=""><x path="Int"/></f></getType>
		<new public="1" set="method" line="43"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.DrawSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx" module="format.svg.PathSegment">
		<extends path="format.svg.PathSegment"/>
		<toGfx public="1" set="method" line="51" override="1"><f a="inGfx:ioContext">
	<c path="format.gfx.Gfx"/>
	<c path="format.svg.RenderContext"/>
	<x path="Void"/>
</f></toGfx>
		<getType public="1" set="method" line="57" override="1"><f a=""><x path="Int"/></f></getType>
		<new public="1" set="method" line="50"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.QuadraticSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx" module="format.svg.PathSegment">
		<extends path="format.svg.PathSegment"/>
		<cx public="1"><x path="Float"/></cx>
		<cy public="1"><x path="Float"/></cy>
		<prevCX public="1" set="method" line="72" override="1"><f a=""><x path="Float"/></f></prevCX>
		<prevCY public="1" set="method" line="73" override="1"><f a=""><x path="Float"/></f></prevCY>
		<toGfx public="1" set="method" line="75" override="1"><f a="inGfx:ioContext">
	<c path="format.gfx.Gfx"/>
	<c path="format.svg.RenderContext"/>
	<x path="Void"/>
</f></toGfx>
		<getType public="1" set="method" line="82" override="1"><f a=""><x path="Int"/></f></getType>
		<new public="1" set="method" line="65"><f a="inCX:inCY:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.CubicSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx" module="format.svg.PathSegment">
		<extends path="format.svg.PathSegment"/>
		<cx1 public="1"><x path="Float"/></cx1>
		<cy1 public="1"><x path="Float"/></cy1>
		<cx2 public="1"><x path="Float"/></cx2>
		<cy2 public="1"><x path="Float"/></cy2>
		<prevCX public="1" set="method" line="101" override="1"><f a=""><x path="Float"/></f></prevCX>
		<prevCY public="1" set="method" line="102" override="1"><f a=""><x path="Float"/></f></prevCY>
		<Interp set="method" line="104"><f a="a:b:frac">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></Interp>
		<toGfx public="1" set="method" line="109" override="1"><f a="inGfx:ioContext">
	<c path="format.gfx.Gfx"/>
	<c path="format.svg.RenderContext"/>
	<x path="Void"/>
</f></toGfx>
		<toQuadratics public="1" set="method" line="169"><f a="tx0:ty0">
	<x path="Float"/>
	<x path="Float"/>
	<c path="Array"><c path="format.svg.QuadraticSegment"/></c>
</f></toQuadratics>
		<getType public="1" set="method" line="218" override="1"><f a=""><x path="Int"/></f></getType>
		<new public="1" set="method" line="92"><f a="inCX1:inCY1:inCX2:inCY2:inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.ArcSegment" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/PathSegment.hx" module="format.svg.PathSegment">
		<extends path="format.svg.PathSegment"/>
		<x1><x path="Float"/></x1>
		<y1><x path="Float"/></y1>
		<rx><x path="Float"/></rx>
		<ry><x path="Float"/></ry>
		<phi><x path="Float"/></phi>
		<fA><x path="Bool"/></fA>
		<fS><x path="Bool"/></fS>
		<toGfx public="1" set="method" line="244" override="1"><f a="inGfx:ioContext">
	<c path="format.gfx.Gfx"/>
	<c path="format.svg.RenderContext"/>
	<x path="Void"/>
</f></toGfx>
		<getType public="1" set="method" line="360" override="1"><f a=""><x path="Int"/></f></getType>
		<new public="1" set="method" line="231"><f a="inX1:inY1:inRX:inRY:inRotation:inLargeArc:inSweep:x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.RenderContext" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/RenderContext.hx">
		<transX public="1" set="method" line="19"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></transX>
		<transY public="1" set="method" line="30"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></transY>
		<setLast public="1" set="method" line="43"><f a="inX:inY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></setLast>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<rect public="1"><c path="flash.geom.Rectangle"/></rect>
		<rectW public="1"><x path="Float"/></rectW>
		<rectH public="1"><x path="Float"/></rectH>
		<firstX public="1"><x path="Float"/></firstX>
		<firstY public="1"><x path="Float"/></firstY>
		<lastX public="1"><x path="Float"/></lastX>
		<lastY public="1"><x path="Float"/></lastY>
		<new public="1" set="method" line="8"><f a="inMatrix:?inRect:?inW:?inH" v=":null:null:null">
	<c path="flash.geom.Matrix"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.SVGData" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/SVGData.hx">
		<extends path="format.svg.Group"/>
		<SIN45 line="30" static="1"><x path="Float"/></SIN45>
		<TAN22 line="31" static="1"><x path="Float"/></TAN22>
		<mStyleSplit line="32" static="1"><c path="EReg"/></mStyleSplit>
		<mStyleValue line="33" static="1"><c path="EReg"/></mStyleValue>
		<mTranslateMatch line="34" static="1"><c path="EReg"/></mTranslateMatch>
		<mScaleMatch line="35" static="1"><c path="EReg"/></mScaleMatch>
		<mMatrixMatch line="36" static="1"><c path="EReg"/></mMatrixMatch>
		<mURLMatch line="37" static="1"><c path="EReg"/></mURLMatch>
		<defaultFill line="38" static="1"><e path="format.svg.FillType"/></defaultFill>
		<height public="1" set="null"><x path="Float"/></height>
		<width public="1" set="null"><x path="Float"/></width>
		<mConvertCubics><x path="Bool"/></mConvertCubics>
		<mGrads><t path="format.svg.GradHash"/></mGrads>
		<mPathParser><c path="format.svg.PathParser"/></mPathParser>
		<applyTransform set="method" line="76"><f a="ioMatrix:inTrans">
	<c path="flash.geom.Matrix"/>
	<c path="String"/>
	<x path="Float"/>
</f></applyTransform>
		<dumpGroup set="method" line="126"><f a="g:indent">
	<c path="format.svg.Group"/>
	<c path="String"/>
	<x path="Void"/>
</f></dumpGroup>
		<getColorStyle set="method" line="146"><f a="inKey:inNode:inStyles:inDefault">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Int"/>
	<x path="Int"/>
</f></getColorStyle>
		<getFillStyle set="method" line="167"><f a="inKey:inNode:inStyles">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<e path="format.svg.FillType"/>
</f></getFillStyle>
		<getFloat set="method" line="210"><f a="inXML:inName:?inDef" v="::0.0f">
	<c path="Xml"/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
</f></getFloat>
		<getFloatStyle set="method" line="220"><f a="inKey:inNode:inStyles:inDefault">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Float"/>
	<x path="Float"/>
</f></getFloatStyle>
		<getStrokeStyle set="method" line="235"><f a="inKey:inNode:inStyles:inDefault">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<t path="Null"><x path="Int"/></t>
	<t path="Null"><x path="Int"/></t>
</f></getStrokeStyle>
		<getStyle set="method" line="262"><f a="inKey:inNode:inStyles:inDefault">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="String"/>
	<c path="String"/>
</f></getStyle>
		<getStyles set="method" line="281"><f a="inNode:inPrevStyles">
	<c path="Xml"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
</f></getStyles>
		<loadDefs set="method" line="316"><f a="inXML">
	<c path="Xml"/>
	<x path="Void"/>
</f></loadDefs>
		<loadGradient set="method" line="349"><f a="inGrad:inType:inCrossLink">
	<c path="Xml"/>
	<e path="flash.display.GradientType"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadGradient>
		<loadGroup public="1" set="method" line="422"><f a="g:inG:matrix:inStyles">
	<c path="format.svg.Group"/>
	<c path="Xml"/>
	<c path="flash.geom.Matrix"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="format.svg.Group"/>
</f></loadGroup>
		<loadPath public="1" set="method" line="510"><f a="inPath:matrix:inStyles:inIsRect:inIsEllipse:?inIsCircle" v=":::::false">
	<c path="Xml"/>
	<c path="flash.geom.Matrix"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<c path="format.svg.Path"/>
</f></loadPath>
		<loadText public="1" set="method" line="616"><f a="inText:matrix:inStyles">
	<c path="Xml"/>
	<c path="flash.geom.Matrix"/>
	<c path="haxe.ds.StringMap"><c path="String"/></c>
	<c path="format.svg.Text"/>
</f></loadText>
		<new public="1" set="method" line="48"><f a="inXML:?inConvertCubics" v=":false">
	<c path="Xml"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="format.svg.GroupPath" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/SVGRenderer.hx" module="format.svg.SVGRenderer"><c path="Array"><c path="String"/></c></typedef>
	<typedef path="format.svg.ObjectFilter" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/SVGRenderer.hx" module="format.svg.SVGRenderer"><f a=":">
	<c path="String"/>
	<t path="format.svg.GroupPath"/>
	<x path="Bool"/>
</f></typedef>
	<class path="format.svg.SVGRenderer" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/SVGRenderer.hx">
		<toHaxe public="1" set="method" line="60" static="1"><f a="inXML:?inFilter" v=":null">
	<c path="Xml"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="Array"><c path="String"/></c>
</f></toHaxe>
		<toBytes public="1" set="method" line="65" static="1"><f a="inXML:?inFilter" v=":null">
	<c path="Xml"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="format.gfx.GfxBytes"/>
</f></toBytes>
		<width public="1" set="null"><x path="Float"/></width>
		<height public="1" set="null"><x path="Float"/></height>
		<mSvg><c path="format.svg.SVGData"/></mSvg>
		<mRoot><c path="format.svg.Group"/></mRoot>
		<mGfx><c path="format.gfx.Gfx"/></mGfx>
		<mMatrix><c path="flash.geom.Matrix"/></mMatrix>
		<mScaleRect><c path="flash.geom.Rectangle"/></mScaleRect>
		<mScaleW><t path="Null"><x path="Float"/></t></mScaleW>
		<mScaleH><t path="Null"><x path="Float"/></t></mScaleH>
		<mFilter><t path="format.svg.ObjectFilter"/></mFilter>
		<mGroupPath><t path="format.svg.GroupPath"/></mGroupPath>
		<iterate public="1" params="T" set="method" line="71"><f a="inGfx:?inFilter" v=":null">
	<c path="iterate.T"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="iterate.T"/>
</f></iterate>
		<hasGroup public="1" set="method" line="82"><f a="inName">
	<c path="String"/>
	<x path="Bool"/>
</f></hasGroup>
		<iterateText public="1" set="method" line="87"><f a="inText">
	<c path="format.svg.Text"/>
	<x path="Void"/>
</f></iterateText>
		<iteratePath public="1" set="method" line="94"><f a="inPath">
	<c path="format.svg.Path"/>
	<x path="Void"/>
</f></iteratePath>
		<iterateGroup public="1" set="method" line="158"><f a="inGroup:inIgnoreDot">
	<c path="format.svg.Group"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></iterateGroup>
		<render public="1" set="method" line="188"><f a="inGfx:?inMatrix:?inFilter:?inScaleRect:?inScaleW:?inScaleH" v=":null:null:null:null:null">
	<c path="flash.display.Graphics"/>
	<c path="flash.geom.Matrix"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></render>
		<renderRect public="1" set="method" line="205"><f a="inGfx:inFilter:scaleRect:inBounds:inRect">
	<c path="flash.display.Graphics"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></renderRect>
		<renderRect0 public="1" set="method" line="220"><f a="inGfx:inFilter:scaleRect:inBounds:inRect">
	<c path="flash.display.Graphics"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></renderRect0>
		<getExtent public="1" set="method" line="238"><f a="?inMatrix:?inFilter:?inIgnoreDot" v="null:null:null">
	<c path="flash.geom.Matrix"/>
	<t path="format.svg.ObjectFilter"/>
	<x path="Bool"/>
	<c path="flash.geom.Rectangle"/>
</f></getExtent>
		<findText public="1" set="method" line="258"><f a="?inFilter" v="null">
	<t path="format.svg.ObjectFilter"/>
	<c path="format.svg.Text"/>
</f></findText>
		<getMatchingRect public="1" set="method" line="268"><f a="inMatch">
	<c path="EReg"/>
	<c path="flash.geom.Rectangle"/>
</f></getMatchingRect>
		<renderObject public="1" set="method" line="275"><f a="inObj:inGfx:?inMatrix:?inFilter:inScale9" v="::null:null:">
	<c path="flash.display.DisplayObject"/>
	<c path="flash.display.Graphics"/>
	<c path="flash.geom.Matrix"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></renderObject>
		<renderSprite public="1" set="method" line="290"><f a="inObj:?inMatrix:?inFilter:?inScale9" v=":null:null:null">
	<c path="flash.display.Sprite"/>
	<c path="flash.geom.Matrix"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<x path="Void"/>
</f></renderSprite>
		<createShape public="1" set="method" line="295"><f a="?inMatrix:?inFilter:?inScale9" v="null:null:null">
	<c path="flash.geom.Matrix"/>
	<t path="format.svg.ObjectFilter"/>
	<c path="flash.geom.Rectangle"/>
	<c path="flash.display.Shape"/>
</f></createShape>
		<namedShape public="1" set="method" line="302"><f a="inName">
	<c path="String"/>
	<c path="flash.display.Shape"/>
</f></namedShape>
		<renderBitmap public="1" set="method" line="308"><f a="?inRect:?inScale" v="null:1.0f">
	<c path="flash.geom.Rectangle"/>
	<x path="Float"/>
	<c path="flash.display.BitmapData"/>
</f></renderBitmap>
		<new public="1" set="method" line="45"><f a="inSvg:?inLayer" v=":null">
	<c path="format.svg.SVGData"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="format.svg.Text" params="" file="C:\Servers\Haxe\haxe\lib/svg/1,0,8/format/svg/Text.hx">
		<name public="1"><c path="String"/></name>
		<x public="1"><x path="Float"/></x>
		<y public="1"><x path="Float"/></y>
		<matrix public="1"><c path="flash.geom.Matrix"/></matrix>
		<text public="1"><c path="String"/></text>
		<fill public="1"><e path="format.svg.FillType"/></fill>
		<fill_alpha public="1"><x path="Float"/></fill_alpha>
		<stroke_alpha public="1"><x path="Float"/></stroke_alpha>
		<stroke_colour public="1"><t path="Null"><x path="Int"/></t></stroke_colour>
		<stroke_width public="1"><x path="Float"/></stroke_width>
		<font_family public="1"><c path="String"/></font_family>
		<font_size public="1"><x path="Float"/></font_size>
		<kerning public="1"><x path="Float"/></kerning>
		<letter_spacing public="1"><x path="Float"/></letter_spacing>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="haxe.StackItem" params="" file="C:\Servers\Haxe\haxe\std/haxe/CallStack.hx" module="haxe.CallStack">
		<CFunction/>
		<Module a="m"><c path="String"/></Module>
		<FilePos a="s:file:line">
			<t path="Null"><e path="haxe.StackItem"/></t>
			<c path="String"/>
			<x path="Int"/>
		</FilePos>
		<Method a="classname:method">
			<c path="String"/>
			<c path="String"/>
		</Method>
		<LocalFunction a="v"><x path="Int"/></LocalFunction>
		<haxe_doc>Elements return by `CallStack` methods.</haxe_doc>
	</enum>
	<class path="haxe.CallStack" params="" file="C:\Servers\Haxe\haxe\std/haxe/CallStack.hx">
		<callStack public="1" set="method" line="43" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the call stack elements, or an empty array if not available.</haxe_doc>
		</callStack>
		<exceptionStack public="1" set="method" line="115" static="1">
			<f a=""><c path="Array"><e path="haxe.StackItem"/></c></f>
			<haxe_doc>Return the exception stack : this is the stack elements between
		the place the last exception was thrown and the place it was
		caught, or an empty array if not available.</haxe_doc>
		</exceptionStack>
		<toString public="1" set="method" line="170" static="1">
			<f a="stack">
				<c path="Array"><e path="haxe.StackItem"/></c>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of the stack as a printable string.</haxe_doc>
		</toString>
		<itemToString set="method" line="179" static="1"><f a="b:s">
	<c path="StringBuf"/>
	<e path="haxe.StackItem"/>
	<x path="Void"/>
</f></itemToString>
		<makeStack set="method" line="206" static="1"><f a="s">
	<c path="String"/>
	<c path="Array"><e path="haxe.StackItem"/></c>
</f></makeStack>
		<haxe_doc>Get informations about the call stack.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.EnumTools" params="" file="C:\Servers\Haxe\haxe\std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is null, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="54" static="1">
			<f a="e:constr:?params" v="::null">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="70" static="1">
			<f a="e:index:?params" v="::null">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `constr` is null, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="87" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array [] if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="99" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is null, the result is unspecified.</haxe_doc>
		</getConstructors>
	</class>
	<class path="haxe.EnumValueTools" params="" file="C:\Servers\Haxe\haxe\std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="114" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors, if exists.

		If `a` or `b` are null, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="125" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="139" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is [].

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="151" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is null, the result is unspecified.</haxe_doc>
		</getIndex>
	</class>
	<class path="haxe.Json" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/Json.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="text">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc><![CDATA[Parses given JSON-encoded `text` and returns the resulting object.

		JSON objects are parsed into anonymous structures and JSON arrays
		are parsed into Array<Dynamic>.

		If given `text` is not valid JSON, an exception will be thrown.]]></haxe_doc>
		</parse>
		<stringify public="1" set="method" static="1">
			<f a="value:?replacer:?space">
				<d/>
				<f a=":">
					<d/>
					<d/>
					<d/>
				</f>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Encodes given `value` and returns the resulting JSON string.

		If `replacer` is given and is not null, it is used to retrieve
		actual object to be encoded. The `replacer` function two parameters,
		the key and the value being encoded. Initial key value is an empty string.
		
		If `space` is given and is not null, the result will be pretty-printed.
		Successive levels will be indented by this string.</haxe_doc>
		</stringify>
		<haxe_doc>Crossplatform JSON API : it will automatically use the optimized native API if available.
	Use -D haxeJSON to force usage of the Haxe implementation even if a native API is found : this will provide
	extra encoding features such as enums (replaced by their index) and StringMaps.</haxe_doc>
		<meta>
			<m n=":coreApi"/>
			<m n=":native"><e>"JSON"</e></m>
		</meta>
	</class>
	<class path="haxe.Log" params="" file="C:\Servers\Haxe\haxe\std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="45" static="1">
			<f a="v:?infos" v=":null">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the trace() call was made.

		This method can be rebound to a custom function:
			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v,infos) { // handle trace }
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to trace() will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the trace() method, which is invoked upon a call to
	trace() in haxe code.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Servers\Haxe\haxe\std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<c path="Array"><d/></c>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>PosInfos is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	(..., ?pos:haxe.PosInfos), each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<class path="haxe.Resource" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/Resource.hx">
		<content static="1"><c path="Array"><a><name><c path="String"/></name></a></c></content>
		<getString public="1" set="method" line="64" static="1">
			<f a="name">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Retrieves the resource identified by `name` as a String.

		If `name` does not match any resource name, null is returned.</haxe_doc>
		</getString>
		<resolve set="method" line="74" static="1"><f a="name">
	<c path="String"/>
	<c path="flash.utils.ByteArray"/>
</f></resolve>
		<haxe_doc>Resource can be used to access resources that were added through the
	-resource file@name command line parameter.

	Depending on their type they can be obtained as String through
	getString(name), or as binary data through getBytes(name).

	A list of all available resource names can be obtained from listNames().</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.Timer" params="" file="C:\Servers\Haxe\haxe\std/haxe/Timer.hx">
		<stamp public="1" set="method" line="161" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns a timestamp, in seconds with fractions.

		The value itself might differ depending on platforms, only differences
		between two values make sense.</haxe_doc>
		</stamp>
		<id><t path="Null"><x path="Int"/></t></id>
		<stop public="1" set="method" line="83">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Stops `this` Timer.

		After calling this method, no additional invocations of `this.run`
		will occur.

		It is not possible to restart `this` Timer once stopped.</haxe_doc>
		</stop>
		<run public="1" set="dynamic" line="113">
			<f a=""><x path="Void"/></f>
			<haxe_doc>This method is invoked repeatedly on `this` Timer.

		It can be overridden in a subclass, or rebound directly to a custom
		function:
			var timer = new haxe.Timer(1000); // 1000ms delay
			timer.run = function() { ... }

		Once bound, it can still be rebound to different functions until `this`
		Timer is stopped through a call to `this.stop`.</haxe_doc>
		</run>
		<new public="1" set="method" line="59">
			<f a="time_ms">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new timer that will run every `time_ms` milliseconds.

		After creating the Timer instance, it calls `this].run` repeatedly,
		with delays of `time_ms` milliseconds, until `this.stop` is called.

		The first invocation occurs after `time_ms` milliseconds, not
		immediately.

		The accuracy of this may be platform-dependent.</haxe_doc>
		</new>
		<haxe_doc>The Timer class allows you to create asynchronous timers on platforms that
	support events.

	The intended usage is to create an instance of the Timer class with a given
	interval, set its run() method to a custom function to be invoked and
	eventually call stop() to stop the Timer.

	Note that a running Timer may or may not prevent the program to exit
	automatically when main() returns.

	It is also possible to extend this class and override its run() method in
	the child class.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.Unserializer" params="" file="C:\Servers\Haxe\haxe\std/haxe/Unserializer.hx">
		<DEFAULT_RESOLVER public="1" line="60" static="1">
			<t path="haxe.TypeResolver"/>
			<haxe_doc><![CDATA[This value can be set to use custom type resolvers.

		A type resolver finds a Class or Enum instance from a given String. By
		default, the haxe Type Api is used.

		A type resolver must provide two methods:

		1. resolveClass(name:String):Class<Dynamic> is called to determine a
				Class from a class name
		2. resolveEnum(name:String):Enum<Dynamic> is called to determine an
				Enum from an enum name

		This value is applied when a new Unserializer instance is created.
		Changing it afterwards has no effect on previously created instances.]]></haxe_doc>
		</DEFAULT_RESOLVER>
		<BASE64 line="62" static="1"><c path="String"/></BASE64>
		<CODES line="65" static="1"><c path="flash.utils.ByteArray"/></CODES>
		<initCodes set="method" line="67" static="1"><f a=""><c path="flash.utils.ByteArray"/></f></initCodes>
		<buf><c path="String"/></buf>
		<pos><x path="Int"/></pos>
		<length><x path="Int"/></length>
		<cache><c path="Array"><d/></c></cache>
		<scache><c path="Array"><c path="String"/></c></scache>
		<resolver><t path="haxe.TypeResolver"/></resolver>
		<setResolver public="1" set="method" line="124">
			<f a="r">
				<t path="haxe.TypeResolver"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the type resolver of `this` Unserializer instance to `r`.

		If `r` is null, a special resolver is used which returns null for all
		input values.

		See DEFAULT_RESOLVER for more information on type resolvers.</haxe_doc>
		</setResolver>
		<readDigits set="method" line="147"><f a=""><x path="Int"/></f></readDigits>
		<unserializeObject set="method" line="172"><f a="o">
	<a/>
	<x path="Void"/>
</f></unserializeObject>
		<unserializeEnum set="method" line="187"><f a="edecl:tag">
	<x path="Enum"><unknown/></x>
	<c path="String"/>
	<unknown/>
</f></unserializeEnum>
		<unserialize public="1" set="method" line="219">
			<f a=""><d/></f>
			<haxe_doc>Unserializes the next part of `this` Unserializer instance and returns
		the according value.

		This function may call `this.resolver.resolveClass` to determine a
		Class from a String, and `this.resolver.resolveEnum` to determine an
		Enum from a String.

		If `this` Unserializer instance contains no more or invalid data, an
		exception is thrown.

		This operation may fail on structurally valid data if a type cannot be
		resolved or if a field cannot be set. This can happen when unserializing
		Strings that were serialized on a different haxe target, in which the
		serialization side has to make sure not to include platform-specific
		data.

		Classes are created from Type.createEmptyInstance, which means their
		constructors are not called.</haxe_doc>
		</unserialize>
		<new public="1" set="method" line="99">
			<f a="buf">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Unserializer instance, with its internal buffer
		initialized to `buf`.

		This does not parse `buf` immediately. It is parsed only when calls to
		`this.unserialize` are made.

		Each Unserializer instance maintains its own cache.</haxe_doc>
		</new>
		<haxe_doc>The Unserializer class is the complement to the Serializer class. It parses
	a serialization String and creates objects from the contained data.

	This class can be used in two ways:

	- create a new Unserializer() instance with a given serialization
		String, then call its unserialize() method until all values are
		extracted
	- call Unserializer.run() to unserialize a single value from a given
		String</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.crypto.BaseCode" params="" file="C:\Servers\Haxe\haxe\std/haxe/crypto/BaseCode.hx">
		<base><c path="haxe.io.Bytes"/></base>
		<nbits><x path="Int"/></nbits>
		<tbl><c path="Array"><x path="Int"/></c></tbl>
		<encodeBytes public="1" set="method" line="44"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></encodeBytes>
		<initTable set="method" line="72"><f a=""><x path="Void"/></f></initTable>
		<decodeBytes public="1" set="method" line="81"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></decodeBytes>
		<new public="1" set="method" line="33"><f a="base">
	<c path="haxe.io.Bytes"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Allows to encode/decode String and bytes using a power of two base dictionnary.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.GenericCell_hscript_Token" params="" file="C:\Servers\Haxe\haxe\std/haxe/ds/GenericStack.hx">
		<elt public="1"><e path="hscript.Token"/></elt>
		<next public="1"><c path="haxe.ds.GenericCell_hscript_Token"/></next>
		<new public="1" set="method" line="30"><f a="elt:next">
	<e path="hscript.Token"/>
	<c path="haxe.ds.GenericCell_hscript_Token"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ds.GenericStack_hscript_Token" params="" file="C:\Servers\Haxe\haxe\std/haxe/ds/GenericStack.hx">
		<head public="1"><c path="haxe.ds.GenericCell_hscript_Token"/></head>
		<add public="1" get="inline" set="null" line="73">
			<f a="item">
				<e path="hscript.Token"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Pushes element `item` onto the stack.</haxe_doc>
		</add>
		<first public="1" get="inline" set="null" line="82">
			<f a=""><t path="Null"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns the topmost stack element without removing it.

		If the stack is empty, null is returned.</haxe_doc>
		</first>
		<pop public="1" get="inline" set="null" line="91">
			<f a=""><t path="Null"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns the topmost stack element and removes it.

		If the stack is empty, null is returned.</haxe_doc>
		</pop>
		<isEmpty public="1" get="inline" set="null" line="104">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>Tells if the stack is empty.</haxe_doc>
		</isEmpty>
		<remove public="1" set="method" line="117">
			<f a="v">
				<e path="hscript.Token"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first element which is equal to `v` according to the `==`
		operator.

		This method traverses the stack until it finds a matching element and
		unlinks it, returning true.

		If no matching element is found, false is returned.</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="148">
			<f a=""><t path="Iterator"><e path="hscript.Token"/></t></f>
			<haxe_doc>Returns an iterator over the elements of `this` GenericStack.</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="166">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String representation of `this` GenericStack.</haxe_doc>
		</toString>
		<new public="1" set="method" line="67">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty GenericStack.</haxe_doc>
		</new>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="C:\Servers\Haxe\haxe\std/haxe/ds/HashMap.hx">
		<this><a>
	<values><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.V"/></c></values>
	<keys><c path="haxe.ds.IntMap"><c path="haxe.ds.HashMap.K"/></c></keys>
</a></this>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="C:\Servers\Haxe\haxe\std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.IntMap" params="T" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/ds/IntMap.hx">
		<implements path="IMap">
			<x path="Int"/>
			<c path="haxe.ds.IntMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new IntMap.</haxe_doc>
		</new>
		<haxe_doc>IntMap allows mapping of Int keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds.ObjectMap" params="K:V" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/ds/ObjectMap.hx">
		<extends path="flash.utils.Dictionary"/>
		<implements path="IMap">
			<c path="haxe.ds.ObjectMap.K"/>
			<c path="haxe.ds.ObjectMap.V"/>
		</implements>
		<remove public="1" set="method" line="22">
			<f a="key">
				<c path="haxe.ds.ObjectMap.K"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="46">
			<f a=""><t path="Iterator"><c path="haxe.ds.ObjectMap.V"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="6">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new ObjectMap.</haxe_doc>
		</new>
		<haxe_doc>ObjectMap allows mapping of object keys to arbitrary values.

	On static targets, the keys are considered to be strong references. Refer
	to `haxe.ds.WeakMap` for a weak reference version.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.ds._ObjectMap.NativeValueIterator" params="" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/ds/ObjectMap.hx" private="1" module="haxe.ds.ObjectMap">
		<collection><d/></collection>
		<index><x path="Int"/></index>
		<hasNext public="1" get="inline" set="null" line="105"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" get="inline" set="null" line="114"><f a=""><d/></f></next>
		<new set="method" line="103"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ds.StringMap" params="T" file="C:\Servers\Haxe\haxe\std/flash/_std/haxe/ds/StringMap.hx">
		<implements path="IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><c path="flash.utils.Dictionary"/></h>
		<set public="1" set="method" line="32">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="36">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="haxe.ds.StringMap.T"/></t>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<remove public="1" set="method" line="44">
			<f a="key">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>See `Map.remove`</haxe_doc>
		</remove>
		<keys public="1" set="method" line="51">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>See `Map.keys`</haxe_doc>
		</keys>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="haxe.ds.StringMap.T"/></t></f>
			<haxe_doc>See `Map.iterator`</haxe_doc>
		</iterator>
		<new public="1" set="method" line="28">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="C:\Servers\Haxe\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="flash.Vector"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="C:\Servers\Haxe\haxe\std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="C:\Servers\Haxe\haxe\std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.io.Bytes" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="357" static="1"><f a="length">
	<x path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="382" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="435" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><x path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<toString public="1" set="method" line="318"><f a=""><c path="String"/></f></toString>
		<new set="method" line="33"><f a="length:b">
	<x path="Int"/>
	<t path="haxe.io.BytesData"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.io.BytesData" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/BytesData.hx"><c path="flash.utils.ByteArray"/></typedef>
	<class path="haxe.io.Input" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/Input.hx">
		<readByte public="1" set="method" line="37"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="46"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readFullBytes public="1" set="method" line="99"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></readFullBytes>
		<readString public="1" set="method" line="326"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesInput" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<readByte public="1" set="method" line="87" override="1"><f a=""><x path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="108" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></readBytes>
		<readString public="1" set="method" line="185" override="1"><f a="len">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<new public="1" set="method" line="38"><f a="b:?pos:?len" v=":null:null">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/Output.hx">
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.BytesOutput" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="flash.utils.ByteArray"/></b>
		<writeByte public="1" set="method" line="48"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<getBytes public="1" set="method" line="113"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Eof" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/Eof.hx">
		<toString set="method" line="30">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the [Input].</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
	</enum>
	<class path="haxe.io.StringInput" params="" file="C:\Servers\Haxe\haxe\std/haxe/io/StringInput.hx">
		<extends path="haxe.io.BytesInput"/>
		<new public="1" set="method" line="26"><f a="s">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<min><x path="Int"/></min>
	<max><x path="Int"/></max>
	<file><c path="String"/></file>
</a></typedef>
	<enum path="haxe.macro.Constant" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<CInt a="v"><c path="String"/></CInt>
		<CFloat a="f"><c path="String"/></CFloat>
		<CString a="s"><c path="String"/></CString>
		<CIdent a="s"><c path="String"/></CIdent>
		<CRegexp a="r:opt">
			<c path="String"/>
			<c path="String"/>
		</CRegexp>
	</enum>
	<enum path="haxe.macro.Binop" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpAdd><haxe_doc>`+`</haxe_doc></OpAdd>
		<OpMult><haxe_doc>`*`</haxe_doc></OpMult>
		<OpDiv><haxe_doc>`/`</haxe_doc></OpDiv>
		<OpSub><haxe_doc>`-`</haxe_doc></OpSub>
		<OpAssign><haxe_doc>`=`</haxe_doc></OpAssign>
		<OpEq><haxe_doc>`==`</haxe_doc></OpEq>
		<OpNotEq><haxe_doc>`!=`</haxe_doc></OpNotEq>
		<OpGt><haxe_doc><![CDATA[`>`]]></haxe_doc></OpGt>
		<OpGte><haxe_doc><![CDATA[`>=`]]></haxe_doc></OpGte>
		<OpLt><haxe_doc><![CDATA[`<`]]></haxe_doc></OpLt>
		<OpLte><haxe_doc><![CDATA[`<=`]]></haxe_doc></OpLte>
		<OpAnd><haxe_doc><![CDATA[`&`]]></haxe_doc></OpAnd>
		<OpOr><haxe_doc>`|`</haxe_doc></OpOr>
		<OpXor><haxe_doc>`^`</haxe_doc></OpXor>
		<OpBoolAnd><haxe_doc><![CDATA[`&&`]]></haxe_doc></OpBoolAnd>
		<OpBoolOr><haxe_doc>`||`</haxe_doc></OpBoolOr>
		<OpShl><haxe_doc><![CDATA[`<<`]]></haxe_doc></OpShl>
		<OpShr><haxe_doc><![CDATA[`>>`]]></haxe_doc></OpShr>
		<OpUShr><haxe_doc><![CDATA[`>>>`]]></haxe_doc></OpUShr>
		<OpMod><haxe_doc>`%`</haxe_doc></OpMod>
		<OpAssignOp a="op">
			<e path="haxe.macro.Binop"/>
			<haxe_doc><![CDATA[`+=`
		`-=`
		`/=`
		`*=`
		`<<=`
		`>>=`
		`>>>=`
		`|=`
		`&=`
		`^=`
		`%=`]]></haxe_doc>
		</OpAssignOp>
		<OpInterval><haxe_doc>`...`</haxe_doc></OpInterval>
		<OpArrow><haxe_doc><![CDATA[`=>`]]></haxe_doc></OpArrow>
	</enum>
	<enum path="haxe.macro.Unop" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<OpIncrement><haxe_doc>`++`</haxe_doc></OpIncrement>
		<OpDecrement><haxe_doc>`--`</haxe_doc></OpDecrement>
		<OpNot><haxe_doc>`!`</haxe_doc></OpNot>
		<OpNeg><haxe_doc>`-`</haxe_doc></OpNeg>
		<OpNegBits><haxe_doc>`~`</haxe_doc></OpNegBits>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="haxe.macro.Expr" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><t path="haxe.macro.Expr"/></typedef>
	<typedef path="haxe.macro.Case" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<values><c path="Array"><t path="haxe.macro.Expr"/></c></values>
	<guard>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</guard>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Var" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<name><c path="String"/></name>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
</a></typedef>
	<typedef path="haxe.macro.Catch" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<type><e path="haxe.macro.ComplexType"/></type>
	<name><c path="String"/></name>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></typedef>
	<enum path="haxe.macro.ExprDef" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<EConst a="c"><e path="haxe.macro.Constant"/></EConst>
		<EArray a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EArray>
		<EBinop a="op:e1:e2">
			<e path="haxe.macro.Binop"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EBinop>
		<EField a="e:field">
			<t path="haxe.macro.Expr"/>
			<c path="String"/>
		</EField>
		<EParenthesis a="e"><t path="haxe.macro.Expr"/></EParenthesis>
		<EObjectDecl a="fields"><c path="Array"><a>
	<field><c path="String"/></field>
	<expr><t path="haxe.macro.Expr"/></expr>
</a></c></EObjectDecl>
		<EArrayDecl a="values"><c path="Array"><t path="haxe.macro.Expr"/></c></EArrayDecl>
		<ECall a="e:params">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ECall>
		<ENew a="t:params">
			<t path="haxe.macro.TypePath"/>
			<c path="Array"><t path="haxe.macro.Expr"/></c>
		</ENew>
		<EUnop a="op:postFix:e">
			<e path="haxe.macro.Unop"/>
			<x path="Bool"/>
			<t path="haxe.macro.Expr"/>
		</EUnop>
		<EVars a="vars"><c path="Array"><t path="haxe.macro.Var"/></c></EVars>
		<EFunction a="name:f">
			<t path="Null"><c path="String"/></t>
			<t path="haxe.macro.Function"/>
		</EFunction>
		<EBlock a="exprs"><c path="Array"><t path="haxe.macro.Expr"/></c></EBlock>
		<EFor a="it:expr">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EFor>
		<EIn a="e1:e2">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</EIn>
		<EIf a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="Null"><t path="haxe.macro.Expr"/></t>
		</EIf>
		<EWhile a="econd:e:normalWhile">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EWhile>
		<ESwitch a="e:cases:edef">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Case"/></c>
			<t path="Null"><t path="Null"><t path="haxe.macro.Expr"/></t></t>
		</ESwitch>
		<ETry a="e:catches">
			<t path="haxe.macro.Expr"/>
			<c path="Array"><t path="haxe.macro.Catch"/></c>
		</ETry>
		<EReturn a="?e"><t path="haxe.macro.Expr"/></EReturn>
		<EBreak/>
		<EContinue/>
		<EUntyped a="e"><t path="haxe.macro.Expr"/></EUntyped>
		<EThrow a="e"><t path="haxe.macro.Expr"/></EThrow>
		<ECast a="e:t">
			<t path="haxe.macro.Expr"/>
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
		</ECast>
		<EDisplay a="e:isCall">
			<t path="haxe.macro.Expr"/>
			<x path="Bool"/>
		</EDisplay>
		<EDisplayNew a="t"><t path="haxe.macro.TypePath"/></EDisplayNew>
		<ETernary a="econd:eif:eelse">
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
			<t path="haxe.macro.Expr"/>
		</ETernary>
		<ECheckType a="e:t">
			<t path="haxe.macro.Expr"/>
			<e path="haxe.macro.ComplexType"/>
		</ECheckType>
		<EMeta a="s:e">
			<t path="haxe.macro.MetadataEntry"/>
			<t path="haxe.macro.Expr"/>
		</EMeta>
	</enum>
	<enum path="haxe.macro.ComplexType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<TPath a="p"><t path="haxe.macro.TypePath"/></TPath>
		<TFunction a="args:ret">
			<c path="Array"><e path="haxe.macro.ComplexType"/></c>
			<e path="haxe.macro.ComplexType"/>
		</TFunction>
		<TAnonymous a="fields"><c path="Array"><t path="haxe.macro.Field"/></c></TAnonymous>
		<TParent a="t"><e path="haxe.macro.ComplexType"/></TParent>
		<TExtend a="p:fields">
			<c path="Array"><t path="haxe.macro.TypePath"/></c>
			<c path="Array"><t path="haxe.macro.Field"/></c>
		</TExtend>
		<TOptional a="t"><e path="haxe.macro.ComplexType"/></TOptional>
	</enum>
	<typedef path="haxe.macro.TypePath" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<sub>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</sub>
	<params>
		<c path="Array"><e path="haxe.macro.TypeParam"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
	<constraints>
		<c path="Array"><e path="haxe.macro.ComplexType"/></c>
		<meta><m n=":optional"/></meta>
	</constraints>
</a></typedef>
	<typedef path="haxe.macro.Function" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<ret><t path="Null"><e path="haxe.macro.ComplexType"/></t></ret>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<expr><t path="Null"><t path="haxe.macro.Expr"/></t></expr>
	<args><c path="Array"><t path="haxe.macro.FunctionArg"/></c></args>
</a></typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<value>
		<t path="Null"><t path="haxe.macro.Expr"/></t>
		<meta><m n=":optional"/></meta>
	</value>
	<type><t path="Null"><e path="haxe.macro.ComplexType"/></t></type>
	<opt>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</opt>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.Expr"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.Metadata" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><c path="Array"><t path="haxe.macro.MetadataEntry"/></c></typedef>
	<typedef path="haxe.macro.Field" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.FieldType"/></kind>
	<doc>
		<t path="Null"><c path="String"/></t>
		<meta><m n=":optional"/></meta>
	</doc>
	<access>
		<c path="Array"><e path="haxe.macro.Access"/></c>
		<meta><m n=":optional"/></meta>
	</access>
</a></typedef>
	<enum path="haxe.macro.Access" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<APublic/>
		<APrivate/>
		<AStatic/>
		<AOverride/>
		<ADynamic/>
		<AInline/>
		<AMacro/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<enum path="haxe.macro.FieldType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<FVar a="t:?e">
			<t path="Null"><e path="haxe.macro.ComplexType"/></t>
			<t path="haxe.macro.Expr"/>
		</FVar>
		<FFun a="f"><t path="haxe.macro.Function"/></FFun>
		<FProp a="get:set:?t:?e">
			<c path="String"/>
			<c path="String"/>
			<e path="haxe.macro.ComplexType"/>
			<t path="haxe.macro.Expr"/>
		</FProp>
	</enum>
	<typedef path="haxe.macro.TypeDefinition" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Expr.hx" module="haxe.macro.Expr"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params>
		<c path="Array"><t path="haxe.macro.TypeParamDecl"/></c>
		<meta><m n=":optional"/></meta>
	</params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<meta>
		<t path="haxe.macro.Metadata"/>
		<meta><m n=":optional"/></meta>
	</meta>
	<kind><e path="haxe.macro.TypeDefKind"/></kind>
	<isExtern>
		<t path="Null"><x path="Bool"/></t>
		<meta><m n=":optional"/></meta>
	</isExtern>
	<fields><c path="Array"><t path="haxe.macro.Field"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.Ref" params="T" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<toString set="method"><f a=""><c path="String"/></f></toString>
	<get set="method"><f a=""><c path="haxe.macro.Ref.T"/></f></get>
</a></typedef>
	<enum path="haxe.macro.Type" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx">
		<TMono a="t"><t path="haxe.macro.Ref"><t path="Null"><e path="haxe.macro.Type"/></t></t></TMono>
		<TEnum a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.EnumType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TEnum>
		<TInst a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TInst>
		<TType a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.DefType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TType>
		<TFun a="args:ret">
			<c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<opt><x path="Bool"/></opt>
	<name><c path="String"/></name>
</a></c>
			<e path="haxe.macro.Type"/>
		</TFun>
		<TAnonymous a="a"><t path="haxe.macro.Ref"><t path="haxe.macro.AnonType"/></t></TAnonymous>
		<TDynamic a="t"><t path="Null"><e path="haxe.macro.Type"/></t></TDynamic>
		<TLazy a="f"><f a=""><e path="haxe.macro.Type"/></f></TLazy>
		<TAbstract a="t:params">
			<t path="haxe.macro.Ref"><t path="haxe.macro.AbstractType"/></t>
			<c path="Array"><e path="haxe.macro.Type"/></c>
		</TAbstract>
	</enum>
	<typedef path="haxe.macro.AnonType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<status><e path="haxe.macro.AnonStatus"/></status>
	<fields><c path="Array"><t path="haxe.macro.ClassField"/></c></fields>
</a></typedef>
	<typedef path="haxe.macro.TypeParameter" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
</a></typedef>
	<typedef path="haxe.macro.BaseType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassField" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.FieldKind"/></kind>
	<isPublic><x path="Bool"/></isPublic>
	<expr set="method"><f a=""><t path="Null"><t path="haxe.macro.TypedExpr"/></t></f></expr>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.ClassType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<superClass><t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t></superClass>
	<statics><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></statics>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<overrides><c path="Array"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></c></overrides>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<kind><e path="haxe.macro.ClassKind"/></kind>
	<isPrivate><x path="Bool"/></isPrivate>
	<isInterface><x path="Bool"/></isInterface>
	<isExtern><x path="Bool"/></isExtern>
	<interfaces><c path="Array"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></c></interfaces>
	<init><t path="Null"><t path="haxe.macro.TypedExpr"/></t></init>
	<fields><t path="haxe.macro.Ref"><c path="Array"><t path="haxe.macro.ClassField"/></c></t></fields>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructor><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassField"/></t></t></constructor>
</a></typedef>
	<typedef path="haxe.macro.EnumField" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<name><c path="String"/></name>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<index><x path="Int"/></index>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.EnumType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<names><c path="Array"><c path="String"/></c></names>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<constructs><c path="haxe.ds.StringMap"><t path="haxe.macro.EnumField"/></c></constructs>
</a></typedef>
	<typedef path="haxe.macro.DefType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<type><e path="haxe.macro.Type"/></type>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
</a></typedef>
	<typedef path="haxe.macro.AbstractType" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<unops><c path="Array"><a>
	<postFix><x path="Bool"/></postFix>
	<op><e path="haxe.macro.Unop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></unops>
	<type><e path="haxe.macro.Type"/></type>
	<to><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></to>
	<pos><t path="haxe.macro.Position"/></pos>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<pack><c path="Array"><c path="String"/></c></pack>
	<name><c path="String"/></name>
	<module><c path="String"/></module>
	<meta><t path="haxe.macro.MetaAccess"/></meta>
	<isPrivate><x path="Bool"/></isPrivate>
	<isExtern><x path="Bool"/></isExtern>
	<impl><t path="Null"><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t></impl>
	<from><c path="Array"><a>
	<t><e path="haxe.macro.Type"/></t>
	<field><t path="Null"><t path="haxe.macro.ClassField"/></t></field>
</a></c></from>
	<exclude set="method"><f a=""><x path="Void"/></f></exclude>
	<doc><t path="Null"><c path="String"/></t></doc>
	<binops><c path="Array"><a>
	<op><e path="haxe.macro.Binop"/></op>
	<field><t path="haxe.macro.ClassField"/></field>
</a></c></binops>
	<array><c path="Array"><t path="haxe.macro.ClassField"/></c></array>
</a></typedef>
	<typedef path="haxe.macro.MetaAccess" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type">
		<a>
			<remove set="method">
				<f a="name">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Removes all `name` metadata entries from the origin of `this`
		MetaAccess.

		This method might clear several metadata entries of the same name.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `remove` has no effect on that array.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</remove>
			<has set="method">
				<f a="name">
					<c path="String"/>
					<x path="Bool"/>
				</f>
				<haxe_doc>Tells if the origin of `this` MetaAccess has a `name` metadata entry.

		If `name` is null, compilation fails with an error.</haxe_doc>
			</has>
			<get set="method">
				<f a=""><t path="haxe.macro.Metadata"/></f>
				<haxe_doc>Return the wrapped `Metadata` array.

		Modifying this array has no effect on the origin of `this` MetaAccess.
		The `add` and `remove` methods can be used for that.</haxe_doc>
			</get>
			<add set="method">
				<f a="name:params:pos">
					<c path="String"/>
					<c path="Array"><t path="haxe.macro.Expr"/></c>
					<t path="haxe.macro.Position"/>
					<x path="Void"/>
				</f>
				<haxe_doc>Adds the metadata specified by `name`, `params` and `pos` to the origin
		of `this` MetaAccess.

		Metadata names are not unique during compilation, so this method never
		overwrites a previous metadata.

		If a `Metadata` array is obtained through a call to `get`, a subsequent
		call to `add` has no effect on that array.

		If any argument is null, compilation fails with an error.</haxe_doc>
			</add>
		</a>
		<haxe_doc>MetaAccess is a wrapper for the `Metadata` array. It can be used to add
	metadata to and remove metadata from its origin.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TVar" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<name><c path="String"/></name>
	<id><x path="Int"/></id>
	<extra><t path="Null"><a>
	<params><c path="Array"><t path="haxe.macro.TypeParameter"/></c></params>
	<expr><t path="Null"><t path="haxe.macro.TypedExpr"/></t></expr>
</a></t></extra>
	<capture><x path="Bool"/></capture>
</a></typedef>
	<typedef path="haxe.macro.TFunc" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<expr><t path="haxe.macro.TypedExpr"/></expr>
	<args><c path="Array"><a>
	<value><t path="Null"><e path="haxe.macro.TConstant"/></t></value>
	<v><t path="haxe.macro.TVar"/></v>
</a></c></args>
</a></typedef>
	<typedef path="haxe.macro.TypedExpr" params="" file="C:\Servers\Haxe\haxe\std/haxe/macro/Type.hx" module="haxe.macro.Type"><a>
	<t><e path="haxe.macro.Type"/></t>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.TypedExprDef"/></expr>
</a></typedef>
	<class path="haxe.ui.toolkit.core.interfaces.IModule" params="" file="src/haxe/ui/toolkit/core/interfaces/IModule.hx" interface="1"><init public="1" set="method"><f a=""><x path="Void"/></f></init></class>
	<class path="haxe.ui.toolkit.TestModule" params="" file="src/haxe/ui/toolkit/TestModule.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.IModule"/>
		<init public="1" set="method" line="10"><f a=""><x path="Void"/></f></init>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IClonable" params="T" file="src/haxe/ui/toolkit/core/interfaces/IClonable.hx" interface="1">
		<clone public="1" set="method"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IClonable.T"/></f></clone>
		<self set="method"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IClonable.T"/></f></self>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDrawable" params="" file="src/haxe/ui/toolkit/core/interfaces/IDrawable.hx" interface="1">
		<graphics public="1" get="null" set="null"><t path="openfl.display.Graphics"/></graphics>
		<paint set="method"><f a=""><x path="Void"/></f></paint>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IEventDispatcher" params="" file="src/haxe/ui/toolkit/core/interfaces/IEventDispatcher.hx" interface="1">
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDisplayObject" params="" file="src/haxe/ui/toolkit/core/interfaces/IDisplayObject.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></extends>
		<extends path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/>
		<parent public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></parent>
		<root public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.Root"/></root>
		<id public="1" get="null" set="null"><c path="String"/></id>
		<x public="1" get="null" set="null"><x path="Float"/></x>
		<y public="1" get="null" set="null"><x path="Float"/></y>
		<width public="1" get="null" set="null"><x path="Float"/></width>
		<height public="1" get="null" set="null"><x path="Float"/></height>
		<percentWidth public="1" get="null" set="null"><x path="Float"/></percentWidth>
		<percentHeight public="1" get="null" set="null"><x path="Float"/></percentHeight>
		<ready public="1" get="null" set="null"><x path="Bool"/></ready>
		<sprite public="1" get="null" set="null"><t path="openfl.display.Sprite"/></sprite>
		<stageX public="1" get="null" set="null"><x path="Float"/></stageX>
		<stageY public="1" get="null" set="null"><x path="Float"/></stageY>
		<visible public="1" get="null" set="null"><x path="Bool"/></visible>
		<hitTest public="1" set="method"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitTest>
		<invalidate public="1" set="method"><f a="?type:?recursive">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<dispose public="1" set="method"><f a=""><x path="Void"/></f></dispose>
		<horizontalAlign public="1" get="null" set="null"><c path="String"/></horizontalAlign>
		<verticalAlign public="1" get="null" set="null"><c path="String"/></verticalAlign>
	</class>
	<class path="haxe.ui.toolkit.core.DisplayObject" params="" file="src/haxe/ui/toolkit/core/DisplayObject.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.DisplayObject"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IDrawable"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/>
		<_parent><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_parent>
		<_root><c path="haxe.ui.toolkit.core.Root"/></_root>
		<_id><c path="String"/></_id>
		<_x><x path="Float"/></_x>
		<_y><x path="Float"/></_y>
		<_width><x path="Float"/></_width>
		<_height><x path="Float"/></_height>
		<_percentWidth><x path="Float"/></_percentWidth>
		<_percentHeight><x path="Float"/></_percentHeight>
		<_ready><x path="Bool"/></_ready>
		<_invalidating><x path="Bool"/></_invalidating>
		<_sprite><t path="openfl.display.Sprite"/></_sprite>
		<_halign><c path="String"/></_halign>
		<_valign><c path="String"/></_valign>
		<_eventListeners><c path="haxe.ds.StringMap"><c path="List"><f a="">
	<d/>
	<x path="Void"/>
</f></c></c></_eventListeners>
		<preInitialize set="method" line="59"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="62"><f a=""><x path="Void"/></f></initialize>
		<postInitialize set="method" line="65"><f a=""><x path="Void"/></f></postInitialize>
		<_onAddedToStage set="method" line="70"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onAddedToStage>
		<parent public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></parent>
		<root public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.Root"/></root>
		<id public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</id>
		<x public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</x>
		<y public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</y>
		<width public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</width>
		<height public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</height>
		<percentWidth public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</percentWidth>
		<percentHeight public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
		</percentHeight>
		<ready public="1" get="accessor" set="null"><x path="Bool"/></ready>
		<sprite public="1" get="accessor" set="null"><t path="openfl.display.Sprite"/></sprite>
		<stageX public="1" get="accessor" set="null"><x path="Float"/></stageX>
		<stageY public="1" get="accessor" set="null"><x path="Float"/></stageY>
		<visible public="1" get="accessor" set="accessor"><x path="Bool"/></visible>
		<horizontalAlign public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</horizontalAlign>
		<verticalAlign public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</verticalAlign>
		<get_parent set="method" line="115"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_parent>
		<set_parent set="method" line="119"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></set_parent>
		<get_root set="method" line="124"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></get_root>
		<set_root set="method" line="128"><f a="value">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></set_root>
		<get_id set="method" line="133"><f a=""><c path="String"/></f></get_id>
		<set_id set="method" line="137"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<get_x set="method" line="142"><f a=""><x path="Float"/></f></get_x>
		<set_x set="method" line="146"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<get_y set="method" line="152"><f a=""><x path="Float"/></f></get_y>
		<set_y set="method" line="156"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<get_width set="method" line="162"><f a=""><x path="Float"/></f></get_width>
		<set_width set="method" line="166"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<get_height set="method" line="184"><f a=""><x path="Float"/></f></get_height>
		<set_height set="method" line="188"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_height>
		<get_percentWidth set="method" line="206"><f a=""><x path="Float"/></f></get_percentWidth>
		<set_percentWidth set="method" line="210"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_percentWidth>
		<get_percentHeight set="method" line="223"><f a=""><x path="Float"/></f></get_percentHeight>
		<set_percentHeight set="method" line="227"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_percentHeight>
		<get_ready set="method" line="240"><f a=""><x path="Bool"/></f></get_ready>
		<get_sprite set="method" line="244"><f a=""><t path="openfl.display.Sprite"/></f></get_sprite>
		<get_stageX set="method" line="249"><f a=""><x path="Float"/></f></get_stageX>
		<get_stageY set="method" line="263"><f a=""><x path="Float"/></f></get_stageY>
		<get_visible set="method" line="277"><f a=""><x path="Bool"/></f></get_visible>
		<set_visible set="method" line="281"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<get_horizontalAlign set="method" line="289"><f a=""><c path="String"/></f></get_horizontalAlign>
		<set_horizontalAlign set="method" line="293"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_horizontalAlign>
		<get_verticalAlign set="method" line="301"><f a=""><c path="String"/></f></get_verticalAlign>
		<set_verticalAlign set="method" line="305"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_verticalAlign>
		<hitTest public="1" set="method" line="313"><f a="xpos:ypos">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></hitTest>
		<invalidate public="1" set="method" line="324"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<dispose public="1" set="method" line="339"><f a=""><x path="Void"/></f></dispose>
		<interceptEvent set="method" line="344"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></interceptEvent>
		<addEventListener public="1" set="method" line="357"><f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method" line="379"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<hasEventListener public="1" set="method" line="386"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<removeEventListener public="1" set="method" line="390"><f a="type:listener:?useCapture" v="::false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<willTrigger public="1" set="method" line="407"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></willTrigger>
		<graphics public="1" get="accessor" set="null"><t path="openfl.display.Graphics"/></graphics>
		<get_graphics set="method" line="416"><f a=""><t path="openfl.display.Graphics"/></f></get_graphics>
		<paint set="method" line="420"><f a=""><x path="Void"/></f></paint>
		<removeEventListenerType public="1" set="method" line="432"><f a="eventType">
	<c path="String"/>
	<x path="Void"/>
</f></removeEventListenerType>
		<removeAllEventListeners set="method" line="443"><f a=""><x path="Void"/></f></removeAllEventListeners>
		<getListenerCount set="method" line="455"><f a="type:listener">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Int"/>
</f></getListenerCount>
		<_handleEvent set="method" line="471"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_handleEvent>
		<onInit public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onInit>
		<set_onInit set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onInit>
		<onResize public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onResize>
		<set_onResize set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onResize>
		<onReady public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onReady>
		<set_onReady set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onReady>
		<onClick public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onClick>
		<set_onClick set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onClick>
		<onMouseDown public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onMouseDown>
		<set_onMouseDown set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onMouseDown>
		<onMouseUp public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onMouseUp>
		<set_onMouseUp set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onMouseUp>
		<onMouseOver public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onMouseOver>
		<set_onMouseOver set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onMouseOver>
		<onMouseOut public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onMouseOut>
		<set_onMouseOut set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onMouseOut>
		<onMouseMove public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onMouseMove>
		<set_onMouseMove set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onMouseMove>
		<onDoubleClick public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onDoubleClick>
		<set_onDoubleClick set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onDoubleClick>
		<onRollOver public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onRollOver>
		<set_onRollOver set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onRollOver>
		<onRollOut public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onRollOut>
		<set_onRollOut set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onRollOut>
		<onChange public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onChange>
		<set_onChange set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onChange>
		<onScroll public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onScroll>
		<set_onScroll set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onScroll>
		<onAdded public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onAdded>
		<set_onAdded set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onAdded>
		<onAddedToStage public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onAddedToStage>
		<set_onAddedToStage set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onAddedToStage>
		<onRemoved public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onRemoved>
		<set_onRemoved set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onRemoved>
		<onRemovedFromStage public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onRemovedFromStage>
		<set_onRemovedFromStage set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onRemovedFromStage>
		<onActivate public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onActivate>
		<set_onActivate set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onActivate>
		<onDeactivate public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onDeactivate>
		<set_onDeactivate set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onDeactivate>
		<onGlyphClick public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onGlyphClick>
		<set_onGlyphClick set="method" line="17">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onGlyphClick>
		<clone public="1" set="method" line="1"><f a=""><c path="haxe.ui.toolkit.core.DisplayObject"/></f></clone>
		<self set="method" line="1"><f a=""><c path="haxe.ui.toolkit.core.DisplayObject"/></f></self>
		<new public="1" set="method" line="49"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.INIT"</e>
				<e>"Dispatched when the display object has been initialized"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.READY"</e>
				<e>"Dispatched when the display object is ready"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.ADDED_TO_STAGE"</e>
				<e>"Dispatched when a display object is added to the on stage display list"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.REMOVED_FROM_STAGE"</e>
				<e>"Dispatched when a display object is about to be removed from the display list"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.RESIZE"</e>
				<e>"Dispatched when the display object has been resized"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer" params="" file="src/haxe/ui/toolkit/core/interfaces/IDisplayObjectContainer.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
		<numChildren public="1" get="null" set="null"><x path="Int"/></numChildren>
		<children public="1" get="null" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></children>
		<indexOfChild public="1" set="method"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
</f></indexOfChild>
		<getChildAt public="1" set="method"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></getChildAt>
		<addChildAt public="1" set="method"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<removeChild public="1" set="method"><f a="child:?dispose">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method"><f a="index:?dispose">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChildAt>
		<findChild public="1" params="T" set="method"><f a="id:?type:?recursive">
	<c path="String"/>
	<x path="Class"><c path="findChild.T"/></x>
	<x path="Bool"/>
	<t path="Null"><c path="findChild.T"/></t>
</f></findChild>
		<findChildAs public="1" params="T" set="method"><f a="type">
	<x path="Class"><c path="findChildAs.T"/></x>
	<t path="Null"><c path="findChildAs.T"/></t>
</f></findChildAs>
		<removeAllChildren public="1" set="method"><f a="?dispose">
	<x path="Bool"/>
	<x path="Void"/>
</f></removeAllChildren>
		<contains public="1" set="method"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<setChildIndex public="1" set="method"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<layout public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></layout>
		<autoSize public="1" get="null" set="null"><x path="Bool"/></autoSize>
	</class>
	<class path="haxe.ui.toolkit.core.DisplayObjectContainer" params="" file="src/haxe/ui/toolkit/core/DisplayObjectContainer.hx">
		<extends path="haxe.ui.toolkit.core.DisplayObject"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.DisplayObjectContainer"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
		<_children><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></_children>
		<_layout><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></_layout>
		<_autoSize><x path="Bool"/></_autoSize>
		<initialize set="method" line="29" override="1"><f a=""><x path="Void"/></f></initialize>
		<invalidate public="1" set="method" line="44" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<numChildren public="1" get="accessor" set="null"><x path="Int"/></numChildren>
		<layout public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></layout>
		<children public="1" get="accessor" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></children>
		<autoSize public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</autoSize>
		<get_numChildren set="method" line="73"><f a=""><x path="Int"/></f></get_numChildren>
		<get_children set="method" line="83"><f a=""><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></f></get_children>
		<indexOfChild public="1" set="method" line="93"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
</f></indexOfChild>
		<getChildAt public="1" set="method" line="98"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></getChildAt>
		<addChildAt public="1" set="method" line="106"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<addChild public="1" set="method" line="134"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<removeChild public="1" set="method" line="162"><f a="child:?dispose" v=":true">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<removeChildAt public="1" set="method" line="187"><f a="index:?dispose" v=":true">
	<x path="Int"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChildAt>
		<removeAllChildren public="1" set="method" line="191"><f a="?dispose" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></removeAllChildren>
		<contains public="1" set="method" line="205"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
</f></contains>
		<setChildIndex public="1" set="method" line="218"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<x path="Void"/>
</f></setChildIndex>
		<findChildAs public="1" params="T" set="method" line="230"><f a="type">
	<x path="Class"><c path="findChildAs.T"/></x>
	<t path="Null"><c path="findChildAs.T"/></t>
</f></findChildAs>
		<findChild public="1" params="T" set="method" line="241"><f a="id:?type:?recursive" v=":null:false">
	<c path="String"/>
	<x path="Class"><c path="findChild.T"/></x>
	<x path="Bool"/>
	<t path="Null"><c path="findChild.T"/></t>
</f></findChild>
		<findComponentUnderPoint public="1" set="method" line="264"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></findComponentUnderPoint>
		<get_layout set="method" line="275"><f a=""><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></f></get_layout>
		<set_layout set="method" line="279"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
</f></set_layout>
		<get_autoSize set="method" line="289"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize set="method" line="293"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<dispose public="1" set="method" line="304" override="1"><f a=""><x path="Void"/></f></dispose>
		<set_root set="method" line="317" override="1"><f a="value">
	<c path="haxe.ui.toolkit.core.Root"/>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></set_root>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.DisplayObjectContainer"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.DisplayObjectContainer"/></f></self>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject" params="" file="src/haxe/ui/toolkit/core/interfaces/IStyleableDisplayObject.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
		<id public="1" get="null" set="null"><c path="String"/></id>
		<style public="1" get="null" set="null"><c path="haxe.ui.toolkit.style.Style"/></style>
		<styleName public="1" get="null" set="null"><c path="String"/></styleName>
		<storeStyle set="method"><f a="id:value">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<x path="Void"/>
</f></storeStyle>
		<retrieveStyle set="method"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></retrieveStyle>
		<applyStyle public="1" set="method"><f a=""><x path="Void"/></f></applyStyle>
		<buildStyles set="method"><f a=""><x path="Void"/></f></buildStyles>
	</class>
	<class path="haxe.ui.toolkit.core.StyleableDisplayObject" params="" file="src/haxe/ui/toolkit/core/StyleableDisplayObject.hx">
		<extends path="haxe.ui.toolkit.core.DisplayObjectContainer"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.StyleableDisplayObject"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject"/>
		<_style><c path="haxe.ui.toolkit.style.Style"/></_style>
		<_storedStyles><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.style.Style"/></c></_storedStyles>
		<_styleName><c path="String"/></_styleName>
		<_inlineStyle><c path="haxe.ui.toolkit.style.Style"/></_inlineStyle>
		<_setStyle><c path="haxe.ui.toolkit.style.Style"/></_setStyle>
		<preInitialize set="method" line="27" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<paint public="1" set="method" line="34" override="1"><f a=""><x path="Void"/></f></paint>
		<invalidate public="1" set="method" line="44" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<set_id set="method" line="55" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<set_layout set="method" line="69" override="1"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
	<c path="haxe.ui.toolkit.core.interfaces.ILayout"/>
</f></set_layout>
		<style public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.style.Style"/></style>
		<styleName public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</styleName>
		<inlineStyle public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.style.Style"/></inlineStyle>
		<get_style set="method" line="105"><f a=""><c path="haxe.ui.toolkit.style.Style"/></f></get_style>
		<set_style set="method" line="113"><f a="value">
	<c path="haxe.ui.toolkit.style.Style"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></set_style>
		<get_styleName set="method" line="120"><f a=""><c path="String"/></f></get_styleName>
		<set_styleName set="method" line="124"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_styleName>
		<get_inlineStyle set="method" line="135"><f a=""><c path="haxe.ui.toolkit.style.Style"/></f></get_inlineStyle>
		<set_inlineStyle set="method" line="142"><f a="value">
	<c path="haxe.ui.toolkit.style.Style"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></set_inlineStyle>
		<storeStyle public="1" set="method" line="156"><f a="id:value">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<x path="Void"/>
</f></storeStyle>
		<retrieveStyle public="1" set="method" line="163"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></retrieveStyle>
		<applyStyle public="1" set="method" line="170"><f a=""><x path="Void"/></f></applyStyle>
		<buildStyles set="method" line="204"><f a=""><x path="Void"/></f></buildStyles>
		<refreshStyle set="method" line="208"><f a=""><x path="Void"/></f></refreshStyle>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.StyleableDisplayObject"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.StyleableDisplayObject"/></f></self>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IComponent" params="" file="src/haxe/ui/toolkit/core/interfaces/IComponent.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IStyleableDisplayObject"/>
		<text public="1" get="null" set="null"><c path="String"/></text>
		<clipWidth public="1" get="null" set="null"><x path="Float"/></clipWidth>
		<clipHeight public="1" get="null" set="null"><x path="Float"/></clipHeight>
		<clipContent public="1" get="null" set="null"><x path="Bool"/></clipContent>
		<disabled public="1" get="null" set="null"><x path="Bool"/></disabled>
		<userData public="1"><d/></userData>
	</class>
	<class path="haxe.ui.toolkit.core.Component" params="" file="src/haxe/ui/toolkit/core/Component.hx">
		<extends path="haxe.ui.toolkit.core.StyleableDisplayObject"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.StyleableDisplayObject"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IComponent"/>
		<_text><c path="String"/></_text>
		<_clipContent><x path="Bool"/></_clipContent>
		<_disabled><x path="Bool"/></_disabled>
		<initialize set="method" line="27" override="1"><f a=""><x path="Void"/></f></initialize>
		<postInitialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></postInitialize>
		<invalidate public="1" set="method" line="40" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<text public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</text>
		<clipWidth public="1" get="accessor" set="accessor"><x path="Float"/></clipWidth>
		<clipHeight public="1" get="accessor" set="accessor"><x path="Float"/></clipHeight>
		<clipContent public="1" get="accessor" set="accessor"><x path="Bool"/></clipContent>
		<disabled public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</disabled>
		<userData public="1">
			<d/>
			<meta><m n=":clonable"/></meta>
		</userData>
		<value public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":clonable"/></meta>
		</value>
		<get_text set="method" line="68"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="72"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_clipWidth set="method" line="87"><f a=""><x path="Float"/></f></get_clipWidth>
		<set_clipWidth set="method" line="94"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_clipWidth>
		<get_clipHeight set="method" line="99"><f a=""><x path="Float"/></f></get_clipHeight>
		<set_clipHeight set="method" line="106"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_clipHeight>
		<get_clipContent set="method" line="111"><f a=""><x path="Bool"/></f></get_clipContent>
		<set_clipContent set="method" line="115"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_clipContent>
		<clearClip public="1" set="method" line="124"><f a=""><x path="Void"/></f></clearClip>
		<get_disabled set="method" line="128"><f a=""><x path="Bool"/></f></get_disabled>
		<set_disabled set="method" line="132"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_disabled>
		<get_value set="method" line="190"><f a=""><d/></f></get_value>
		<set_value set="method" line="194"><f a="newValue">
	<d/>
	<d/>
</f></set_value>
		<_cachedListeners><c path="haxe.ds.StringMap"><c path="List"><f a="">
	<d/>
	<x path="Void"/>
</f></c></c></_cachedListeners>
		<addEventListener public="1" set="method" line="203" override="1"><f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<removeEventListener public="1" set="method" line="219" override="1"><f a="type:listener:?useCapture" v="::false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<disablableEventType set="method" line="235"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></disablableEventType>
		<mouseDownPos><t path="openfl.geom.Point"/></mouseDownPos>
		<_onComponentMouseDown set="method" line="249"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseDown>
		<_onComponentMouseUp set="method" line="261"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseUp>
		<_onComponentMouseMove set="method" line="266"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onComponentMouseMove>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.Component"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.Component"/></f></self>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Container" params="" file="src/haxe/ui/toolkit/containers/Container.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.Container"/></implements>
		<clone public="1" set="method" line="14" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Container"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Container"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Absolute" params="" file="src/haxe/ui/toolkit/containers/Absolute.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.Absolute"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Absolute"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Absolute"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.VBox" params="" file="src/haxe/ui/toolkit/containers/VBox.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.VBox"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.VBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.VBox"/></f></self>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Vertical layout container</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Accordion" params="" file="src/haxe/ui/toolkit/containers/Accordion.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.Accordion"/></implements>
		<_panels><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></c></_panels>
		<_buttons><c path="Array"><c path="haxe.ui.toolkit.containers.AccordionButton"/></c></_buttons>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<initialize public="1" set="method" line="32" override="1"><f a=""><x path="Void"/></f></initialize>
		<addChild public="1" set="method" line="45" override="1">
			<f a="child">
				<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
				<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
			</f>
			<haxe_doc>Adds a panel to the accordion, the childs `text` property will be used as the title</haxe_doc>
		</addChild>
		<removeChild public="1" set="method" line="87" override="1"><f a="child:?dispose" v=":true">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<get_selectedIndex set="method" line="101"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="105"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<selectedButton public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.Button"/></selectedButton>
		<get_selectedButton set="method" line="118"><f a=""><c path="haxe.ui.toolkit.controls.Button"/></f></get_selectedButton>
		<getButton public="1" set="method" line="127"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</f></getButton>
		<showPage public="1" set="method" line="131"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></showPage>
		<_onButtonClick set="method" line="136"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onButtonClick>
		<showPanel set="method" line="142"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></showPanel>
		<unselectButton set="method" line="189">
			<f a="button">
				<c path="haxe.ui.toolkit.controls.Button"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Unselects button without triggering hidePanel()</haxe_doc>
		</unselectButton>
		<_onTweenUpdate set="method" line="195"><f a="ucy:panel:panelOld">
	<x path="Float"/>
	<c path="haxe.ui.toolkit.core.Component"/>
	<c path="haxe.ui.toolkit.core.Component"/>
	<x path="Void"/>
</f></_onTweenUpdate>
		<_onTweenComplete set="method" line="202"><f a="panel:panelOld:buttonOld">
	<c path="haxe.ui.toolkit.core.Component"/>
	<c path="haxe.ui.toolkit.core.Component"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
	<x path="Void"/>
</f></_onTweenComplete>
		<clone public="1" set="method" line="214" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Accordion"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Accordion"/></f></self>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Basic, animated accordion container</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IStateComponent" params="" file="src/haxe/ui/toolkit/core/interfaces/IStateComponent.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IComponent"/>
		<state public="1" get="null" set="null"><c path="String"/></state>
		<states public="1" get="null" set="null"><c path="Array"><c path="String"/></c></states>
		<hasState public="1" set="method"><f a="state">
	<c path="String"/>
	<x path="Bool"/>
</f></hasState>
	</class>
	<class path="haxe.ui.toolkit.core.StateComponent" params="" file="src/haxe/ui/toolkit/core/StateComponent.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.StateComponent"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IStateComponent"/>
		<_state><c path="String"/></_state>
		<_states><c path="Array"><c path="String"/></c></_states>
		<buildStyles set="method" line="21" override="1"><f a=""><x path="Void"/></f></buildStyles>
		<addStates public="1" set="method" line="31"><f a="stateNames:?rebuildStyles" v=":true">
	<c path="Array"><c path="String"/></c>
	<x path="Bool"/>
	<x path="Void"/>
</f></addStates>
		<addState public="1" set="method" line="40"><f a="stateName:?rebuildStyles" v=":true">
	<c path="String"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addState>
		<state public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</state>
		<states public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></states>
		<get_state set="method" line="56"><f a=""><c path="String"/></f></get_state>
		<set_state set="method" line="60"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<get_states set="method" line="72"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<hasState public="1" set="method" line="76"><f a="state">
	<c path="String"/>
	<x path="Bool"/>
</f></hasState>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.StateComponent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.StateComponent"/></f></self>
		<new public="1" set="method" line="13"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IFocusable" params="" file="src/haxe/ui/toolkit/core/interfaces/IFocusable.hx" interface="1"><allowFocus public="1" get="null" set="null"><x path="Bool"/></allowFocus></class>
	<class path="haxe.ui.toolkit.controls.Button" params="" file="src/haxe/ui/toolkit/controls/Button.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.StateComponent"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IFocusable"/>
		<STATE_NORMAL public="1" get="inline" set="null" line="48" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "normal" (default state)</haxe_doc>
		</STATE_NORMAL>
		<STATE_OVER public="1" get="inline" set="null" line="52" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "over"</haxe_doc>
		</STATE_OVER>
		<STATE_DOWN public="1" get="inline" set="null" line="56" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "down"</haxe_doc>
		</STATE_DOWN>
		<STATE_DISABLED public="1" get="inline" set="null" line="60" static="1">
			<c path="String"/>
			<haxe_doc>Button state is "disabled"</haxe_doc>
		</STATE_DISABLED>
		<_groups static="1"><c path="haxe.ds.StringMap"><c path="Array"><c path="haxe.ui.toolkit.controls.Button"/></c></c></_groups>
		<optionInGroup set="method" line="574" static="1"><f a="value:option">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
	<x path="Bool"/>
</f></optionInGroup>
		<_allowFocus><x path="Bool"/></_allowFocus>
		<_remainPressed><x path="Bool"/></_remainPressed>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_icon><c path="haxe.ui.toolkit.controls.Image"/></_icon>
		<_down><x path="Bool"/></_down>
		<_toggle><x path="Bool"/></_toggle>
		<_selected><x path="Bool"/></_selected>
		<_allowSelection><x path="Bool"/></_allowSelection>
		<_iconPosition><c path="String"/></_iconPosition>
		<_multiline><x path="Bool"/></_multiline>
		<_group><c path="String"/></_group>
		<_spacers><c path="Array"><c path="haxe.ui.toolkit.controls.Spacer"/></c></_spacers>
		<remainPressed public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether this button should remain pressed even when the mouse cursor goes out of the control (and the left mouse button is pressed)</haxe_doc>
		</remainPressed>
		<icon public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Sets the icon asset. Eg: `assets/myicon.png`</haxe_doc>
		</icon>
		<get_remainPressed set="method" line="109"><f a=""><x path="Bool"/></f></get_remainPressed>
		<set_remainPressed set="method" line="113"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_remainPressed>
		<get_icon set="method" line="118"><f a=""><d/></f></get_icon>
		<set_icon set="method" line="125"><f a="value">
	<d/>
	<d/>
</f></set_icon>
		<organiseChildren set="method" line="143"><f a=""><x path="Void"/></f></organiseChildren>
		<preInitialize set="method" line="227" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="231" override="1"><f a=""><x path="Void"/></f></initialize>
		<set_disabled set="method" line="243" override="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_disabled>
		<get_text set="method" line="260" override="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="267" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<_onMouseOver set="method" line="290"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOver>
		<_onMouseOut set="method" line="300"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOut>
		<_onMouseDown set="method" line="310"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onMouseUp set="method" line="318"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseUp>
		<_onMouseClick set="method" line="337"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<get_states set="method" line="354" override="1"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<set_state set="method" line="358" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<allowFocus public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether or not the button can receive focus by tabbing to it (not yet implemented)</haxe_doc>
		</allowFocus>
		<get_allowFocus set="method" line="375"><f a=""><x path="Bool"/></f></get_allowFocus>
		<set_allowFocus set="method" line="379"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowFocus>
		<iconPosition public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines where the icon (if available) should be positioned, valid values are:
		 
		 - `left` - left of the label
		 - `top` - top of the label
		 - `center` - center of the button
		 - `right` - right of the label
		 - `bottom` - bottom of the label</haxe_doc>
		</iconPosition>
		<toggle public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether this button should behave as a toggle button. Toggle buttons maintain thier selection, ie, one click to select, another to deselect</haxe_doc>
		</toggle>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Gets or sets the buttons selected state. Only applicable if the button is a toggle button.</haxe_doc>
		</selected>
		<group public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines the group for this button. Toggle buttons belonging to the same group will only ever have a single option selected.</haxe_doc>
		</group>
		<allowSelection public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether this buttons selected state can be modified by the user. Only applicable for toggle buttons.</haxe_doc>
		</allowSelection>
		<dispatchChangeEvents><x path="Bool"/></dispatchChangeEvents>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</multiline>
		<get_iconPosition set="method" line="422"><f a=""><c path="String"/></f></get_iconPosition>
		<set_iconPosition set="method" line="426"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_iconPosition>
		<get_toggle set="method" line="434"><f a=""><x path="Bool"/></f></get_toggle>
		<set_toggle set="method" line="438"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_toggle>
		<get_selected set="method" line="443"><f a=""><x path="Bool"/></f></get_selected>
		<set_selected set="method" line="447"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<get_group set="method" line="488"><f a=""><c path="String"/></f></get_group>
		<set_group set="method" line="492"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_group>
		<get_allowSelection set="method" line="519"><f a=""><x path="Bool"/></f></get_allowSelection>
		<set_allowSelection set="method" line="523"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_allowSelection>
		<get_multiline set="method" line="528"><f a=""><x path="Bool"/></f></get_multiline>
		<set_multiline set="method" line="532"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<applyStyle public="1" set="method" line="544" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Button"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Button"/></f></self>
		<new public="1" set="method" line="80"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[General purpose multi-state button control with icon and toggle support (plus icon positioning)

 <b>Code Example</b>
 <pre>
 var button:Button = new Button();
 button.x = 100;
 button.y = 100;
 button.width = 150;
 button.height = 100;
 button.text = "Button";
 button.id = "theButton";</pre>

 <b>XML Example</b>
 <pre>
 &lt;button id="theButton" text="Button" x="100" y="100" width="150" height="100" /&gt;</pre>]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CLICK"</e>
				<e>"Dispatched when the button is clicked"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.MOUSE_DOWN"</e>
				<e>"Dispatched when a user presses the pointing device button over the button"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.MOUSE_UP"</e>
				<e>"Dispatched when a user releases the pointing device button over the button"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.MOUSE_OVER"</e>
				<e>"Dispatched when the user moves a pointing device over the button"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.MOUSE_OUT"</e>
				<e>"Dispatched when the user moves a pointing device away from the button"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.MOUSE_MOVE"</e>
				<e>"Dispatched when a user moves the pointing device while it is over the button"</e>
			</m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the toggle group changes"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.AccordionButton" params="" file="src/haxe/ui/toolkit/containers/Accordion.hx" module="haxe.ui.toolkit.containers.Accordion">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.AccordionButton"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.AccordionButton"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.AccordionButton"/></f></self>
		<new public="1" set="method" line="226"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Box" params="" file="src/haxe/ui/toolkit/containers/Box.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.Box"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Box"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Box"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.CalendarView" params="" file="src/haxe/ui/toolkit/containers/CalendarView.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<MONTH_NAMES line="11" static="1"><c path="Array"><c path="String"/></c></MONTH_NAMES>
		<_calendar><c path="haxe.ui.toolkit.controls.Calendar"/></_calendar>
		<_prevMonthButton><c path="haxe.ui.toolkit.controls.Button"/></_prevMonthButton>
		<_nextMonthButton><c path="haxe.ui.toolkit.controls.Button"/></_nextMonthButton>
		<_currentMonthYear><c path="haxe.ui.toolkit.controls.Text"/></_currentMonthYear>
		<initialize set="method" line="30" override="1"><f a=""><x path="Void"/></f></initialize>
		<date public="1" get="accessor" set="accessor"><c path="Date"/></date>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<get_date set="method" line="80"><f a=""><c path="Date"/></f></get_date>
		<set_date set="method" line="84"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_date>
		<get_selectedDate set="method" line="89"><f a=""><c path="Date"/></f></get_selectedDate>
		<set_selectedDate set="method" line="93"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<_onPrevClicked set="method" line="101"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onPrevClicked>
		<_onNextClicked set="method" line="106"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onNextClicked>
		<_onDateChanged set="method" line="111"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onDateChanged>
		<displayMonthYear set="method" line="118"><f a=""><x path="Void"/></f></displayMonthYear>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.CalendarView"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.CalendarView"/></f></self>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ContinuousHBox" params="" file="src/haxe/ui/toolkit/containers/ContinuousHBox.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.ContinuousHBox"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ContinuousHBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ContinuousHBox"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ContinuousVBox" params="" file="src/haxe/ui/toolkit/containers/ContinuousVBox.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.ContinuousVBox"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ContinuousVBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ContinuousVBox"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ExpandablePanel" params="" file="src/haxe/ui/toolkit/containers/ExpandablePanel.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<_button><c path="haxe.ui.toolkit.containers.ExpandableButton"/></_button>
		<_panel><c path="haxe.ui.toolkit.containers.VBox"/></_panel>
		<startExpanded><x path="Bool"/></startExpanded>
		<initialize set="method" line="29" override="1"><f a=""><x path="Void"/></f></initialize>
		<addChild public="1" set="method" line="33" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<onClickButton set="method" line="59"><f a="e">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></onClickButton>
		<panelAdded set="method" line="67"><f a="e">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></panelAdded>
		<showPanel public="1" set="method" line="75"><f a=""><x path="Void"/></f></showPanel>
		<hidePanel public="1" set="method" line="97"><f a=""><x path="Void"/></f></hidePanel>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ExpandablePanel"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ExpandablePanel"/></f></self>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* @author TiagoLr
 * @link https://github.com/ProG4mr</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ExpandableButton" params="" file="src/haxe/ui/toolkit/containers/ExpandablePanel.hx" module="haxe.ui.toolkit.containers.ExpandablePanel">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ExpandableButton"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ExpandableButton"/></f></self>
		<new public="1" set="method" line="112"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Grid" params="" file="src/haxe/ui/toolkit/containers/Grid.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.Grid"/></implements>
		<columns public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Number of columns for the grid</haxe_doc>
		</columns>
		<get_columns set="method" line="26"><f a=""><x path="Int"/></f></get_columns>
		<set_columns set="method" line="30"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_columns>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Grid"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Grid"/></f></self>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Grid style layout container</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.HBox" params="" file="src/haxe/ui/toolkit/containers/HBox.hx">
		<extends path="haxe.ui.toolkit.containers.Container"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.containers.HBox"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.HBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.HBox"/></f></self>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontal layout container</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ScrollView" params="" file="src/haxe/ui/toolkit/containers/ScrollView.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<_hscroll><c path="haxe.ui.toolkit.controls.HScroll"/></_hscroll>
		<_vscroll><c path="haxe.ui.toolkit.controls.VScroll"/></_vscroll>
		<_container><c path="haxe.ui.toolkit.containers.Box"/></_container>
		<_showHScroll><x path="Bool"/></_showHScroll>
		<_showVScroll><x path="Bool"/></_showVScroll>
		<_eventTarget><t path="openfl.display.Sprite"/></_eventTarget>
		<_downPos><t path="openfl.geom.Point"/></_downPos>
		<_scrollSensitivity><x path="Int"/></_scrollSensitivity>
		<_autoHideScrolls><x path="Bool"/></_autoHideScrolls>
		<_virtualScrolling><x path="Bool"/></_virtualScrolling>
		<preInitialize set="method" line="59" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="70" override="1"><f a=""><x path="Void"/></f></initialize>
		<postInitialize set="method" line="79" override="1"><f a=""><x path="Void"/></f></postInitialize>
		<addChild public="1" set="method" line="89" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="99" override="1"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<removeChild public="1" set="method" line="109" override="1"><f a="child:?dispose" v=":true">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<dispose public="1" set="method" line="119" override="1"><f a=""><x path="Void"/></f></dispose>
		<virtualScrolling public="1" get="accessor" set="accessor"><x path="Bool"/></virtualScrolling>
		<get_virtualScrolling set="method" line="128"><f a=""><x path="Bool"/></f></get_virtualScrolling>
		<set_virtualScrolling set="method" line="131"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_virtualScrolling>
		<showHScroll public="1" get="accessor" set="accessor"><x path="Bool"/></showHScroll>
		<showVScroll public="1" get="accessor" set="accessor"><x path="Bool"/></showVScroll>
		<get_showHScroll set="method" line="139"><f a=""><x path="Bool"/></f></get_showHScroll>
		<set_showHScroll set="method" line="143"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_showHScroll>
		<get_showVScroll set="method" line="148"><f a=""><x path="Bool"/></f></get_showVScroll>
		<set_showVScroll set="method" line="152"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_showVScroll>
		<hscrollPos public="1" get="accessor" set="accessor"><x path="Float"/></hscrollPos>
		<hscrollMin public="1" get="accessor" set="accessor"><x path="Float"/></hscrollMin>
		<hscrollMax public="1" get="accessor" set="accessor"><x path="Float"/></hscrollMax>
		<hscrollPageSize public="1" get="accessor" set="accessor"><x path="Float"/></hscrollPageSize>
		<get_hscrollPos set="method" line="162"><f a=""><x path="Float"/></f></get_hscrollPos>
		<set_hscrollPos set="method" line="169"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_hscrollPos>
		<get_hscrollMin set="method" line="176"><f a=""><x path="Float"/></f></get_hscrollMin>
		<set_hscrollMin set="method" line="183"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_hscrollMin>
		<get_hscrollMax set="method" line="190"><f a=""><x path="Float"/></f></get_hscrollMax>
		<set_hscrollMax set="method" line="197"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_hscrollMax>
		<get_hscrollPageSize set="method" line="205"><f a=""><x path="Float"/></f></get_hscrollPageSize>
		<set_hscrollPageSize set="method" line="212"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_hscrollPageSize>
		<vscrollPos public="1" get="accessor" set="accessor"><x path="Float"/></vscrollPos>
		<vscrollMin public="1" get="accessor" set="accessor"><x path="Float"/></vscrollMin>
		<vscrollMax public="1" get="accessor" set="accessor"><x path="Float"/></vscrollMax>
		<vscrollPageSize public="1" get="accessor" set="accessor"><x path="Float"/></vscrollPageSize>
		<get_vscrollPos set="method" line="224"><f a=""><x path="Float"/></f></get_vscrollPos>
		<set_vscrollPos set="method" line="231"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollPos>
		<get_vscrollMin set="method" line="238"><f a=""><x path="Float"/></f></get_vscrollMin>
		<set_vscrollMin set="method" line="245"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollMin>
		<get_vscrollMax set="method" line="252"><f a=""><x path="Float"/></f></get_vscrollMax>
		<set_vscrollMax set="method" line="259"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollMax>
		<get_vscrollPageSize set="method" line="267"><f a=""><x path="Float"/></f></get_vscrollPageSize>
		<set_vscrollPageSize set="method" line="274"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollPageSize>
		<invalidate public="1" set="method" line="285" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<_onHScrollChange set="method" line="303"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onHScrollChange>
		<_onVScrollChange set="method" line="309"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onVScrollChange>
		<_onMouseWheel set="method" line="315"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseWheel>
		<_onMouseDown set="method" line="340"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScreenMouseMove set="method" line="365"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onScreenMouseUp set="method" line="406"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<checkScrolls set="method" line="423"><f a=""><x path="Void"/></f></checkScrolls>
		<createHScroll set="method" line="509"><f a="?invalidateLayout" v="false">
	<x path="Bool"/>
	<x path="Bool"/>
</f></createHScroll>
		<createVScroll set="method" line="534"><f a="?invalidateLayout" v="false">
	<x path="Bool"/>
	<x path="Bool"/>
</f></createVScroll>
		<updateScrollRect set="method" line="557"><f a=""><x path="Void"/></f></updateScrollRect>
		<resizeEventTarget set="method" line="583"><f a=""><x path="Void"/></f></resizeEventTarget>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ScrollView"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ScrollView"/></f></self>
		<new public="1" set="method" line="42"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDataComponent" params="" file="src/haxe/ui/toolkit/core/interfaces/IDataComponent.hx" interface="1"><dataSource public="1" get="null" set="null"><c path="haxe.ui.toolkit.data.IDataSource"/></dataSource></class>
	<class path="haxe.ui.toolkit.containers.ListView" params="" file="src/haxe/ui/toolkit/containers/ListView.hx">
		<extends path="haxe.ui.toolkit.containers.ScrollView"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDataComponent"/>
		<_dataSource><c path="haxe.ui.toolkit.data.IDataSource"/></_dataSource>
		<_content><c path="haxe.ui.toolkit.containers.VBox"/></_content>
		<_selectedItems><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c></_selectedItems>
		<_lastSelection><x path="Int"/></_lastSelection>
		<_itemRenderer><d/></_itemRenderer>
		<initialize set="method" line="48" override="1"><f a=""><x path="Void"/></f></initialize>
		<dispose public="1" set="method" line="61" override="1"><f a=""><x path="Void"/></f></dispose>
		<addChild public="1" set="method" line="68" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="76" override="1"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<listSize public="1" get="accessor" set="null"><x path="Int"/></listSize>
		<itemHeight public="1" get="accessor" set="null"><x path="Float"/></itemHeight>
		<selectedItems public="1" get="accessor" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c></selectedItems>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<content public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Component"/></content>
		<itemRenderer public="1" get="accessor" set="accessor"><d/></itemRenderer>
		<get_listSize set="method" line="90"><f a=""><x path="Int"/></f></get_listSize>
		<get_itemHeight set="method" line="94"><f a=""><x path="Float"/></f></get_itemHeight>
		<getItem public="1" set="method" line="114"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
</f></getItem>
		<get_selectedItems set="method" line="118"><f a=""><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c></f></get_selectedItems>
		<get_selectedIndex set="method" line="122"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="130"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_content set="method" line="152"><f a=""><c path="haxe.ui.toolkit.core.Component"/></f></get_content>
		<get_itemRenderer set="method" line="160"><f a=""><d/></f></get_itemRenderer>
		<set_itemRenderer set="method" line="164"><f a="value">
	<d/>
	<d/>
</f></set_itemRenderer>
		<dataSource public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.data.IDataSource"/></dataSource>
		<get_dataSource set="method" line="174"><f a=""><c path="haxe.ui.toolkit.data.IDataSource"/></f></get_dataSource>
		<set_dataSource set="method" line="178"><f a="value">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></set_dataSource>
		<_onDataSourceChanged set="method" line="198"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onDataSourceChanged>
		<syncUI set="method" line="205"><f a=""><x path="Void"/></f></syncUI>
		<addListViewItem set="method" line="252"><f a="dataHash:data:?index" v="::-1">
	<c path="String"/>
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></addListViewItem>
		<removeListViewItem set="method" line="281"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></removeListViewItem>
		<_onListItemMouseOver set="method" line="293"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onListItemMouseOver>
		<_onListItemMouseOut set="method" line="299"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onListItemMouseOut>
		<_onListItemClick set="method" line="310"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onListItemClick>
		<handleListSelection set="method" line="320"><f a="item:event:?raiseEvent" v="::true">
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></handleListSelection>
		<handleClick set="method" line="365"><f a="item">
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
	<x path="Void"/>
</f></handleClick>
		<isSelected public="1" set="method" line="376"><f a="item">
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
	<x path="Bool"/>
</f></isSelected>
		<getItemIndex public="1" set="method" line="383"><f a="item">
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
	<x path="Int"/>
</f></getItemIndex>
		<setSelectedIndexNoEvent public="1" set="method" line="391"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></setSelectedIndexNoEvent>
		<ensureVisible public="1" set="method" line="404"><f a="item">
	<c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
	<x path="Void"/>
</f></ensureVisible>
		<createRendererInstance set="method" line="419"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></f></createRendererInstance>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ListView"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ListView"/></f></self>
		<onComponentEvent public="1" set="accessor">
			<f a="">
				<c path="haxe.ui.toolkit.events.UIEvent"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</onComponentEvent>
		<set_onComponentEvent set="method" line="19">
			<f a="value">
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
				<f a="">
					<c path="haxe.ui.toolkit.events.UIEvent"/>
					<x path="Void"/>
				</f>
			</f>
			<meta><m n="exclude"/></meta>
		</set_onComponentEvent>
		<new public="1" set="method" line="32"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":build"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.MenuBar" params="" file="src/haxe/ui/toolkit/containers/MenuBar.hx">
		<extends path="haxe.ui.toolkit.containers.HBox"/>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.MenuBar"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.MenuBar"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Simple menu bar container</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.ILayout" params="" file="src/haxe/ui/toolkit/core/interfaces/ILayout.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.interfaces.ILayout"/></extends>
		<container public="1" get="null" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></container>
		<padding public="1" get="null" set="null"><t path="openfl.geom.Rectangle"/></padding>
		<spacingX public="1" get="null" set="null"><x path="Int"/></spacingX>
		<spacingY public="1" get="null" set="null"><x path="Int"/></spacingY>
		<innerWidth public="1" get="null" set="null"><x path="Float"/></innerWidth>
		<innerHeight public="1" get="null" set="null"><x path="Float"/></innerHeight>
		<usableWidth public="1" get="null" set="null"><x path="Float"/></usableWidth>
		<usableHeight public="1" get="null" set="null"><x path="Float"/></usableHeight>
		<refresh public="1" set="method"><f a=""><x path="Void"/></f></refresh>
		<resizeChildren set="method"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method"><f a=""><x path="Void"/></f></repositionChildren>
	</class>
	<class path="haxe.ui.toolkit.layout.Layout" params="" file="src/haxe/ui/toolkit/layout/Layout.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.layout.Layout"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.ILayout"/>
		<_container><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_container>
		<_padding><t path="openfl.geom.Rectangle"/></_padding>
		<_spacingX><x path="Int"/></_spacingX>
		<_spacingY><x path="Int"/></_spacingY>
		<container public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></container>
		<padding public="1" get="accessor" set="accessor">
			<t path="openfl.geom.Rectangle"/>
			<meta><m n=":clonable"/></meta>
		</padding>
		<spacingX public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":clonable"/></meta>
		</spacingX>
		<spacingY public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":clonable"/></meta>
		</spacingY>
		<get_container set="method" line="31"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_container>
		<set_container set="method" line="35"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></set_container>
		<get_padding set="method" line="41"><f a=""><t path="openfl.geom.Rectangle"/></f></get_padding>
		<set_padding set="method" line="45"><f a="value">
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
</f></set_padding>
		<get_spacingX set="method" line="51"><f a=""><x path="Int"/></f></get_spacingX>
		<set_spacingX set="method" line="55"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingX>
		<get_spacingY set="method" line="61"><f a=""><x path="Int"/></f></get_spacingY>
		<set_spacingY set="method" line="65"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingY>
		<refresh public="1" set="method" line="71"><f a=""><x path="Void"/></f></refresh>
		<resizeChildren set="method" line="78"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="81"><f a=""><x path="Void"/></f></repositionChildren>
		<innerWidth public="1" get="accessor" set="null"><x path="Float"/></innerWidth>
		<innerHeight public="1" get="accessor" set="null"><x path="Float"/></innerHeight>
		<usableWidth public="1" get="accessor" set="null"><x path="Float"/></usableWidth>
		<usableHeight public="1" get="accessor" set="null"><x path="Float"/></usableHeight>
		<get_innerWidth set="method" line="93"><f a=""><x path="Float"/></f></get_innerWidth>
		<get_innerHeight set="method" line="102"><f a=""><x path="Float"/></f></get_innerHeight>
		<get_usableWidth set="method" line="111"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_usableHeight set="method" line="117"><f a=""><x path="Float"/></f></get_usableHeight>
		<clone public="1" set="method" line="1"><f a=""><c path="haxe.ui.toolkit.layout.Layout"/></f></clone>
		<self set="method" line="1"><f a=""><c path="haxe.ui.toolkit.layout.Layout"/></f></self>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.DefaultLayout" params="" file="src/haxe/ui/toolkit/layout/DefaultLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="50" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.DefaultLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.DefaultLayout"/></f></self>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.ScrollViewLayout" params="" file="src/haxe/ui/toolkit/containers/ScrollView.hx" module="haxe.ui.toolkit.containers.ScrollView">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<_inlineScrolls><x path="Bool"/></_inlineScrolls>
		<resizeChildren public="1" set="method" line="612" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="616" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="630" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_usableHeight set="method" line="640" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<inlineScrolls public="1" get="accessor" set="accessor"><x path="Bool"/></inlineScrolls>
		<get_inlineScrolls set="method" line="654"><f a=""><x path="Bool"/></f></get_inlineScrolls>
		<set_inlineScrolls set="method" line="658"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inlineScrolls>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ScrollViewLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.ScrollViewLayout"/></f></self>
		<new public="1" set="method" line="608"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.Stack" params="" file="src/haxe/ui/toolkit/containers/Stack.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<_history><c path="List"><x path="Int"/></c></_history>
		<addChild public="1" set="method" line="30" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<get_selectedIndex set="method" line="42"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="46"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<back public="1" set="method" line="114"><f a=""><x path="Void"/></f></back>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Stack"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.Stack"/></f></self>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.TabView" params="" file="src/haxe/ui/toolkit/containers/TabView.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<_tabs><c path="haxe.ui.toolkit.controls.TabBar"/></_tabs>
		<_stack><c path="haxe.ui.toolkit.containers.Stack"/></_stack>
		<_onTabsChange set="method" line="34"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onTabsChange>
		<_onGlyphClick set="method" line="41"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onGlyphClick>
		<initialize public="1" set="method" line="50" override="1"><f a=""><x path="Void"/></f></initialize>
		<addChild public="1" set="method" line="55" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<addChildAt public="1" set="method" line="70" override="1"><f a="child:index">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Int"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChildAt>
		<removeChild public="1" set="method" line="85" override="1"><f a="child:?dispose" v=":true">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></removeChild>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<pageCount public="1" get="accessor" set="null"><x path="Int"/></pageCount>
		<get_selectedIndex set="method" line="101"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="105"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_pageCount set="method" line="110"><f a=""><x path="Int"/></f></get_pageCount>
		<setTabText public="1" set="method" line="117"><f a="index:text">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></setTabText>
		<removeTab public="1" set="method" line="121"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></removeTab>
		<getTabButton public="1" set="method" line="126"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</f></getTabButton>
		<removeAllTabs public="1" set="method" line="130"><f a=""><x path="Void"/></f></removeAllTabs>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TabView"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TabView"/></f></self>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.TableView" params="" file="src/haxe/ui/toolkit/containers/TableView.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDataComponent"/>
		<_scrollView><c path="haxe.ui.toolkit.containers.ScrollView"/></_scrollView>
		<_scrollContent><c path="haxe.ui.toolkit.containers.VBox"/></_scrollContent>
		<_dataSource><c path="haxe.ui.toolkit.data.IDataSource"/></_dataSource>
		<_selectedItems><c path="Array"><c path="haxe.ui.toolkit.containers.TableViewRow"/></c></_selectedItems>
		<_lastSelection><x path="Int"/></_lastSelection>
		<initialize set="method" line="49" override="1"><f a=""><x path="Void"/></f></initialize>
		<invalidate public="1" set="method" line="63" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<dataSource public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.data.IDataSource"/></dataSource>
		<get_dataSource set="method" line="77"><f a=""><c path="haxe.ui.toolkit.data.IDataSource"/></f></get_dataSource>
		<set_dataSource set="method" line="81"><f a="value">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></set_dataSource>
		<_onDataSourceChanged set="method" line="101"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onDataSourceChanged>
		<_columnDefs><c path="haxe.ui.toolkit.containers.TableViewColumnDefs"/></_columnDefs>
		<columns public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.containers.TableViewColumnDefs"/></columns>
		<get_columns set="method" line="110"><f a=""><c path="haxe.ui.toolkit.containers.TableViewColumnDefs"/></f></get_columns>
		<set_columns set="method" line="113"><f a="value">
	<c path="haxe.ui.toolkit.containers.TableViewColumnDefs"/>
	<c path="haxe.ui.toolkit.containers.TableViewColumnDefs"/>
</f></set_columns>
		<syncUI set="method" line="121"><f a=""><x path="Void"/></f></syncUI>
		<addTableRow set="method" line="153"><f a="dataHash:data:?index" v="::-1">
	<c path="String"/>
	<d/>
	<x path="Int"/>
	<x path="Void"/>
</f></addTableRow>
		<resizeColumns set="method" line="182"><f a=""><x path="Void"/></f></resizeColumns>
		<handleListSelection public="1" set="method" line="205"><f a="item:event:?raiseEvent" v="::true">
	<c path="haxe.ui.toolkit.containers.TableViewRow"/>
	<t path="openfl.events.Event"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></handleListSelection>
		<handleClick public="1" set="method" line="244"><f a="item:event">
	<c path="haxe.ui.toolkit.containers.TableViewRow"/>
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></handleClick>
		<isSelected public="1" set="method" line="255"><f a="item">
	<c path="haxe.ui.toolkit.containers.TableViewRow"/>
	<x path="Bool"/>
</f></isSelected>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TableView"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TableView"/></f></self>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.containers.TableViewColumnDefs" params="" file="src/haxe/ui/toolkit/containers/TableView.hx" module="haxe.ui.toolkit.containers.TableView">
		<_columns><c path="Array"><c path="haxe.ui.toolkit.containers.TableViewColumnDef"/></c></_columns>
		<add public="1" set="method" line="266"><f a="id:?width:?title" v=":0:''">
	<c path="String"/>
	<x path="Float"/>
	<c path="String"/>
	<x path="Void"/>
</f></add>
		<has public="1" set="method" line="275"><f a="id">
	<c path="String"/>
	<x path="Bool"/>
</f></has>
		<iterator public="1" set="method" line="285"><f a=""><c path="Array"><c path="haxe.ui.toolkit.containers.TableViewColumnDef"/></c></f></iterator>
		<findColumn public="1" set="method" line="289"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.containers.TableViewColumnDef"/>
</f></findColumn>
		<new public="1" set="method" line="262"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.TableViewColumnDef" params="" file="src/haxe/ui/toolkit/containers/TableView.hx" module="haxe.ui.toolkit.containers.TableView">
		<id public="1"><c path="String"/></id>
		<type public="1"><c path="String"/></type>
		<width public="1"><x path="Float"/></width>
		<calculatedWidth public="1"><x path="Float"/></calculatedWidth>
		<new public="1" set="method" line="307"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.containers.TableViewRow" params="" file="src/haxe/ui/toolkit/containers/TableView.hx" module="haxe.ui.toolkit.containers.TableView">
		<extends path="haxe.ui.toolkit.containers.HBox"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IStateComponent"/>
		<STATE_NORMAL public="1" get="inline" set="null" line="313" static="1"><c path="String"/></STATE_NORMAL>
		<STATE_OVER public="1" get="inline" set="null" line="314" static="1"><c path="String"/></STATE_OVER>
		<STATE_SELECTED public="1" get="inline" set="null" line="315" static="1"><c path="String"/></STATE_SELECTED>
		<_state><c path="String"/></_state>
		<_states><c path="Array"><c path="String"/></c></_states>
		<_parentTable><c path="haxe.ui.toolkit.containers.TableView"/></_parentTable>
		<initialize set="method" line="330" override="1"><f a=""><x path="Void"/></f></initialize>
		<_onMouseOver set="method" line="341"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOver>
		<_onMouseOut set="method" line="345"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOut>
		<_onMouseClick set="method" line="353"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<hash public="1"><c path="String"/></hash>
		<_data><d/></_data>
		<data public="1" get="accessor" set="accessor"><d/></data>
		<get_data set="method" line="371"><f a=""><d/></f></get_data>
		<set_data set="method" line="374"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<createColumnComponent set="method" line="432"><f a="value:type">
	<d/>
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.Component"/>
</f></createColumnComponent>
		<buildStyles set="method" line="465" override="1"><f a=""><x path="Void"/></f></buildStyles>
		<addStates public="1" set="method" line="475"><f a="stateNames">
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></addStates>
		<state public="1" get="accessor" set="accessor"><c path="String"/></state>
		<states public="1" get="accessor" set="null"><c path="Array"><c path="String"/></c></states>
		<get_state set="method" line="490"><f a=""><c path="String"/></f></get_state>
		<set_state set="method" line="494"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<get_states set="method" line="514"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<hasState public="1" set="method" line="518"><f a="state">
	<c path="String"/>
	<x path="Bool"/>
</f></hasState>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TableViewRow"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.containers.TableViewRow"/></f></self>
		<new public="1" set="method" line="321"><f a="?parentTable" v="null">
	<c path="haxe.ui.toolkit.containers.TableView"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Calendar" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<_dayItems><c path="Array"><c path="haxe.ui.toolkit.controls.CalendarDay"/></c></_dayItems>
		<_date><c path="Date"/></_date>
		<_year><x path="Int"/></_year>
		<_month><x path="Int"/></_month>
		<_day><x path="Int"/></_day>
		<_selectedDate><c path="Date"/></_selectedDate>
		<preInitialize set="method" line="32" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<previousMonth public="1" set="method" line="49"><f a=""><x path="Void"/></f></previousMonth>
		<nextMonth public="1" set="method" line="59"><f a=""><x path="Void"/></f></nextMonth>
		<date public="1" get="accessor" set="accessor"><c path="Date"/></date>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<get_date set="method" line="75"><f a=""><c path="Date"/></f></get_date>
		<set_date set="method" line="79"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_date>
		<get_selectedDate set="method" line="105"><f a=""><c path="Date"/></f></get_selectedDate>
		<set_selectedDate set="method" line="109"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<getEndDay set="method" line="118"><f a="month:year">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></getEndDay>
		<buildMouseClickFunction set="method" line="135"><f a="index">
	<x path="Int"/>
	<f a="event">
		<t path="openfl.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseClickFunction>
		<mouseClickButton set="method" line="139"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseClickButton>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Calendar"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Calendar"/></f></self>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.CalendarDay" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx" module="haxe.ui.toolkit.controls.Calendar">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CalendarDay"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CalendarDay"/></f></self>
		<new public="1" set="method" line="149"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.CalendarLayout" params="" file="src/haxe/ui/toolkit/controls/Calendar.hx" module="haxe.ui.toolkit.controls.Calendar">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="164" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CalendarLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CalendarLayout"/></f></self>
		<new public="1" set="method" line="157"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.CheckBox" params="" file="src/haxe/ui/toolkit/controls/CheckBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.CheckBox"/></implements>
		<_value><c path="haxe.ui.toolkit.controls.CheckBoxValue"/></_value>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_selected><x path="Bool"/></_selected>
		<initialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></initialize>
		<get_text set="method" line="53" override="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="57" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether the checkbox is checked or not</haxe_doc>
		</selected>
		<get_selected set="method" line="72"><f a=""><x path="Bool"/></f></get_selected>
		<set_selected set="method" line="76"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<applyStyle public="1" set="method" line="93" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CheckBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CheckBox"/></f></self>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Simple two state checkbox control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the checkbox is modified"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Value" params="" file="src/haxe/ui/toolkit/controls/Value.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.Value"/></implements>
		<_values><x path="Map">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</x></_values>
		<_valuesList><c path="Array"><c path="String"/></c></_valuesList>
		<_value><c path="String"/></_value>
		<_interactive><x path="Bool"/></_interactive>
		<addValue public="1" set="method" line="35"><f a="value">
	<c path="String"/>
	<x path="Void"/>
</f></addValue>
		<cycleValues public="1" set="method" line="48"><f a=""><x path="Void"/></f></cycleValues>
		<_onMouseClick set="method" line="60"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<interactive public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</interactive>
		<get_value set="method" line="72" override="1"><f a=""><d/></f></get_value>
		<set_value set="method" line="76" override="1"><f a="newValue">
	<d/>
	<d/>
</f></set_value>
		<get_interactive set="method" line="93"><f a=""><x path="Bool"/></f></get_interactive>
		<set_interactive set="method" line="97"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_interactive>
		<clone public="1" set="method" line="105" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Value"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Value"/></f></self>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<haxe_doc>N-state cyclic value control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.CheckBoxValue" params="" file="src/haxe/ui/toolkit/controls/CheckBox.hx" module="haxe.ui.toolkit.controls.CheckBox">
		<extends path="haxe.ui.toolkit.controls.Value"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.CheckBoxValue"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CheckBoxValue"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.CheckBoxValue"/></f></self>
		<new public="1" set="method" line="112"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDirectional" params="" file="src/haxe/ui/toolkit/core/interfaces/IDirectional.hx" interface="1"><direction public="1" get="null" set="null"><c path="String"/></direction></class>
	<class path="haxe.ui.toolkit.core.interfaces.IScrollable" params="" file="src/haxe/ui/toolkit/core/interfaces/IScrollable.hx" interface="1">
		<pos public="1" get="null" set="null"><x path="Float"/></pos>
		<min public="1" get="null" set="null"><x path="Float"/></min>
		<max public="1" get="null" set="null"><x path="Float"/></max>
		<pageSize public="1" get="null" set="null"><x path="Float"/></pageSize>
		<incrementSize public="1" get="null" set="null"><x path="Float"/></incrementSize>
	</class>
	<class path="haxe.ui.toolkit.controls.Progress" params="" file="src/haxe/ui/toolkit/controls/Progress.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.Progress"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IDirectional"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<_direction><c path="String"/></_direction>
		<_min><x path="Float"/></_min>
		<_max><x path="Float"/></_max>
		<_pos><x path="Float"/></_pos>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_valueBgComp><c path="haxe.ui.toolkit.core.StateComponent"/></_valueBgComp>
		<_valueComp><c path="haxe.ui.toolkit.core.StateComponent"/></_valueComp>
		<initialize set="method" line="46" override="1"><f a=""><x path="Void"/></f></initialize>
		<direction public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>The direction of this progress bar. Can be `horizontal` or `vertical`</haxe_doc>
		</direction>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Minimum value allowed for the progress bar</haxe_doc>
		</min>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Maximum value allowed for the progress bar</haxe_doc>
		</max>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Value of the progress bar</haxe_doc>
		</pos>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Not applicable to progress bar</haxe_doc>
		</pageSize>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>How much the scrollbar should increment (or deincrement)</haxe_doc>
		</incrementSize>
		<get_direction set="method" line="87"><f a=""><c path="String"/></f></get_direction>
		<set_direction set="method" line="91"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_direction>
		<get_min set="method" line="101"><f a=""><x path="Float"/></f></get_min>
		<set_min set="method" line="105"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_max set="method" line="115"><f a=""><x path="Float"/></f></get_max>
		<set_max set="method" line="119"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_pos set="method" line="129"><f a=""><x path="Float"/></f></get_pos>
		<set_pos set="method" line="133"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_pageSize set="method" line="152"><f a=""><x path="Float"/></f></get_pageSize>
		<set_pageSize set="method" line="156"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_incrementSize set="method" line="160"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_incrementSize set="method" line="164"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Progress"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Progress"/></f></self>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Progress bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the progress bar changes"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.HProgress" params="" file="src/haxe/ui/toolkit/controls/HProgress.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.HProgress"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HProgress"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HProgress"/></f></self>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontal progress bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Scroll" params="" file="src/haxe/ui/toolkit/controls/Scroll.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDirectional"/>
		<_direction><c path="String"/></_direction>
		<direction public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>The direction of this progress bar. Can be `horizontal` or `vertical`</haxe_doc>
		</direction>
		<get_direction set="method" line="29"><f a=""><c path="String"/></f></get_direction>
		<set_direction set="method" line="33"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_direction>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Scroll"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Scroll"/></f></self>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Scrollbar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the scrollbar changes"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.HScroll" params="" file="src/haxe/ui/toolkit/controls/HScroll.hx">
		<extends path="haxe.ui.toolkit.controls.Scroll"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.HScroll"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<_pos><x path="Float"/></_pos>
		<_min><x path="Float"/></_min>
		<_max><x path="Float"/></_max>
		<_pageSize><x path="Float"/></_pageSize>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_deincButton><c path="haxe.ui.toolkit.controls.Button"/></_deincButton>
		<_incButton><c path="haxe.ui.toolkit.controls.Button"/></_incButton>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<_scrollDirection><x path="Int"/></_scrollDirection>
		<_scrollTimer><t path="openfl.utils.Timer"/></_scrollTimer>
		<_hasButtons><x path="Bool"/></_hasButtons>
		<preInitialize set="method" line="45" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="53" override="1"><f a=""><x path="Void"/></f></initialize>
		<_onThumbMouseDown set="method" line="95"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onThumbMouseDown>
		<_onScreenMouseMove set="method" line="103"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onScreenMouseUp set="method" line="127"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onDeinc set="method" line="136"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onDeinc>
		<_onInc set="method" line="148"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onInc>
		<_onScrollTimerComplete set="method" line="160"><f a="event">
	<t path="openfl.events.TimerEvent"/>
	<x path="Void"/>
</f></_onScrollTimerComplete>
		<_onMouseDown set="method" line="172"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Value of the scrollbar</haxe_doc>
		</pos>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Minimum value allowed for the scrollbar</haxe_doc>
		</min>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Maximum value allowed for the scrollbar</haxe_doc>
		</max>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>The size of one page for the scrollbar (affects the size of the thumb)</haxe_doc>
		</pageSize>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>How much the scrollbar should increment (or deincrement) when using the scroll buttons</haxe_doc>
		</incrementSize>
		<get_pos set="method" line="218"><f a=""><x path="Float"/></f></get_pos>
		<set_pos set="method" line="222"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_min set="method" line="238"><f a=""><x path="Float"/></f></get_min>
		<set_min set="method" line="242"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_max set="method" line="253"><f a=""><x path="Float"/></f></get_max>
		<set_max set="method" line="257"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_pageSize set="method" line="268"><f a=""><x path="Float"/></f></get_pageSize>
		<set_pageSize set="method" line="272"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_incrementSize set="method" line="280"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_incrementSize set="method" line="284"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<deincrementValue public="1" set="method" line="295">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deincrement the scrollbar value by `incrementSize`</haxe_doc>
		</deincrementValue>
		<incrementValue public="1" set="method" line="302">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Increment the scrollbar value by `incrementSize`</haxe_doc>
		</incrementValue>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HScroll"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HScroll"/></f></self>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontal scrollbar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.HScrollLayout" params="" file="src/haxe/ui/toolkit/controls/HScroll.hx" module="haxe.ui.toolkit.controls.HScroll">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<resizeChildren public="1" set="method" line="313" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="341" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="368" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HScrollLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HScrollLayout"/></f></self>
		<new public="1" set="method" line="309"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Slider" params="" file="src/haxe/ui/toolkit/controls/Slider.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<initialize set="method" line="27" override="1"><f a=""><x path="Void"/></f></initialize>
		<get_value set="method" line="41" override="1"><f a=""><d/></f></get_value>
		<set_value set="method" line="45" override="1"><f a="newValue">
	<d/>
	<d/>
</f></set_value>
		<_onMouseDown set="method" line="53"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScreenMouseMove set="method" line="56"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onScreenMouseUp set="method" line="59"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onBackgroundMouseDown set="method" line="65"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onBackgroundMouseDown>
		<calcPosFromCoord set="method" line="68"><f a="coord">
	<x path="Float"/>
	<x path="Float"/>
</f></calcPosFromCoord>
		<_onMouseWheel set="method" line="72"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseWheel>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Slider"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Slider"/></f></self>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Slider bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the slider changes"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.HSlider" params="" file="src/haxe/ui/toolkit/controls/HSlider.hx">
		<extends path="haxe.ui.toolkit.controls.Slider"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.HSlider"/></implements>
		<_onMouseDown set="method" line="20" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScreenMouseMove set="method" line="24" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onBackgroundMouseDown set="method" line="29" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onBackgroundMouseDown>
		<startTracking set="method" line="42"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></startTracking>
		<calcPosFromCoord set="method" line="52" override="1"><f a="xpos">
	<x path="Float"/>
	<x path="Float"/>
</f></calcPosFromCoord>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HSlider"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HSlider"/></f></self>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontal slider bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Image" params="" file="src/haxe/ui/toolkit/controls/Image.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.Image"/></implements>
		<_bmp><t path="openfl.display.Bitmap"/></_bmp>
		<_resource><d/></_resource>
		<_stretch><x path="Bool"/></_stretch>
		<_autoDisposeBitmapData><x path="Bool"/></_autoDisposeBitmapData>
		<initialize set="method" line="28" override="1"><f a=""><x path="Void"/></f></initialize>
		<dispose public="1" set="method" line="42" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Destroy the image and free the resources (will be called by the framework automatically)</haxe_doc>
		</dispose>
		<invalidate public="1" set="method" line="53" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<get_value set="method" line="64" override="1"><f a=""><d/></f></get_value>
		<set_value set="method" line="68" override="1"><f a="newValue">
	<d/>
	<d/>
</f></set_value>
		<resource public="1" get="accessor" set="accessor">
			<d/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>The resource asset for this image: eg `assets/myimage.jpeg`</haxe_doc>
		</resource>
		<stretch public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</stretch>
		<autoDisposeBitmapData public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</autoDisposeBitmapData>
		<get_resource set="method" line="86"><f a=""><d/></f></get_resource>
		<set_resource set="method" line="90"><f a="value">
	<d/>
	<d/>
</f></set_resource>
		<get_stretch set="method" line="121"><f a=""><x path="Bool"/></f></get_stretch>
		<set_stretch set="method" line="125"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_stretch>
		<get_autoDisposeBitmapData set="method" line="134"><f a=""><x path="Bool"/></f></get_autoDisposeBitmapData>
		<set_autoDisposeBitmapData set="method" line="138"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoDisposeBitmapData>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Image"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Image"/></f></self>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<haxe_doc>General purpose image control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Menu" params="" file="src/haxe/ui/toolkit/controls/Menu.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<_subMenus><x path="Map">
	<c path="haxe.ui.toolkit.controls.MenuItem"/>
	<c path="haxe.ui.toolkit.controls.Menu"/>
</x></_subMenus>
		<_currentItem><c path="haxe.ui.toolkit.controls.MenuItem"/></_currentItem>
		<_currentSubMenu><c path="haxe.ui.toolkit.controls.Menu"/></_currentSubMenu>
		<_parentMenu><c path="haxe.ui.toolkit.controls.Menu"/></_parentMenu>
		<initialize set="method" line="22" override="1"><f a=""><x path="Void"/></f></initialize>
		<addChild public="1" set="method" line="30" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<_onRootMouseDown set="method" line="49"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<buildMouseOverFunction set="method" line="65"><f a="index">
	<x path="Int"/>
	<f a="event">
		<t path="openfl.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseOverFunction>
		<buildMouseClickFunction set="method" line="69"><f a="index">
	<x path="Int"/>
	<f a="event">
		<t path="openfl.events.MouseEvent"/>
		<x path="Void"/>
	</f>
</f></buildMouseClickFunction>
		<mouseClickItem set="method" line="73"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseClickItem>
		<mouseOverItem set="method" line="87"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></mouseOverItem>
		<showSubMenu set="method" line="112"><f a="item">
	<c path="haxe.ui.toolkit.controls.MenuItem"/>
	<x path="Void"/>
</f></showSubMenu>
		<hideSubMenus public="1" set="method" line="145"><f a=""><x path="Void"/></f></hideSubMenus>
		<currentSubMenu public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.Menu"/></currentSubMenu>
		<parentMenu public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.Menu"/></parentMenu>
		<rootMenu public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.Menu"/></rootMenu>
		<get_currentSubMenu set="method" line="188"><f a=""><c path="haxe.ui.toolkit.controls.Menu"/></f></get_currentSubMenu>
		<get_parentMenu set="method" line="192"><f a=""><c path="haxe.ui.toolkit.controls.Menu"/></f></get_parentMenu>
		<get_rootMenu set="method" line="196"><f a=""><c path="haxe.ui.toolkit.controls.Menu"/></f></get_rootMenu>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Menu"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Menu"/></f></self>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.MenuButton" params="" file="src/haxe/ui/toolkit/controls/MenuButton.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<_currentMenuButton static="1"><c path="haxe.ui.toolkit.controls.MenuButton"/></_currentMenuButton>
		<_menu><c path="haxe.ui.toolkit.controls.Menu"/></_menu>
		<initialize public="1" set="method" line="21" override="1"><f a=""><x path="Void"/></f></initialize>
		<addChild public="1" set="method" line="30" override="1"><f a="child">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></addChild>
		<_onMouseOver set="method" line="48" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseOver>
		<_onMouseClick set="method" line="56" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<set_selected set="method" line="64" override="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<_onRootMouseDown set="method" line="74"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<_onMenuSelect set="method" line="97"><f a="event">
	<c path="haxe.ui.toolkit.events.MenuEvent"/>
	<x path="Void"/>
</f></_onMenuSelect>
		<_onMenuOpen set="method" line="103"><f a="event">
	<c path="haxe.ui.toolkit.events.MenuEvent"/>
	<x path="Void"/>
</f></_onMenuOpen>
		<showMenu set="method" line="109"><f a=""><x path="Void"/></f></showMenu>
		<hideMenu set="method" line="140"><f a=""><x path="Void"/></f></hideMenu>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.MenuButton"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.MenuButton"/></f></self>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.MenuItem" params="" file="src/haxe/ui/toolkit/controls/MenuItem.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<set_selected set="method" line="12" override="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.MenuItem"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.MenuItem"/></f></self>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.OptionBox" params="" file="src/haxe/ui/toolkit/controls/OptionBox.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.OptionBox"/></implements>
		<_groups static="1"><c path="haxe.ds.StringMap"><c path="Array"><c path="haxe.ui.toolkit.controls.OptionBox"/></c></c></_groups>
		<optionInGroup set="method" line="139" static="1"><f a="value:option">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.OptionBox"/>
	<x path="Bool"/>
</f></optionInGroup>
		<_value><c path="haxe.ui.toolkit.controls.OptionBoxValue"/></_value>
		<_label><c path="haxe.ui.toolkit.controls.Text"/></_label>
		<_group><c path="String"/></_group>
		<initialize set="method" line="42" override="1"><f a=""><x path="Void"/></f></initialize>
		<get_text set="method" line="59" override="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="63" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<selected public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether the option is checked or not, if set to `true` then other options of the same group will be deselected.</haxe_doc>
		</selected>
		<group public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines the group for this option. Options belonging to the same group will only ever have a single option selected.</haxe_doc>
		</group>
		<get_selected set="method" line="83"><f a=""><x path="Bool"/></f></get_selected>
		<set_selected set="method" line="87"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selected>
		<get_group set="method" line="110"><f a=""><c path="String"/></f></get_group>
		<set_group set="method" line="114"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_group>
		<applyStyle public="1" set="method" line="156" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.OptionBox"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.OptionBox"/></f></self>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Simple two state option control (supports groups)</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the value of the option box is modified"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.OptionBoxValue" params="" file="src/haxe/ui/toolkit/controls/OptionBox.hx" module="haxe.ui.toolkit.controls.OptionBox">
		<extends path="haxe.ui.toolkit.controls.Value"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.OptionBoxValue"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.OptionBoxValue"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.OptionBoxValue"/></f></self>
		<new public="1" set="method" line="175"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.HProgressLayout" params="" file="src/haxe/ui/toolkit/controls/Progress.hx" module="haxe.ui.toolkit.controls.Progress">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<resizeChildren public="1" set="method" line="176" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="216" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HProgressLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.HProgressLayout"/></f></self>
		<new public="1" set="method" line="172"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.VProgressLayout" params="" file="src/haxe/ui/toolkit/controls/Progress.hx" module="haxe.ui.toolkit.controls.Progress">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<resizeChildren public="1" set="method" line="244" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="284" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VProgressLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VProgressLayout"/></f></self>
		<new public="1" set="method" line="240"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Spacer" params="" file="src/haxe/ui/toolkit/controls/Spacer.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.Spacer"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Spacer"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Spacer"/></f></self>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<haxe_doc>General purpose spacer component</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.TabBar" params="" file="src/haxe/ui/toolkit/controls/TabBar.hx">
		<extends path="haxe.ui.toolkit.containers.ScrollView"/>
		<_content><c path="haxe.ui.toolkit.containers.HBox"/></_content>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<initialize set="method" line="34" override="1"><f a=""><x path="Void"/></f></initialize>
		<selectedIndex public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<haxe_doc>Gets (or sets) the selected button index for the tab bar</haxe_doc>
		</selectedIndex>
		<numTabs public="1" get="accessor" set="null"><x path="Int"/></numTabs>
		<get_selectedIndex set="method" line="47"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="51"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_numTabs set="method" line="69"><f a=""><x path="Int"/></f></get_numTabs>
		<addTab public="1" set="method" line="79">
			<f a="text">
				<c path="String"/>
				<c path="haxe.ui.toolkit.controls.Button"/>
			</f>
			<haxe_doc>Adds a new button to the tab bar with the specified `text`</haxe_doc>
		</addTab>
		<removeTab public="1" set="method" line="92"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></removeTab>
		<getTabButton public="1" set="method" line="102"><f a="index">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</f></getTabButton>
		<removeAllTabs public="1" set="method" line="106"><f a=""><x path="Void"/></f></removeAllTabs>
		<setTabText public="1" set="method" line="111"><f a="index:text">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></setTabText>
		<tabButtonClick set="method" line="116"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></tabButtonClick>
		<tabGlyphClick set="method" line="120"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></tabGlyphClick>
		<_onMouseWheel set="method" line="126" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseWheel>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TabBar"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TabBar"/></f></self>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Horizontally scrollable tab bar</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n=":event">
				<e>"UIEvent.CHANGE"</e>
				<e>"Dispatched when the selection is changed"</e>
			</m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.Text" params="" file="src/haxe/ui/toolkit/controls/Text.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.Text"/></implements>
		<_textDisplay><c path="haxe.ui.toolkit.text.ITextDisplay"/></_textDisplay>
		<initialize set="method" line="26" override="1"><f a=""><x path="Void"/></f></initialize>
		<dispose public="1" set="method" line="43" override="1"><f a=""><x path="Void"/></f></dispose>
		<invalidate public="1" set="method" line="50" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<get_text set="method" line="67" override="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="71" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<set_autoSize set="method" line="82" override="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<set_width set="method" line="90" override="1"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_width>
		<applyStyle public="1" set="method" line="102" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether or not the text can span more than a single line</haxe_doc>
		</multiline>
		<wrapLines public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</wrapLines>
		<selectable public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</selectable>
		<textAlign public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</textAlign>
		<get_multiline set="method" line="130"><f a=""><x path="Bool"/></f></get_multiline>
		<set_multiline set="method" line="134"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_wrapLines set="method" line="139"><f a=""><x path="Bool"/></f></get_wrapLines>
		<set_wrapLines set="method" line="143"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wrapLines>
		<get_selectable set="method" line="148"><f a=""><x path="Bool"/></f></get_selectable>
		<set_selectable set="method" line="152"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectable>
		<get_textAlign set="method" line="156"><f a=""><c path="String"/></f></get_textAlign>
		<set_textAlign set="method" line="163"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_textAlign>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Text"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.Text"/></f></self>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Generic non-editable text component (supports multiline text)</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.TextInput" params="" file="src/haxe/ui/toolkit/controls/TextInput.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.TextInput"/></implements>
		<_textDisplay><c path="haxe.ui.toolkit.text.ITextDisplay"/></_textDisplay>
		<_textPlaceHolder><c path="haxe.ui.toolkit.controls.Text"/></_textPlaceHolder>
		<_vscroll><c path="haxe.ui.toolkit.controls.VScroll"/></_vscroll>
		<_hscroll><c path="haxe.ui.toolkit.controls.HScroll"/></_hscroll>
		<preInitialize set="method" line="38" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="42" override="1"><f a=""><x path="Void"/></f></initialize>
		<dispose public="1" set="method" line="69" override="1"><f a=""><x path="Void"/></f></dispose>
		<invalidate public="1" set="method" line="79" override="1"><f a="?type:?recursive" v="1118481:false">
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></invalidate>
		<set_disabled set="method" line="94" override="1"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_disabled>
		<_onTextChange set="method" line="107"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onTextChange>
		<_onTextScroll set="method" line="114"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onTextScroll>
		<_onVScrollChange set="method" line="118"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onVScrollChange>
		<_onHScrollChange set="method" line="126"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onHScrollChange>
		<get_text set="method" line="136" override="1"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="140" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<applyStyle public="1" set="method" line="150" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<multiline public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Defines whether or not the text can span more than a single line. Vertical and horizontal scrollbars will be added as needed.</haxe_doc>
		</multiline>
		<selectionBeginIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The start position of the selected text</haxe_doc>
		</selectionBeginIndex>
		<selectionEndIndex public="1" get="accessor" set="null">
			<x path="Int"/>
			<haxe_doc>The end position of the selected text</haxe_doc>
		</selectionEndIndex>
		<selectedTextFormat public="1" get="accessor" set="null">
			<t path="openfl.text.TextFormat"/>
			<haxe_doc>Sets the currently selected text (if available) to the specified text format</haxe_doc>
		</selectedTextFormat>
		<wrapLines public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</wrapLines>
		<displayAsPassword public="1" get="accessor" set="accessor">
			<x path="Bool"/>
			<meta><m n=":clonable"/></meta>
		</displayAsPassword>
		<placeholderText public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</placeholderText>
		<textAlign public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</textAlign>
		<maxChars public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":clonable"/></meta>
		</maxChars>
		<restrictChars public="1" get="accessor" set="accessor">
			<c path="String"/>
			<meta><m n=":clonable"/></meta>
		</restrictChars>
		<get_multiline set="method" line="203"><f a=""><x path="Bool"/></f></get_multiline>
		<set_multiline set="method" line="207"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_selectionBeginIndex set="method" line="213"><f a=""><x path="Int"/></f></get_selectionBeginIndex>
		<get_selectionEndIndex set="method" line="222"><f a=""><x path="Int"/></f></get_selectionEndIndex>
		<get_selectedTextFormat set="method" line="231"><f a=""><t path="openfl.text.TextFormat"/></f></get_selectedTextFormat>
		<get_wrapLines set="method" line="236"><f a=""><x path="Bool"/></f></get_wrapLines>
		<set_wrapLines set="method" line="240"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wrapLines>
		<get_displayAsPassword set="method" line="245"><f a=""><x path="Bool"/></f></get_displayAsPassword>
		<set_displayAsPassword set="method" line="249"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_displayAsPassword>
		<get_placeholderText set="method" line="254"><f a=""><c path="String"/></f></get_placeholderText>
		<set_placeholderText set="method" line="261"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_placeholderText>
		<get_textAlign set="method" line="283"><f a=""><c path="String"/></f></get_textAlign>
		<set_textAlign set="method" line="290"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_textAlign>
		<get_maxChars set="method" line="300"><f a=""><x path="Int"/></f></get_maxChars>
		<set_maxChars set="method" line="304"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxChars>
		<get_restrictChars set="method" line="308"><f a=""><c path="String"/></f></get_restrictChars>
		<set_restrictChars set="method" line="312"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_restrictChars>
		<vscrollPos public="1" get="accessor" set="accessor"><x path="Float"/></vscrollPos>
		<vscrollMin public="1" get="accessor" set="null"><x path="Float"/></vscrollMin>
		<vscrollMax public="1" get="accessor" set="null"><x path="Float"/></vscrollMax>
		<get_vscrollPos set="method" line="320"><f a=""><x path="Float"/></f></get_vscrollPos>
		<set_vscrollPos set="method" line="327"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_vscrollPos>
		<get_vscrollMin set="method" line="334"><f a=""><x path="Float"/></f></get_vscrollMin>
		<get_vscrollMax set="method" line="341"><f a=""><x path="Float"/></f></get_vscrollMax>
		<replaceSelectedText public="1" set="method" line="354">
			<f a="s">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Replaces the selected text (if available) to with the specified string</haxe_doc>
		</replaceSelectedText>
		<focus public="1" set="method" line="361"><f a=""><x path="Void"/></f></focus>
		<checkScrolls set="method" line="366"><f a=""><x path="Void"/></f></checkScrolls>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TextInput"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TextInput"/></f></self>
		<new public="1" set="method" line="25"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Generic editable text component (supports multiline text)</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.TextInputLayout" params="" file="src/haxe/ui/toolkit/controls/TextInput.hx" module="haxe.ui.toolkit.controls.TextInput">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<resizeChildren public="1" set="method" line="424" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="450" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="471" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_usableHeight set="method" line="480" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<findTextField set="method" line="489"><f a=""><t path="openfl.text.TextField"/></f></findTextField>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TextInputLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.TextInputLayout"/></f></self>
		<new public="1" set="method" line="420"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.VProgress" params="" file="src/haxe/ui/toolkit/controls/VProgress.hx">
		<extends path="haxe.ui.toolkit.controls.Progress"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.VProgress"/></implements>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VProgress"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VProgress"/></f></self>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Vertical progress bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.VScroll" params="" file="src/haxe/ui/toolkit/controls/VScroll.hx">
		<extends path="haxe.ui.toolkit.controls.Scroll"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.VScroll"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IScrollable"/>
		<_pos><x path="Float"/></_pos>
		<_min><x path="Float"/></_min>
		<_max><x path="Float"/></_max>
		<_pageSize><x path="Float"/></_pageSize>
		<_incrementSize><x path="Float"/></_incrementSize>
		<_deincButton><c path="haxe.ui.toolkit.controls.Button"/></_deincButton>
		<_incButton><c path="haxe.ui.toolkit.controls.Button"/></_incButton>
		<_thumb><c path="haxe.ui.toolkit.controls.Button"/></_thumb>
		<_mouseDownOffset><x path="Float"/></_mouseDownOffset>
		<_scrollDirection><x path="Int"/></_scrollDirection>
		<_scrollTimer><t path="openfl.utils.Timer"/></_scrollTimer>
		<_hasButtons><x path="Bool"/></_hasButtons>
		<preInitialize set="method" line="45" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="53" override="1"><f a=""><x path="Void"/></f></initialize>
		<_onThumbMouseDown set="method" line="95"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onThumbMouseDown>
		<_onScreenMouseMove set="method" line="103"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onScreenMouseUp set="method" line="127"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseUp>
		<_onDeinc set="method" line="136"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onDeinc>
		<_onInc set="method" line="148"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onInc>
		<_onScrollTimerComplete set="method" line="160"><f a="event">
	<t path="openfl.events.TimerEvent"/>
	<x path="Void"/>
</f></_onScrollTimerComplete>
		<_onMouseDown set="method" line="172"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<pos public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Value of the scrollbar</haxe_doc>
		</pos>
		<min public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Minimum value allowed for the scrollbar</haxe_doc>
		</min>
		<max public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>Maximum value allowed for the scrollbar</haxe_doc>
		</max>
		<pageSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>The size of one page for the scrollbar (affects the size of the thumb)</haxe_doc>
		</pageSize>
		<incrementSize public="1" get="accessor" set="accessor">
			<x path="Float"/>
			<meta><m n=":clonable"/></meta>
			<haxe_doc>How much the scrollbar should increment (or deincrement) when using the scroll buttons</haxe_doc>
		</incrementSize>
		<get_pos set="method" line="218"><f a=""><x path="Float"/></f></get_pos>
		<set_pos set="method" line="222"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pos>
		<get_min set="method" line="238"><f a=""><x path="Float"/></f></get_min>
		<set_min set="method" line="242"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_min>
		<get_max set="method" line="253"><f a=""><x path="Float"/></f></get_max>
		<set_max set="method" line="257"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_max>
		<get_pageSize set="method" line="268"><f a=""><x path="Float"/></f></get_pageSize>
		<set_pageSize set="method" line="272"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_pageSize>
		<get_incrementSize set="method" line="280"><f a=""><x path="Float"/></f></get_incrementSize>
		<set_incrementSize set="method" line="284"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_incrementSize>
		<deincrementValue public="1" set="method" line="295">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Deincrement the scrollbar value by `incrementSize`</haxe_doc>
		</deincrementValue>
		<incrementValue public="1" set="method" line="302">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Increment the scrollbar value by `incrementSize`</haxe_doc>
		</incrementValue>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VScroll"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VScroll"/></f></self>
		<new public="1" set="method" line="37"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Vertical scrollbar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.VScrollLayout" params="" file="src/haxe/ui/toolkit/controls/VScroll.hx" module="haxe.ui.toolkit.controls.VScroll">
		<extends path="haxe.ui.toolkit.layout.DefaultLayout"/>
		<resizeChildren public="1" set="method" line="313" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren public="1" set="method" line="341" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableHeight set="method" line="368" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VScrollLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VScrollLayout"/></f></self>
		<new public="1" set="method" line="309"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
			<m n="exclude"/>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.VSlider" params="" file="src/haxe/ui/toolkit/controls/VSlider.hx">
		<extends path="haxe.ui.toolkit.controls.Slider"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.controls.VSlider"/></implements>
		<_onMouseDown set="method" line="20" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseDown>
		<_onScreenMouseMove set="method" line="24" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onScreenMouseMove>
		<_onBackgroundMouseDown set="method" line="29" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onBackgroundMouseDown>
		<startTracking set="method" line="42"><f a="offset">
	<x path="Float"/>
	<x path="Void"/>
</f></startTracking>
		<calcPosFromCoord set="method" line="52" override="1"><f a="ypos">
	<x path="Float"/>
	<x path="Float"/>
</f></calcPosFromCoord>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VSlider"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.VSlider"/></f></self>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Vertical slider bar control</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.PopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/PopupContent.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<popup public="1"><c path="haxe.ui.toolkit.controls.popups.Popup"/></popup>
		<onButtonClicked public="1" set="method" line="15"><f a="button">
	<x path="Int"/>
	<x path="Bool"/>
</f></onButtonClicked>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></f></self>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<haxe_doc>Empty popup content</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.SimplePopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/SimplePopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<_textControl><c path="haxe.ui.toolkit.controls.Text"/></_textControl>
		<initialize set="method" line="25" override="1"><f a=""><x path="Void"/></f></initialize>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.SimplePopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.SimplePopupContent"/></f></self>
		<new public="1" set="method" line="11"><f a="?text" v="''">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Basic text popup (resizes based on content)</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.BusyPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/BusyPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.SimplePopupContent"/>
		<initialize set="method" line="15" override="1"><f a=""><x path="Void"/></f></initialize>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.BusyPopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.BusyPopupContent"/></f></self>
		<new public="1" set="method" line="8"><f a="?text" v="''">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Text content for busy popups</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.CalendarPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/CalendarPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<_cal><c path="haxe.ui.toolkit.containers.CalendarView"/></_cal>
		<initialize set="method" line="18" override="1"><f a=""><x path="Void"/></f></initialize>
		<selectedDate public="1" get="accessor" set="accessor"><c path="Date"/></selectedDate>
		<get_selectedDate set="method" line="30"><f a=""><c path="Date"/></f></get_selectedDate>
		<set_selectedDate set="method" line="34"><f a="value">
	<c path="Date"/>
	<c path="Date"/>
</f></set_selectedDate>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.CalendarPopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.CalendarPopupContent"/></f></self>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.CustomPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/CustomPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<_display><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></_display>
		<initialize set="method" line="20" override="1"><f a=""><x path="Void"/></f></initialize>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.CustomPopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.CustomPopupContent"/></f></self>
		<new public="1" set="method" line="11"><f a="?display" v="null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Custom popup content that resizes based on size</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.popups.ListPopupContent" params="" file="src/haxe/ui/toolkit/controls/popups/ListPopupContent.hx">
		<extends path="haxe.ui.toolkit.controls.popups.PopupContent"/>
		<_list><c path="haxe.ui.toolkit.containers.ListView"/></_list>
		<_maxListSize><x path="Int"/></_maxListSize>
		<hideTimer><t path="openfl.utils.Timer"/></hideTimer>
		<_fn><f a="">
	<d/>
	<x path="Void"/>
</f></_fn>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<initialize set="method" line="37" override="1"><f a=""><x path="Void"/></f></initialize>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<listSize public="1" get="accessor" set="null"><x path="Int"/></listSize>
		<get_selectedIndex set="method" line="60"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="68"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<get_listSize set="method" line="76"><f a=""><x path="Int"/></f></get_listSize>
		<DELAY><x path="Int"/></DELAY>
		<_onListChange set="method" line="91"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onListChange>
		<_onTimerComplete set="method" line="97"><f a="event">
	<t path="openfl.events.TimerEvent"/>
	<x path="Void"/>
</f></_onTimerComplete>
		<setSelectedIndexNoEvent public="1" set="method" line="114"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></setSelectedIndexNoEvent>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.ListPopupContent"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.ListPopupContent"/></f></self>
		<new public="1" set="method" line="23"><f a="?dataSource:?selectedIndex:?fn" v="null:-1:null">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<x path="Int"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
		<haxe_doc>List content for list popups</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IDraggable" params="" file="src/haxe/ui/toolkit/core/interfaces/IDraggable.hx" interface="1"><allowDrag public="1" set="method"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Bool"/>
</f></allowDrag></class>
	<class path="haxe.ui.toolkit.controls.popups.Popup" params="" file="src/haxe/ui/toolkit/controls/popups/Popup.hx">
		<extends path="haxe.ui.toolkit.containers.VBox"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDraggable"/>
		<_titleBar><c path="haxe.ui.toolkit.containers.Box"/></_titleBar>
		<_title><c path="haxe.ui.toolkit.controls.Text"/></_title>
		<_content><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></_content>
		<_buttonBar><c path="haxe.ui.toolkit.containers.Box"/></_buttonBar>
		<_config><d/></_config>
		<_fn><f a="">
	<d/>
	<x path="Void"/>
</f></_fn>
		<initialize set="method" line="78" override="1"><f a=""><x path="Void"/></f></initialize>
		<allowDrag public="1" set="method" line="133">
			<f a="event">
				<t path="openfl.events.MouseEvent"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if the popup can be dragged by ensuring the mouse is in the title bar</haxe_doc>
		</allowDrag>
		<content public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></content>
		<get_content set="method" line="141"><f a=""><c path="haxe.ui.toolkit.controls.popups.PopupContent"/></f></get_content>
		<config public="1" get="accessor" set="null"><d/></config>
		<get_config set="method" line="146"><f a=""><d/></f></get_config>
		<createStandardButton set="method" line="153"><f a="v">
	<x path="Int"/>
	<c path="haxe.ui.toolkit.controls.Button"/>
</f></createStandardButton>
		<clickButton public="1" set="method" line="195">
			<f a="button">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n="exclude"/></meta>
		</clickButton>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.Popup"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.popups.Popup"/></f></self>
		<new public="1" set="method" line="36">
			<f a="?title:?content:?config:?fn" v="null:null:null:null">
				<c path="String"/>
				<c path="haxe.ui.toolkit.controls.popups.PopupContent"/>
				<d/>
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new popup
	 
	 * `title` - The title of the popup

	 * `content` - The content of the popup
	 
	 * `config` - Configuration options for the popup (buttons, etc)
	 
	 * `fn` - Callback invoked when buttons are clicked
	 
	 Note - Creating the popup does not display it, use `PopupManager.showPopup` to display it.</haxe_doc>
		</new>
		<haxe_doc>Simple modal, draggable popup component</haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.selection.DateSelector" params="" file="src/haxe/ui/toolkit/controls/selection/DateSelector.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<_cal><c path="haxe.ui.toolkit.containers.CalendarView"/></_cal>
		<_method><c path="String"/></_method>
		<preInitialize set="method" line="27" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="37" override="1"><f a=""><x path="Void"/></f></initialize>
		<_onMouseClick set="method" line="42" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<applyStyle public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<showCalendar public="1" set="method" line="64"><f a=""><x path="Void"/></f></showCalendar>
		<hideCalendar public="1" set="method" line="113"><f a=""><x path="Void"/></f></hideCalendar>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Specifies the method to display the calendar, valid values are:
		 
	 * `default` - The calendar will be displayed under the button, similar to a standard drop down box

	 * `popup` - The calendar will be a modal popup of the choices, this is more suited to mobile applications</haxe_doc>
		</method>
		<get_method set="method" line="147"><f a=""><c path="String"/></f></get_method>
		<set_method set="method" line="151"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<date public="1" get="accessor" set="null">
			<c path="Date"/>
			<haxe_doc>* Returns the selected date</haxe_doc>
		</date>
		<get_date set="method" line="161"><f a=""><c path="Date"/></f></get_date>
		<dateFormat public="1" set="accessor">
			<c path="String"/>
			<haxe_doc>* Sets the displayed date format (default: %d/%m/%Y)</haxe_doc>
		</dateFormat>
		<set_dateFormat set="method" line="173"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_dateFormat>
		<_onRootMouseDown set="method" line="184"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<onDateChange set="method" line="198"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></onDateChange>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.DateSelector"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.DateSelector"/></f></self>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.selection.ListSelector" params="" file="src/haxe/ui/toolkit/controls/selection/ListSelector.hx">
		<extends path="haxe.ui.toolkit.controls.Button"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IDataComponent"/>
		<_dataSource><c path="haxe.ui.toolkit.data.IDataSource"/></_dataSource>
		<_list><c path="haxe.ui.toolkit.containers.ListView"/></_list>
		<_maxListSize><x path="Int"/></_maxListSize>
		<_method><c path="String"/></_method>
		<_selectedIndex><x path="Int"/></_selectedIndex>
		<_selectedItems><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c></_selectedItems>
		<preInitialize set="method" line="54" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<initialize set="method" line="64" override="1"><f a=""><x path="Void"/></f></initialize>
		<_onMouseClick set="method" line="69" override="1"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onMouseClick>
		<applyStyle public="1" set="method" line="78" override="1"><f a=""><x path="Void"/></f></applyStyle>
		<dataSource public="1" get="accessor" set="accessor">
			<c path="haxe.ui.toolkit.data.IDataSource"/>
			<haxe_doc>Specifies the data source where the list will get its options from</haxe_doc>
		</dataSource>
		<get_dataSource set="method" line="96"><f a=""><c path="haxe.ui.toolkit.data.IDataSource"/></f></get_dataSource>
		<set_dataSource set="method" line="103"><f a="value">
	<c path="haxe.ui.toolkit.data.IDataSource"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></set_dataSource>
		<showList public="1" set="method" line="114">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Displays the list to the user based on `method` (this will be called automatically when the user clicks the button)</haxe_doc>
		</showList>
		<hideList public="1" set="method" line="183">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Hides the list from the user</haxe_doc>
		</hideList>
		<method public="1" get="accessor" set="accessor">
			<c path="String"/>
			<haxe_doc>Specifies the method to display the list, valid values are:
		 
	 * `default` - The list will be displayed under the button, similar to a standard drop down box

	 * `popup` - The list will be a modal popup of the choices, this is more suited to mobile applications</haxe_doc>
		</method>
		<get_method set="method" line="217"><f a=""><c path="String"/></f></get_method>
		<set_method set="method" line="221"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_method>
		<selectedItems public="1" get="accessor" set="null">
			<c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c>
			<haxe_doc>Returns an array of the selected list items</haxe_doc>
		</selectedItems>
		<get_selectedItems set="method" line="234"><f a=""><c path="Array"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></c></f></get_selectedItems>
		<selectedIndex public="1" get="accessor" set="accessor"><x path="Int"/></selectedIndex>
		<get_selectedIndex set="method" line="239"><f a=""><x path="Int"/></f></get_selectedIndex>
		<set_selectedIndex set="method" line="243"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_selectedIndex>
		<_onRootMouseDown set="method" line="267"><f a="event">
	<t path="openfl.events.MouseEvent"/>
	<x path="Void"/>
</f></_onRootMouseDown>
		<_onListChange set="method" line="281"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onListChange>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.ListSelector"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.ListSelector"/></f></self>
		<new public="1" set="method" line="44"><f a=""><x path="Void"/></f></new>
		<haxe_doc><![CDATA[Allows the user to select an item from a list

 The way in which the list is displayed after the user clicks the button depends on the `method` property:
 
 * `default` - The list will be displayed under the button, similar to a standard drop down box
 * `popup` - The list will be a modal popup of the choices, this is more suited to mobile applications

 <b>Events:</b>
 
 * `Event.CHANGE` - Dispatched when the user selects a list item]]></haxe_doc>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.controls.selection.DropDownList" params="" file="src/haxe/ui/toolkit/controls/selection/ListSelector.hx" module="haxe.ui.toolkit.controls.selection.ListSelector">
		<extends path="haxe.ui.toolkit.containers.ListView"/>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.DropDownList"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.controls.selection.DropDownList"/></f></self>
		<new public="1" set="method" line="295"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.ClassManager" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.ClassManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.ClassManager"/></instance>
		<get_instance set="method" line="10" static="1"><f a=""><c path="haxe.ui.toolkit.core.ClassManager"/></f></get_instance>
		<registerDefaults set="method" line="24"><f a=""><x path="Void"/></f></registerDefaults>
		<componentClassMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry"/></c></componentClassMap>
		<getComponentClassName public="1" set="method" line="38"><f a="simpleName">
	<c path="String"/>
	<c path="String"/>
</f></getComponentClassName>
		<registerComponentClass public="1" set="method" line="52"><f a="cls:simpleName">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></registerComponentClass>
		<registerComponentClassName set="method" line="57"><f a="className:simpleName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></registerComponentClassName>
		<dataSourceClassMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry"/></c></dataSourceClassMap>
		<hasDataSourceClass public="1" set="method" line="73"><f a="simpleName">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDataSourceClass>
		<getDataSourceClassName public="1" set="method" line="81"><f a="simpleName">
	<c path="String"/>
	<c path="String"/>
</f></getDataSourceClassName>
		<registerDataSourceClass public="1" set="method" line="94"><f a="cls:simpleName">
	<x path="Class"><c path="haxe.ui.toolkit.data.IDataSource"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></registerDataSourceClass>
		<registerDataSourceClassName set="method" line="99"><f a="className:simpleName">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></registerDataSourceClassName>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<simpleName public="1"><c path="String"/></simpleName>
		<className public="1"><c path="String"/></className>
		<new public="1" set="method" line="112"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.ComponentRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<extends path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"/>
		<prefix public="1"><c path="String"/></prefix>
		<new public="1" set="method" line="120"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core._ClassManager.DataSourceRegistryEntry" params="" file="src/haxe/ui/toolkit/core/ClassManager.hx" private="1" module="haxe.ui.toolkit.core.ClassManager">
		<extends path="haxe.ui.toolkit.core._ClassManager.ClassRegistryEntry"/>
		<new public="1" set="method" line="124"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Client" params="" file="src/haxe/ui/toolkit/core/Client.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Client"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Client"/></instance>
		<get_instance set="method" line="8" static="1"><f a=""><c path="haxe.ui.toolkit.core.Client"/></f></get_instance>
		<init public="1" set="method" line="23"><f a=""><x path="Void"/></f></init>
		<language public="1" get="accessor" set="null"><c path="String"/></language>
		<dpi public="1" get="accessor" set="null"><x path="Float"/></dpi>
		<platform public="1" get="accessor" set="null"><c path="String"/></platform>
		<screenWidth public="1" get="accessor" set="null"><x path="Float"/></screenWidth>
		<screenHeight public="1" get="accessor" set="null"><x path="Float"/></screenHeight>
		<windowWidth public="1" get="accessor" set="null"><x path="Float"/></windowWidth>
		<windowHeight public="1" get="accessor" set="null"><x path="Float"/></windowHeight>
		<target public="1" get="accessor" set="null"><c path="String"/></target>
		<get_language set="method" line="35"><f a=""><c path="String"/></f></get_language>
		<get_dpi set="method" line="39"><f a=""><x path="Float"/></f></get_dpi>
		<get_platform set="method" line="43"><f a=""><c path="String"/></f></get_platform>
		<get_target set="method" line="55"><f a=""><c path="String"/></f></get_target>
		<get_screenWidth set="method" line="65"><f a=""><x path="Float"/></f></get_screenWidth>
		<get_screenHeight set="method" line="69"><f a=""><x path="Float"/></f></get_screenHeight>
		<get_windowWidth set="method" line="73"><f a=""><x path="Float"/></f></get_windowWidth>
		<get_windowHeight set="method" line="77"><f a=""><x path="Float"/></f></get_windowHeight>
		<new public="1" set="method" line="19"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Controller" params="" file="src/haxe/ui/toolkit/core/Controller.hx">
		<_view><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></_view>
		<_namedComponents><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></c></_namedComponents>
		<view public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></view>
		<root public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Root"/></root>
		<popup public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.controls.popups.Popup"/></popup>
		<addChild public="1" params="T" set="method" line="43"><f a="?child:?options" v="null:null">
	<d/>
	<d/>
	<t path="Null"><c path="addChild.T"/></t>
</f></addChild>
		<attachEvent public="1" set="method" line="71"><f a="id:type:listener">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></attachEvent>
		<detachEvent public="1" set="method" line="78"><f a="id:type:listener">
	<c path="String"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></detachEvent>
		<detachEvents public="1" set="method" line="85"><f a="id:type">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></detachEvents>
		<getComponent public="1" set="method" line="92"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.Component"/>
</f></getComponent>
		<getComponentAs public="1" params="T" set="method" line="96"><f a="id:type">
	<c path="String"/>
	<x path="Class"><c path="getComponentAs.T"/></x>
	<t path="Null"><c path="getComponentAs.T"/></t>
</f></getComponentAs>
		<refereshNamedComponents set="method" line="105"><f a=""><x path="Void"/></f></refereshNamedComponents>
		<addNamedComponentsFrom set="method" line="110"><f a="parent">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></addNamedComponentsFrom>
		<get_view set="method" line="124"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></f></get_view>
		<get_root set="method" line="128"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></get_root>
		<get_popup set="method" line="135"><f a=""><c path="haxe.ui.toolkit.controls.popups.Popup"/></f></get_popup>
		<namedComponents public="1" get="accessor" set="null"><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></c></namedComponents>
		<get_namedComponents set="method" line="144"><f a=""><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/></c></f></get_namedComponents>
		<showPopup set="method" line="148"><f a="text:?title:?config:?fn" v=":null:1:null">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showPopup>
		<showSimplePopup set="method" line="152"><f a="text:?title:?config:?fn" v=":null:1:null">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showSimplePopup>
		<showCustomPopup set="method" line="156"><f a="content:?title:?config:?fn" v=":null:1:null">
	<d/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCustomPopup>
		<showListPopup set="method" line="169"><f a="items:?selectedIndex:?title:?fn" v=":-1:null:null">
	<d/>
	<x path="Int"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showListPopup>
		<showBusyPopup set="method" line="173"><f a="text:?delay:?title:?config:?fn" v=":-1:null:null:null">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showBusyPopup>
		<showCalendarPopup public="1" set="method" line="177"><f a="?title:?fn" v="null:null">
	<c path="String"/>
	<f a=":">
		<d/>
		<c path="Date"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCalendarPopup>
		<new public="1" set="method" line="18"><f a="?view:?options" v="null:null">
	<d/>
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.core.FocusManager" params="" file="src/haxe/ui/toolkit/core/FocusManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.FocusManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.FocusManager"/></instance>
		<get_instance set="method" line="6" static="1"><f a=""><c path="haxe.ui.toolkit.core.FocusManager"/></f></get_instance>
		<new public="1" set="method" line="16"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Macros" params="" file="src/haxe/ui/toolkit/core/Macros.hx">
		<traverseFileSystem set="method" line="76" static="1"><f a="path">
	<c path="String"/>
	<x path="Void"/>
</f></traverseFileSystem>
		<processNode set="method" line="237" static="1"><f a="node:types:paths">
	<c path="Xml"/>
	<x path="Map">
		<c path="String"/>
		<c path="String"/>
	</x>
	<c path="Array"><c path="String"/></c>
	<x path="Void"/>
</f></processNode>
		<getFunction set="method" line="272" static="1"><f a="name:fields">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<t path="haxe.macro.Function"/>
</f></getFunction>
		<addFunction set="method" line="288" static="1"><f a="name:e:access:fields:pos">
	<c path="String"/>
	<t path="haxe.macro.Expr"/>
	<c path="Array"><e path="haxe.macro.Access"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<t path="haxe.macro.Position"/>
	<x path="Void"/>
</f></addFunction>
		<getFieldsWithMeta set="method" line="296" static="1"><f a="meta:fields">
	<c path="String"/>
	<c path="Array"><t path="haxe.macro.Field"/></c>
	<c path="Array"><t path="haxe.macro.Field"/></c>
</f></getFieldsWithMeta>
		<getSuperClass set="method" line="308" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<t path="Null"><a>
	<t><t path="haxe.macro.Ref"><t path="haxe.macro.ClassType"/></t></t>
	<params><c path="Array"><e path="haxe.macro.Type"/></c></params>
</a></t>
</f></getSuperClass>
		<insertLine set="method" line="326" static="1"><f a="fn:e:location">
	<a><expr><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<expr><e path="haxe.macro.ExprDef"/></expr>
</a></expr></a>
	<t path="haxe.macro.Expr"/>
	<x path="Int"/>
	<x path="Void"/>
</f></insertLine>
		<insertExpr set="method" line="333" static="1"><f a="arr:pos:item">
	<c path="Array"><t path="haxe.macro.Expr"/></c>
	<x path="Int"/>
	<t path="haxe.macro.Expr"/>
	<c path="Array"><t path="haxe.macro.Expr"/></c>
</f></insertExpr>
		<componentClasses line="441" static="1"><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></componentClasses>
		<getClassNameFromType set="method" line="533" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
</f></getClassNameFromType>
		<hasMeta set="method" line="549" static="1"><f a="f:meta">
	<t path="haxe.macro.Field"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasMeta>
		<getClassName set="method" line="560" static="1"><f a="t">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
</f></getClassName>
		<hasInterface set="method" line="578" static="1"><f a="t:interfaceRequired">
	<e path="haxe.macro.Type"/>
	<c path="String"/>
	<x path="Bool"/>
</f></hasInterface>
		<resolveResource set="method" line="615" static="1"><f a="resourcePath:paths">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</f></resolveResource>
	</class>
	<class path="haxe.ui.toolkit.core.PopupManager" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.PopupManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.PopupManager"/></instance>
		<get_instance set="method" line="21" static="1"><f a=""><c path="haxe.ui.toolkit.core.PopupManager"/></f></get_instance>
		<defaultTitle public="1"><c path="String"/></defaultTitle>
		<defaultWidth public="1"><x path="Int"/></defaultWidth>
		<showSimple public="1" set="method" line="38"><f a="text:?title:?config:?fn" v=":null:1:null">
	<c path="String"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showSimple>
		<showCustom public="1" set="method" line="44"><f a="display:?title:?config:?fn" v=":null:1:null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCustom>
		<showList public="1" set="method" line="50"><f a="items:?selectedIndex:?title:?config:?fn" v=":-1:null:null:null">
	<d/>
	<x path="Int"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showList>
		<showCalendar public="1" set="method" line="73"><f a="?title:?fn" v="null:null">
	<c path="String"/>
	<f a=":">
		<d/>
		<c path="Date"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showCalendar>
		<showBusy public="1" set="method" line="91"><f a="text:?delay:?title:?config:?fn" v=":-1:null:null:null">
	<c path="String"/>
	<x path="Int"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></showBusy>
		<showPopup public="1" set="method" line="110"><f a="p">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Void"/>
</f></showPopup>
		<hidePopup public="1" set="method" line="138"><f a="p:?dispose" v=":true">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></hidePopup>
		<centerPopup public="1" set="method" line="156"><f a="p">
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
	<x path="Void"/>
</f></centerPopup>
		<buildPopup set="method" line="161"><f a="content:?title:?config:?fn" v=":null:null:null">
	<c path="haxe.ui.toolkit.controls.popups.PopupContent"/>
	<c path="String"/>
	<d/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.controls.popups.Popup"/>
</f></buildPopup>
		<buildConfig set="method" line="173"><f a="config">
	<d/>
	<d/>
</f></buildConfig>
		<buildButtonArray set="method" line="207"><f a="data">
	<d/>
	<c path="Array"><c path="haxe.ui.toolkit.core.PopupButtonInfo"/></c>
</f></buildButtonArray>
		<new public="1" set="method" line="34"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.PopupButton" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx" module="haxe.ui.toolkit.core.PopupManager">
		<OK public="1" get="inline" set="null" line="247" static="1"><x path="Int"/></OK>
		<YES public="1" get="inline" set="null" line="248" static="1"><x path="Int"/></YES>
		<NO public="1" get="inline" set="null" line="249" static="1"><x path="Int"/></NO>
		<CANCEL public="1" get="inline" set="null" line="250" static="1"><x path="Int"/></CANCEL>
		<CONFIRM public="1" get="inline" set="null" line="251" static="1"><x path="Int"/></CONFIRM>
		<CUSTOM public="1" get="inline" set="null" line="252" static="1"><x path="Int"/></CUSTOM>
	</class>
	<class path="haxe.ui.toolkit.core.PopupButtonInfo" params="" file="src/haxe/ui/toolkit/core/PopupManager.hx" module="haxe.ui.toolkit.core.PopupManager">
		<type public="1"><x path="Int"/></type>
		<text public="1"><c path="String"/></text>
		<fn public="1"><f a="">
	<d/>
	<x path="Void"/>
</f></fn>
		<new public="1" set="method" line="260"><f a="?type:?text:?fn" v="1:null:null">
	<x path="Int"/>
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Root" params="" file="src/haxe/ui/toolkit/core/Root.hx">
		<extends path="haxe.ui.toolkit.core.Component"/>
		<_modalOverlay><c path="haxe.ui.toolkit.core.Component"/></_modalOverlay>
		<_modalOverlayCounter><x path="Int"/></_modalOverlayCounter>
		<_mousePos><t path="openfl.geom.Point"/></_mousePos>
		<preInitialize set="method" line="28" override="1"><f a=""><x path="Void"/></f></preInitialize>
		<_onScreenResize set="method" line="39"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></_onScreenResize>
		<mousePosition public="1" get="accessor" set="null"><t path="openfl.geom.Point"/></mousePosition>
		<get_mousePosition set="method" line="48"><f a=""><t path="openfl.geom.Point"/></f></get_mousePosition>
		<resizeRoot set="method" line="54"><f a=""><x path="Void"/></f></resizeRoot>
		<showModalOverlay public="1" set="method" line="65"><f a=""><x path="Void"/></f></showModalOverlay>
		<hideModalOverlay public="1" set="method" line="92"><f a=""><x path="Void"/></f></hideModalOverlay>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></self>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.RootManager" params="" file="src/haxe/ui/toolkit/core/RootManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.RootManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.RootManager"/></instance>
		<get_instance set="method" line="10" static="1"><f a=""><c path="haxe.ui.toolkit.core.RootManager"/></f></get_instance>
		<_roots><c path="Array"><c path="haxe.ui.toolkit.core.Root"/></c></_roots>
		<createRoot public="1" set="method" line="26"><f a="?options:?fn" v="null:null">
	<d/>
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></createRoot>
		<destroyRoot public="1" set="method" line="59"><f a="root">
	<c path="haxe.ui.toolkit.core.Root"/>
	<x path="Void"/>
</f></destroyRoot>
		<destroyAllRoots public="1" set="method" line="67"><f a=""><x path="Void"/></f></destroyAllRoots>
		<roots public="1" get="accessor" set="null"><c path="Array"><c path="haxe.ui.toolkit.core.Root"/></c></roots>
		<get_roots public="1" set="method" line="74"><f a=""><c path="Array"><c path="haxe.ui.toolkit.core.Root"/></c></f></get_roots>
		<currentRoot public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Root"/></currentRoot>
		<get_currentRoot public="1" set="method" line="79"><f a=""><c path="haxe.ui.toolkit.core.Root"/></f></get_currentRoot>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Screen" params="" file="src/haxe/ui/toolkit/core/Screen.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Screen"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Screen"/></instance>
		<get_instance set="method" line="8" static="1"><f a=""><c path="haxe.ui.toolkit.core.Screen"/></f></get_instance>
		<width public="1" get="accessor" set="null"><x path="Float"/></width>
		<height public="1" get="accessor" set="null"><x path="Float"/></height>
		<addEventListener public="1" set="method" line="25"><f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<removeEventListener public="1" set="method" line="30"><f a="type:listener:?useCapture" v="::false">
	<c path="String"/>
	<f a="">
		<d/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<get_width set="method" line="35"><f a=""><x path="Float"/></f></get_width>
		<get_height set="method" line="39"><f a=""><x path="Float"/></f></get_height>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.Toolkit" params="" file="src/haxe/ui/toolkit/core/Toolkit.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.core.Toolkit"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.core.Toolkit"/></instance>
		<get_instance set="method" line="23" static="1"><f a=""><c path="haxe.ui.toolkit.core.Toolkit"/></f></get_instance>
		<init public="1" set="method" line="32" static="1"><f a=""><x path="Void"/></f></init>
		<_registeredProcessors static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_registeredProcessors>
		<registerXMLProcessor public="1" set="method" line="54" static="1"><f a="cls:prefix">
	<x path="Class"><c path="haxe.ui.toolkit.core.xml.IXMLProcessor"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></registerXMLProcessor>
		<useDefaultTheme public="1" line="64" static="1"><x path="Bool"/></useDefaultTheme>
		<theme public="1" static="1"><c path="haxe.ui.toolkit.themes.Theme"/></theme>
		<processXmlResource public="1" params="T" set="method" line="71" static="1"><f a="resourceId">
	<c path="String"/>
	<t path="Null"><c path="processXmlResource.T"/></t>
</f></processXmlResource>
		<processXml public="1" params="T" set="method" line="75" static="1"><f a="xml">
	<c path="Xml"/>
	<t path="Null"><c path="processXml.T"/></t>
</f></processXml>
		<processXmlNode params="T" set="method" line="83" static="1"><f a="node">
	<c path="Xml"/>
	<t path="Null"><c path="processXmlNode.T"/></t>
</f></processXmlNode>
		<_defaultTransition line="164" static="1"><c path="String"/></_defaultTransition>
		<_transitionRegister static="1"><c path="haxe.ds.StringMap"><c path="String"/></c></_transitionRegister>
		<defaultTransition public="1" get="accessor" set="accessor" static="1"><c path="String"/></defaultTransition>
		<get_defaultTransition set="method" line="169" static="1"><f a=""><c path="String"/></f></get_defaultTransition>
		<set_defaultTransition set="method" line="173" static="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_defaultTransition>
		<getTransitionForClass public="1" set="method" line="178" static="1"><f a="cls">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
</f></getTransitionForClass>
		<setTransitionForClass public="1" set="method" line="187" static="1"><f a="cls:transition">
	<x path="Class"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></x>
	<c path="String"/>
	<x path="Void"/>
</f></setTransitionForClass>
		<openFullscreen public="1" set="method" line="207" static="1"><f a="?fn" v="null">
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></openFullscreen>
		<openPopup public="1" set="method" line="212" static="1"><f a="?options:?fn" v="null:null">
	<d/>
	<f a="">
		<c path="haxe.ui.toolkit.core.Root"/>
		<x path="Void"/>
	</f>
	<c path="haxe.ui.toolkit.core.Root"/>
</f></openPopup>
		<initInstance set="method" line="202"><f a=""><x path="Void"/></f></initInstance>
		<new public="1" set="method" line="198"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.XMLController" params="" file="src/haxe/ui/toolkit/core/XMLController.hx">
		<extends path="haxe.ui.toolkit.core.Controller"/>
		<new public="1" set="method" line="7"><f a="xmlResourceId">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.core.base.HorizontalAlign" params="" file="src/haxe/ui/toolkit/core/base/HorizontalAlign.hx">
		<LEFT public="1" get="inline" set="null" line="8" static="1"><c path="String"/></LEFT>
		<RIGHT public="1" get="inline" set="null" line="9" static="1"><c path="String"/></RIGHT>
		<CENTER public="1" get="inline" set="null" line="10" static="1"><c path="String"/></CENTER>
		<haxe_doc><![CDATA[* ...
 * @author deep <system.grand@gmail.com>]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.core.base.State" params="" file="src/haxe/ui/toolkit/core/base/State.hx">
		<NORMAL public="1" get="inline" set="null" line="4" static="1"><c path="String"/></NORMAL>
		<OVER public="1" get="inline" set="null" line="5" static="1"><c path="String"/></OVER>
		<DOWN public="1" get="inline" set="null" line="6" static="1"><c path="String"/></DOWN>
		<DISABLED public="1" get="inline" set="null" line="7" static="1"><c path="String"/></DISABLED>
	</class>
	<class path="haxe.ui.toolkit.core.base.VerticalAlign" params="" file="src/haxe/ui/toolkit/core/base/VerticalAlign.hx">
		<TOP public="1" get="inline" set="null" line="8" static="1"><c path="String"/></TOP>
		<BOTTOM public="1" get="inline" set="null" line="9" static="1"><c path="String"/></BOTTOM>
		<CENTER public="1" get="inline" set="null" line="10" static="1"><c path="String"/></CENTER>
		<haxe_doc><![CDATA[* ...
 * @author deep <system.grand@gmail.com>]]></haxe_doc>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.Direction" params="" file="src/haxe/ui/toolkit/core/interfaces/Direction.hx">
		<HORIZONTAL public="1" get="inline" set="null" line="4" static="1"><c path="String"/></HORIZONTAL>
		<VERTICAL public="1" get="inline" set="null" line="5" static="1"><c path="String"/></VERTICAL>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.IItemRenderer" params="" file="src/haxe/ui/toolkit/core/interfaces/IItemRenderer.hx" interface="1">
		<extends path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/></extends>
		<extends path="haxe.ui.toolkit.core.interfaces.IStateComponent"/>
		<hash public="1"><c path="String"/></hash>
		<eventDispatcher public="1"><c path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/></eventDispatcher>
		<data public="1" get="null" set="null"><d/></data>
		<allowSelection public="1" set="method"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></allowSelection>
		<update public="1" set="method"><f a=""><x path="Void"/></f></update>
	</class>
	<class path="haxe.ui.toolkit.core.interfaces.InvalidationFlag" params="" file="src/haxe/ui/toolkit/core/interfaces/InvalidationFlag.hx">
		<LAYOUT public="1" get="inline" set="null" line="4" static="1"><x path="Int"/></LAYOUT>
		<DISPLAY public="1" get="inline" set="null" line="5" static="1"><x path="Int"/></DISPLAY>
		<SIZE public="1" get="inline" set="null" line="6" static="1"><x path="Int"/></SIZE>
		<STATE public="1" get="inline" set="null" line="7" static="1"><x path="Int"/></STATE>
		<DATA public="1" get="inline" set="null" line="8" static="1"><x path="Int"/></DATA>
		<STYLE public="1" get="inline" set="null" line="9" static="1"><x path="Int"/></STYLE>
		<ALL public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></ALL>
	</class>
	<class path="haxe.ui.toolkit.core.renderers.ItemRenderer" params="" file="src/haxe/ui/toolkit/core/renderers/ItemRenderer.hx">
		<extends path="haxe.ui.toolkit.core.StateComponent"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.core.renderers.ItemRenderer"/></implements>
		<implements path="haxe.ui.toolkit.core.interfaces.IItemRenderer"/>
		<STATE_NORMAL public="1" get="inline" set="null" line="14" static="1"><c path="String"/></STATE_NORMAL>
		<STATE_OVER public="1" get="inline" set="null" line="15" static="1"><c path="String"/></STATE_OVER>
		<STATE_SELECTED public="1" get="inline" set="null" line="16" static="1"><c path="String"/></STATE_SELECTED>
		<STATE_DISABLED public="1" get="inline" set="null" line="17" static="1"><c path="String"/></STATE_DISABLED>
		<hash public="1"><c path="String"/></hash>
		<eventDispatcher public="1"><c path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/></eventDispatcher>
		<initialize public="1" set="method" line="29" override="1"><f a=""><x path="Void"/></f></initialize>
		<addStatesRecursively set="method" line="35"><f a="c">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></addStatesRecursively>
		<_data><d/></_data>
		<data public="1" get="accessor" set="accessor"><d/></data>
		<get_data set="method" line="53"><f a=""><d/></f></get_data>
		<set_data set="method" line="56"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<update public="1" set="method" line="63"><f a=""><x path="Void"/></f></update>
		<allowSelection public="1" set="method" line="67"><f a="stageX:stageY">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></allowSelection>
		<attachEvents set="method" line="84"><f a="c">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></attachEvents>
		<attachEvent set="method" line="96"><f a="c">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Void"/>
</f></attachEvent>
		<_onComponentEvent set="method" line="106"><f a="event">
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></_onComponentEvent>
		<dispatchProxyEvent public="1" set="method" line="114"><f a="type:refEvent">
	<c path="String"/>
	<c path="haxe.ui.toolkit.events.UIEvent"/>
	<x path="Void"/>
</f></dispatchProxyEvent>
		<updateComponents set="method" line="127"><f a=""><x path="Void"/></f></updateComponents>
		<updateComponentValue set="method" line="139"><f a="c:value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<d/>
	<x path="Void"/>
</f></updateComponentValue>
		<get_states set="method" line="149" override="1"><f a=""><c path="Array"><c path="String"/></c></f></get_states>
		<set_state set="method" line="153" override="1"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_state>
		<setStateRecursively set="method" line="158"><f a="value:c">
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<x path="Void"/>
</f></setStateRecursively>
		<isInteractive set="method" line="174"><f a="c">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<x path="Bool"/>
</f></isInteractive>
		<clone public="1" set="method" line="184" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.ItemRenderer"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.ItemRenderer"/></f></self>
		<new public="1" set="method" line="22"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.renderers.BasicItemRenderer" params="" file="src/haxe/ui/toolkit/core/renderers/BasicItemRenderer.hx">
		<extends path="haxe.ui.toolkit.core.renderers.ItemRenderer"/>
		<set_data set="method" line="21" override="1"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.BasicItemRenderer"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.BasicItemRenderer"/></f></self>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.renderers.ComponentItemRenderer" params="" file="src/haxe/ui/toolkit/core/renderers/ComponentItemRenderer.hx">
		<extends path="haxe.ui.toolkit.core.renderers.BasicItemRenderer"/>
		<_component><c path="haxe.ui.toolkit.core.Component"/></_component>
		<set_data set="method" line="16" override="1"><f a="value">
	<d/>
	<d/>
</f></set_data>
		<getClassFromType set="method" line="33"><f a="type">
	<c path="String"/>
	<x path="Class"><c path="haxe.ui.toolkit.core.Component"/></x>
</f></getClassFromType>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.ComponentItemRenderer"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.core.renderers.ComponentItemRenderer"/></f></self>
		<new public="1" set="method" line="12"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.core.xml.IXMLProcessor" params="" file="src/haxe/ui/toolkit/core/xml/IXMLProcessor.hx" interface="1"><process public="1" set="method"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process></class>
	<class path="haxe.ui.toolkit.core.xml.XMLProcessor" params="" file="src/haxe/ui/toolkit/core/xml/XMLProcessor.hx">
		<implements path="haxe.ui.toolkit.core.xml.IXMLProcessor"/>
		<process public="1" set="method" line="8"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<stripNamespace public="1" set="method" line="12"><f a="nodeName">
	<c path="String"/>
	<c path="String"/>
</f></stripNamespace>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.DataProcessor" params="" file="src/haxe/ui/toolkit/core/xml/DataProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<createDataSource set="method" line="24" static="1"><f a="className:config">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></createDataSource>
		<process public="1" set="method" line="12" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.StyleProcessor" params="" file="src/haxe/ui/toolkit/core/xml/StyleProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<process public="1" set="method" line="12" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.core.xml.UIProcessor" params="" file="src/haxe/ui/toolkit/core/xml/UIProcessor.hx">
		<extends path="haxe.ui.toolkit.core.xml.XMLProcessor"/>
		<createComponent set="method" line="55" static="1"><f a="className:config">
	<c path="String"/>
	<c path="Xml"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></createComponent>
		<process public="1" set="method" line="30" override="1"><f a="node">
	<c path="Xml"/>
	<d/>
</f></process>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.IDataSource" params="" file="src/haxe/ui/toolkit/data/IDataSource.hx" interface="1">
		<id public="1" get="null" set="null"><c path="String"/></id>
		<create public="1" set="method"><f a="?config">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<createFromString public="1" set="method"><f a="?data:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<createFromResource public="1" set="method"><f a="resourceId:?config">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<open public="1" set="method"><f a=""><x path="Bool"/></f></open>
		<close public="1" set="method"><f a=""><x path="Bool"/></f></close>
		<moveFirst public="1" set="method"><f a=""><x path="Bool"/></f></moveFirst>
		<moveNext public="1" set="method"><f a=""><x path="Bool"/></f></moveNext>
		<get public="1" set="method"><f a=""><d/></f></get>
		<add public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></add>
		<update public="1" set="method"><f a="o">
	<d/>
	<x path="Bool"/>
</f></update>
		<remove public="1" set="method"><f a=""><x path="Bool"/></f></remove>
		<removeAll public="1" set="method"><f a=""><x path="Void"/></f></removeAll>
		<hash public="1" set="method"><f a=""><c path="String"/></f></hash>
		<size public="1" set="method"><f a=""><x path="Int"/></f></size>
	</class>
	<class path="haxe.ui.toolkit.data.DataSource" params="" file="src/haxe/ui/toolkit/data/DataSource.hx">
		<extends path="flash.events.EventDispatcher"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IEventDispatcher"/>
		<implements path="haxe.ui.toolkit.data.IDataSource"/>
		<SAFE_NUM get="inline" set="null" line="186" static="1"><x path="Int"/></SAFE_NUM>
		<clsId line="187" static="1"><x path="Int"/></clsId>
		<config public="1" get="accessor" set="null"><c path="Xml"/></config>
		<_config><c path="Xml"/></_config>
		<_id><c path="String"/></_id>
		<allowAdditions><x path="Bool"/></allowAdditions>
		<allowUpdates><x path="Bool"/></allowUpdates>
		<allowDeletions><x path="Bool"/></allowDeletions>
		<allowEvents><x path="Bool"/></allowEvents>
		<get_config set="method" line="24"><f a=""><c path="Xml"/></f></get_config>
		<clone public="1" set="method" line="28"><f a=""><c path="haxe.ui.toolkit.data.DataSource"/></f></clone>
		<id public="1" get="accessor" set="accessor"><c path="String"/></id>
		<get_id set="method" line="38"><f a=""><c path="String"/></f></get_id>
		<set_id set="method" line="42"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_id>
		<create public="1" set="method" line="47"><f a="?config" v="null">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<open public="1" set="method" line="57"><f a=""><x path="Bool"/></f></open>
		<close public="1" set="method" line="61"><f a=""><x path="Bool"/></f></close>
		<moveFirst public="1" set="method" line="65"><f a=""><x path="Bool"/></f></moveFirst>
		<moveNext public="1" set="method" line="69"><f a=""><x path="Bool"/></f></moveNext>
		<get public="1" set="method" line="73"><f a=""><d/></f></get>
		<add public="1" set="method" line="77"><f a="o">
	<d/>
	<x path="Bool"/>
</f></add>
		<update public="1" set="method" line="88"><f a="o">
	<d/>
	<x path="Bool"/>
</f></update>
		<remove public="1" set="method" line="99"><f a=""><x path="Bool"/></f></remove>
		<removeAll public="1" set="method" line="110"><f a=""><x path="Void"/></f></removeAll>
		<hash public="1" set="method" line="118"><f a=""><c path="String"/></f></hash>
		<size public="1" set="method" line="126"><f a=""><x path="Int"/></f></size>
		<_open set="method" line="133"><f a=""><x path="Bool"/></f></_open>
		<_close set="method" line="137"><f a=""><x path="Bool"/></f></_close>
		<_moveFirst set="method" line="141"><f a=""><x path="Bool"/></f></_moveFirst>
		<_moveNext set="method" line="145"><f a=""><x path="Bool"/></f></_moveNext>
		<_get set="method" line="149"><f a=""><d/></f></_get>
		<_add set="method" line="153"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_add>
		<_update set="method" line="157"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_update>
		<_remove set="method" line="161"><f a=""><x path="Bool"/></f></_remove>
		<createFromString public="1" set="method" line="168"><f a="?data:?config" v="null:null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<createFromResource public="1" set="method" line="172"><f a="resourceId:?config" v=":null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<dispatchChanged set="method" line="179"><f a=""><x path="Void"/></f></dispatchChanged>
		<getObjectId set="method" line="188"><f a="obj">
	<d/>
	<x path="Int"/>
</f></getObjectId>
		<new public="1" set="method" line="17"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.ArrayDataSource" params="" file="src/haxe/ui/toolkit/data/ArrayDataSource.hx">
		<extends path="haxe.ui.toolkit.data.DataSource"/>
		<array><c path="Array"><d/></c></array>
		<pos><x path="Int"/></pos>
		<create public="1" set="method" line="17" override="1"><f a="?config" v="null">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<_moveFirst set="method" line="47" override="1"><f a=""><x path="Bool"/></f></_moveFirst>
		<_moveNext set="method" line="55" override="1"><f a=""><x path="Bool"/></f></_moveNext>
		<_get set="method" line="68" override="1"><f a=""><d/></f></_get>
		<_add set="method" line="75" override="1"><f a="o">
	<d/>
	<x path="Bool"/>
</f></_add>
		<_remove set="method" line="80" override="1"><f a=""><x path="Bool"/></f></_remove>
		<size public="1" set="method" line="84" override="1"><f a=""><x path="Int"/></f></size>
		<createFromString public="1" set="method" line="91" override="1"><f a="?data:?config" v="null:null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.DataManager" params="" file="src/haxe/ui/toolkit/data/DataManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.data.DataManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.data.DataManager"/></instance>
		<get_instance set="method" line="9" static="1"><f a=""><c path="haxe.ui.toolkit.data.DataManager"/></f></get_instance>
		<_dataSourceMap><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.data.IDataSource"/></c></_dataSourceMap>
		<dataSources public="1" get="accessor" set="null">
			<c path="Array"><c path="haxe.ui.toolkit.data.IDataSource"/></c>
			<haxe_doc>*		List of registered data sources.</haxe_doc>
		</dataSources>
		<registerDataSource public="1" set="method" line="34">
			<f a="dataSource">
				<c path="haxe.ui.toolkit.data.IDataSource"/>
				<x path="Void"/>
			</f>
			<haxe_doc>*		Registers a data source for global access.
	 *		@param dataSource The data source to register - if dataSource has no id one will be generated</haxe_doc>
		</registerDataSource>
		<getRegisteredDataSource public="1" set="method" line="43"><f a="id">
	<c path="String"/>
	<c path="haxe.ui.toolkit.data.IDataSource"/>
</f></getRegisteredDataSource>
		<get_dataSources set="method" line="47"><f a=""><c path="Array"><c path="haxe.ui.toolkit.data.IDataSource"/></c></f></get_dataSources>
		<new public="1" set="method" line="26"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.FilesDataSource" params="" file="src/haxe/ui/toolkit/data/FilesDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<_dir><c path="String"/></_dir>
		<create public="1" set="method" line="17" override="1"><f a="?config" v="null">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<_open set="method" line="31" override="1"><f a=""><x path="Bool"/></f></_open>
		<createFromString public="1" set="method" line="57" override="1"><f a="?data:?config" v="null:null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<createFromResource public="1" set="method" line="63" override="1"><f a="resourceId:?config" v=":null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromResource>
		<isDir set="method" line="67"><f a="dir">
	<c path="String"/>
	<x path="Bool"/>
</f></isDir>
		<isRoot set="method" line="84"><f a="dir">
	<c path="String"/>
	<x path="Bool"/>
</f></isRoot>
		<fixDir set="method" line="94"><f a="dir">
	<c path="String"/>
	<c path="String"/>
</f></fixDir>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.JSONDataSource" params="" file="src/haxe/ui/toolkit/data/JSONDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<create public="1" set="method" line="14" override="1"><f a="?config" v="null">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<createFromString public="1" set="method" line="40" override="1"><f a="?data:?config" v="null:null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.MySQLDataSource" params="" file="src/haxe/ui/toolkit/data/MySQLDataSource.hx">
		<extends path="haxe.ui.toolkit.data.DataSource"/>
		<new public="1" set="method" line="9"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.data.XMLDataSource" params="" file="src/haxe/ui/toolkit/data/XMLDataSource.hx">
		<extends path="haxe.ui.toolkit.data.ArrayDataSource"/>
		<create public="1" set="method" line="11" override="1"><f a="?config" v="null">
	<c path="Xml"/>
	<x path="Void"/>
</f></create>
		<createFromString public="1" set="method" line="37" override="1"><f a="?data:?config" v="null:null">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></createFromString>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.events.MenuEvent" params="" file="src/haxe/ui/toolkit/events/MenuEvent.hx">
		<extends path="flash.events.Event"/>
		<SELECT public="1" line="8" static="1"><c path="String"/></SELECT>
		<OPEN public="1" line="9" static="1"><c path="String"/></OPEN>
		<menuItem public="1"><c path="haxe.ui.toolkit.controls.MenuItem"/></menuItem>
		<menu public="1"><c path="haxe.ui.toolkit.controls.Menu"/></menu>
		<new public="1" set="method" line="14"><f a="type:?menuItem" v=":null">
	<c path="String"/>
	<c path="haxe.ui.toolkit.controls.MenuItem"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.events.UIEvent" params="" file="src/haxe/ui/toolkit/events/UIEvent.hx">
		<extends path="flash.events.Event"/>
		<PREFIX public="1" get="inline" set="null" line="8" static="1"><c path="String"/></PREFIX>
		<INIT public="1" get="inline" set="null" line="10" static="1"><c path="String"/></INIT>
		<RESIZE public="1" get="inline" set="null" line="11" static="1"><c path="String"/></RESIZE>
		<READY public="1" get="inline" set="null" line="12" static="1"><c path="String"/></READY>
		<CLICK public="1" get="inline" set="null" line="14" static="1"><c path="String"/></CLICK>
		<MOUSE_DOWN public="1" get="inline" set="null" line="15" static="1"><c path="String"/></MOUSE_DOWN>
		<MOUSE_UP public="1" get="inline" set="null" line="16" static="1"><c path="String"/></MOUSE_UP>
		<MOUSE_OVER public="1" get="inline" set="null" line="17" static="1"><c path="String"/></MOUSE_OVER>
		<MOUSE_OUT public="1" get="inline" set="null" line="18" static="1"><c path="String"/></MOUSE_OUT>
		<MOUSE_MOVE public="1" get="inline" set="null" line="19" static="1"><c path="String"/></MOUSE_MOVE>
		<DOUBLE_CLICK public="1" get="inline" set="null" line="20" static="1"><c path="String"/></DOUBLE_CLICK>
		<ROLL_OVER public="1" get="inline" set="null" line="21" static="1"><c path="String"/></ROLL_OVER>
		<ROLL_OUT public="1" get="inline" set="null" line="22" static="1"><c path="String"/></ROLL_OUT>
		<CHANGE public="1" get="inline" set="null" line="23" static="1"><c path="String"/></CHANGE>
		<SCROLL public="1" get="inline" set="null" line="24" static="1"><c path="String"/></SCROLL>
		<ADDED public="1" get="inline" set="null" line="26" static="1"><c path="String"/></ADDED>
		<ADDED_TO_STAGE public="1" get="inline" set="null" line="27" static="1"><c path="String"/></ADDED_TO_STAGE>
		<REMOVED public="1" get="inline" set="null" line="28" static="1"><c path="String"/></REMOVED>
		<REMOVED_FROM_STAGE public="1" get="inline" set="null" line="29" static="1"><c path="String"/></REMOVED_FROM_STAGE>
		<ACTIVATE public="1" get="inline" set="null" line="30" static="1"><c path="String"/></ACTIVATE>
		<DEACTIVATE public="1" get="inline" set="null" line="31" static="1"><c path="String"/></DEACTIVATE>
		<GLYPH_CLICK public="1" get="inline" set="null" line="33" static="1"><c path="String"/></GLYPH_CLICK>
		<COMPONENT_EVENT public="1" get="inline" set="null" line="34" static="1"><c path="String"/></COMPONENT_EVENT>
		<displayObject public="1"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></displayObject>
		<component public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.core.Component"/></component>
		<data public="1"><d/></data>
		<stageX public="1"><x path="Float"/></stageX>
		<stageY public="1"><x path="Float"/></stageY>
		<clone public="1" set="method" line="47" override="1"><f a=""><t path="openfl.events.Event"/></f></clone>
		<_component><c path="haxe.ui.toolkit.core.Component"/></_component>
		<get_component set="method" line="57"><f a=""><c path="haxe.ui.toolkit.core.Component"/></f></get_component>
		<getComponentAs public="1" params="T" set="method" line="67"><f a="type">
	<x path="Class"><c path="getComponentAs.T"/></x>
	<t path="Null"><c path="getComponentAs.T"/></t>
</f></getComponentAs>
		<getDataAs public="1" params="T" set="method" line="76"><f a="type">
	<x path="Class"><c path="getDataAs.T"/></x>
	<t path="Null"><c path="getDataAs.T"/></t>
</f></getDataAs>
		<new public="1" set="method" line="42"><f a="type:?c:?bubbles:?cancelable" v=":null:false:false">
	<c path="String"/>
	<c path="haxe.ui.toolkit.core.Component"/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.hscript.ClientWrapper" params="" file="src/haxe/ui/toolkit/hscript/ClientWrapper.hx">
		<language public="1"><c path="String"/></language>
		<dpi public="1"><x path="Float"/></dpi>
		<platform public="1"><c path="String"/></platform>
		<target public="1"><c path="String"/></target>
		<screenWidth public="1"><x path="Float"/></screenWidth>
		<screenHeight public="1"><x path="Float"/></screenHeight>
		<windowWidth public="1"><x path="Float"/></windowWidth>
		<windowHeight public="1"><x path="Float"/></windowHeight>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.hscript.ScriptManager" params="" file="src/haxe/ui/toolkit/hscript/ScriptManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.hscript.ScriptManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.hscript.ScriptManager"/></instance>
		<get_instance set="method" line="6" static="1"><f a=""><c path="haxe.ui.toolkit.hscript.ScriptManager"/></f></get_instance>
		<_scripts><c path="Array"><c path="String"/></c></_scripts>
		<addScript public="1" set="method" line="22"><f a="script">
	<c path="String"/>
	<x path="Void"/>
</f></addScript>
		<executeScript public="1" params="T" set="method" line="26"><f a="script">
	<c path="String"/>
	<t path="Null"><c path="executeScript.T"/></t>
</f></executeScript>
		<new public="1" set="method" line="18"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.hscript.ScriptUtils" params="" file="src/haxe/ui/toolkit/hscript/ScriptUtils.hx">
		<isScript public="1" set="method" line="4" static="1"><f a="data">
	<c path="String"/>
	<x path="Bool"/>
</f></isScript>
		<isCssException public="1" set="method" line="18" static="1"><f a="name">
	<c path="String"/>
	<x path="Bool"/>
</f></isCssException>
	</class>
	<class path="haxe.ui.toolkit.layout.AbsoluteLayout" params="" file="src/haxe/ui/toolkit/layout/AbsoluteLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.AbsoluteLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.AbsoluteLayout"/></f></self>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.BoxLayout" params="" file="src/haxe/ui/toolkit/layout/BoxLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="14" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="61" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="100" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_usableHeight set="method" line="122" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.BoxLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.BoxLayout"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.GridLayout" params="" file="src/haxe/ui/toolkit/layout/GridLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.layout.Layout"/></implements>
		<_columns><x path="Int"/></_columns>
		<columns public="1" get="accessor" set="accessor">
			<x path="Int"/>
			<meta><m n=":clonable"/></meta>
		</columns>
		<get_columns set="method" line="20"><f a=""><x path="Int"/></f></get_columns>
		<set_columns set="method" line="24"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_columns>
		<resizeChildren set="method" line="32" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="97" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="147" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<get_usableHeight set="method" line="153" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<calcColumnWidths set="method" line="162"><f a=""><c path="Array"><x path="Float"/></c></f></calcColumnWidths>
		<calcRowHeights public="1" set="method" line="218"><f a=""><c path="Array"><x path="Float"/></c></f></calcRowHeights>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.GridLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.GridLayout"/></f></self>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.HorizontalContinuousLayout" params="" file="src/haxe/ui/toolkit/layout/HorizontalContinuousLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<repositionChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.HorizontalContinuousLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.HorizontalContinuousLayout"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.HorizontalLayout" params="" file="src/haxe/ui/toolkit/layout/HorizontalLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="13" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="65" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableWidth set="method" line="95" override="1"><f a=""><x path="Float"/></f></get_usableWidth>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.HorizontalLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.HorizontalLayout"/></f></self>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.VerticalContinuousLayout" params="" file="src/haxe/ui/toolkit/layout/VerticalContinuousLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<repositionChildren set="method" line="11" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.VerticalContinuousLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.VerticalContinuousLayout"/></f></self>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.layout.VerticalLayout" params="" file="src/haxe/ui/toolkit/layout/VerticalLayout.hx">
		<extends path="haxe.ui.toolkit.layout.Layout"/>
		<resizeChildren set="method" line="13" override="1"><f a=""><x path="Void"/></f></resizeChildren>
		<repositionChildren set="method" line="65" override="1"><f a=""><x path="Void"/></f></repositionChildren>
		<get_usableHeight set="method" line="95" override="1"><f a=""><x path="Float"/></f></get_usableHeight>
		<clone public="1" set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.VerticalLayout"/></f></clone>
		<self set="method" line="1" override="1"><f a=""><c path="haxe.ui.toolkit.layout.VerticalLayout"/></f></self>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":build"><e>'???'</e></m>
			<m n=":autoBuild"><e>'???'</e></m>
		</meta>
	</class>
	<class path="haxe.ui.toolkit.resources.ResourceManager" params="" file="src/haxe/ui/toolkit/resources/ResourceManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.resources.ResourceManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.resources.ResourceManager"/></instance>
		<get_instance set="method" line="17" static="1"><f a=""><c path="haxe.ui.toolkit.resources.ResourceManager"/></f></get_instance>
		<getXML public="1" set="method" line="31"><f a="resourceId:?locale" v=":null">
	<c path="String"/>
	<c path="String"/>
	<c path="Xml"/>
</f></getXML>
		<getText public="1" set="method" line="40"><f a="resourceId:?locale" v=":null">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
</f></getText>
		<getSVG public="1" set="method" line="49"><f a="resourceId:?locale" v=":null">
	<c path="String"/>
	<c path="String"/>
	<c path="format.SVG"/>
</f></getSVG>
		<getBitmapData public="1" set="method" line="59"><f a="resourceId:?locale" v=":null">
	<c path="String"/>
	<c path="String"/>
	<t path="openfl.display.BitmapData"/>
</f></getBitmapData>
		<reset public="1" set="method" line="83"><f a=""><x path="Void"/></f></reset>
		<new public="1" set="method" line="27"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style.Styles" params="" file="src/haxe/ui/toolkit/style/Styles.hx">
		<_styles><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.style.Style"/></c></_styles>
		<_styleRules><c path="Array"><c path="String"/></c></_styleRules>
		<rules public="1" get="accessor" set="null"><t path="Iterator"><c path="String"/></t></rules>
		<addStyle public="1" set="method" line="16"><f a="rule:style">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></addStyle>
		<getStyle public="1" set="method" line="38"><f a="rule">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></getStyle>
		<get_rules set="method" line="42"><f a=""><t path="Iterator"><c path="String"/></t></f></get_rules>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style.DefaultStyles" params="" file="src/haxe/ui/toolkit/style/DefaultStyles.hx">
		<extends path="haxe.ui.toolkit.style.Styles"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style.Style" params="" file="src/haxe/ui/toolkit/style/Style.hx">
		<implements path="haxe.ui.toolkit.core.interfaces.IClonable"><c path="haxe.ui.toolkit.style.Style"/></implements>
		<NONE public="1" get="inline" set="null" line="11" static="1"><x path="Int"/></NONE>
		<_dynamicValues><x path="Map">
	<c path="String"/>
	<c path="String"/>
</x></_dynamicValues>
		<_target><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></_target>
		<_autoApply><x path="Bool"/></_autoApply>
		<_width><x path="Int"/></_width>
		<_height><x path="Int"/></_height>
		<_percentWidth><x path="Int"/></_percentWidth>
		<_percentHeight><x path="Int"/></_percentHeight>
		<_autoSize><x path="Int"/></_autoSize>
		<_backgroundImage><c path="String"/></_backgroundImage>
		<_backgroundImageScale9><t path="openfl.geom.Rectangle"/></_backgroundImageScale9>
		<_backgroundImageRect><t path="openfl.geom.Rectangle"/></_backgroundImageRect>
		<_backgroundColor><x path="Int"/></_backgroundColor>
		<_backgroundColorGradientEnd><x path="Int"/></_backgroundColorGradientEnd>
		<_borderColor><x path="Int"/></_borderColor>
		<_borderSize><x path="Int"/></_borderSize>
		<_color><x path="Int"/></_color>
		<_paddingLeft><x path="Int"/></_paddingLeft>
		<_paddingRight><x path="Int"/></_paddingRight>
		<_paddingTop><x path="Int"/></_paddingTop>
		<_paddingBottom><x path="Int"/></_paddingBottom>
		<_spacingX><x path="Int"/></_spacingX>
		<_spacingY><x path="Int"/></_spacingY>
		<_verticalAlignment><c path="String"/></_verticalAlignment>
		<_horizontalAlignment><c path="String"/></_horizontalAlignment>
		<_cornerRadiusTopLeft><x path="Int"/></_cornerRadiusTopLeft>
		<_cornerRadiusTopRight><x path="Int"/></_cornerRadiusTopRight>
		<_cornerRadiusBottomLeft><x path="Int"/></_cornerRadiusBottomLeft>
		<_cornerRadiusBottomRight><x path="Int"/></_cornerRadiusBottomRight>
		<_filter><t path="openfl.filters.BitmapFilter"/></_filter>
		<_filterSet><x path="Bool"/></_filterSet>
		<_alpha><x path="Float"/></_alpha>
		<_fontName><c path="String"/></_fontName>
		<_fontSize><x path="Float"/></_fontSize>
		<_fontScale><x path="Float"/></_fontScale>
		<_fontEmbedded><x path="Float"/></_fontEmbedded>
		<_textAlign><c path="String"/></_textAlign>
		<_iconPosition><c path="String"/></_iconPosition>
		<_icon><c path="String"/></_icon>
		<_hasButtons><x path="Int"/></_hasButtons>
		<_gradientType><c path="String"/></_gradientType>
		<_selectionMethod><c path="String"/></_selectionMethod>
		<_autoHideScrolls><x path="Int"/></_autoHideScrolls>
		<_inlineScrolls><x path="Int"/></_inlineScrolls>
		<width public="1" get="accessor" set="accessor"><x path="Int"/></width>
		<height public="1" get="accessor" set="accessor"><x path="Int"/></height>
		<percentWidth public="1" get="accessor" set="accessor"><x path="Int"/></percentWidth>
		<percentHeight public="1" get="accessor" set="accessor"><x path="Int"/></percentHeight>
		<autoSize public="1" get="accessor" set="accessor"><x path="Bool"/></autoSize>
		<autoSizeSet public="1" get="accessor" set="null"><x path="Bool"/></autoSizeSet>
		<backgroundImage public="1" get="accessor" set="accessor"><c path="String"/></backgroundImage>
		<backgroundImageScale9 public="1" get="accessor" set="accessor"><t path="openfl.geom.Rectangle"/></backgroundImageScale9>
		<backgroundImageRect public="1" get="accessor" set="accessor"><t path="openfl.geom.Rectangle"/></backgroundImageRect>
		<backgroundColor public="1" get="accessor" set="accessor"><x path="Int"/></backgroundColor>
		<backgroundColorGradientEnd public="1" get="accessor" set="accessor"><x path="Int"/></backgroundColorGradientEnd>
		<borderColor public="1" get="accessor" set="accessor"><x path="Int"/></borderColor>
		<borderSize public="1" get="accessor" set="accessor"><x path="Int"/></borderSize>
		<color public="1" get="accessor" set="accessor"><x path="Int"/></color>
		<paddingLeft public="1" get="accessor" set="accessor"><x path="Int"/></paddingLeft>
		<paddingRight public="1" get="accessor" set="accessor"><x path="Int"/></paddingRight>
		<paddingTop public="1" get="accessor" set="accessor"><x path="Int"/></paddingTop>
		<paddingBottom public="1" get="accessor" set="accessor"><x path="Int"/></paddingBottom>
		<padding public="1" get="accessor" set="accessor"><x path="Int"/></padding>
		<spacingX public="1" get="accessor" set="accessor"><x path="Int"/></spacingX>
		<spacingY public="1" get="accessor" set="accessor"><x path="Int"/></spacingY>
		<spacing public="1" get="accessor" set="accessor"><x path="Int"/></spacing>
		<verticalAlignment public="1" get="accessor" set="accessor"><c path="String"/></verticalAlignment>
		<horizontalAlignment public="1" get="accessor" set="accessor"><c path="String"/></horizontalAlignment>
		<cornerRadiusTopLeft public="1" get="accessor" set="accessor"><x path="Int"/></cornerRadiusTopLeft>
		<cornerRadiusTopRight public="1" get="accessor" set="accessor"><x path="Int"/></cornerRadiusTopRight>
		<cornerRadiusBottomLeft public="1" get="accessor" set="accessor"><x path="Int"/></cornerRadiusBottomLeft>
		<cornerRadiusBottomRight public="1" get="accessor" set="accessor"><x path="Int"/></cornerRadiusBottomRight>
		<cornerRadius public="1" get="accessor" set="accessor"><x path="Int"/></cornerRadius>
		<filter public="1" get="accessor" set="accessor"><t path="openfl.filters.BitmapFilter"/></filter>
		<alpha public="1" get="accessor" set="accessor"><x path="Float"/></alpha>
		<fontName public="1" get="accessor" set="accessor"><c path="String"/></fontName>
		<fontSize public="1" get="accessor" set="accessor"><x path="Float"/></fontSize>
		<fontScale public="1" get="accessor" set="accessor"><x path="Float"/></fontScale>
		<fontEmbedded public="1" get="accessor" set="accessor"><x path="Bool"/></fontEmbedded>
		<textAlign public="1" get="accessor" set="accessor"><c path="String"/></textAlign>
		<iconPosition public="1" get="accessor" set="accessor"><c path="String"/></iconPosition>
		<icon public="1" get="accessor" set="accessor"><c path="String"/></icon>
		<hasButtons public="1" get="accessor" set="accessor"><x path="Bool"/></hasButtons>
		<gradientType public="1" get="accessor" set="accessor"><c path="String"/></gradientType>
		<selectionMethod public="1" get="accessor" set="accessor"><c path="String"/></selectionMethod>
		<autoHideScrolls public="1" get="accessor" set="accessor"><x path="Bool"/></autoHideScrolls>
		<inlineScrolls public="1" get="accessor" set="accessor"><x path="Bool"/></inlineScrolls>
		<target public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></target>
		<autoApply public="1" get="accessor" set="accessor"><x path="Bool"/></autoApply>
		<get_target set="method" line="113"><f a=""><c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/></f></get_target>
		<set_target set="method" line="117"><f a="value">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObject"/>
</f></set_target>
		<get_autoApply set="method" line="123"><f a=""><x path="Bool"/></f></get_autoApply>
		<set_autoApply set="method" line="127"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoApply>
		<get_width set="method" line="132"><f a=""><x path="Int"/></f></get_width>
		<set_width set="method" line="139"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_width>
		<get_height set="method" line="147"><f a=""><x path="Int"/></f></get_height>
		<set_height set="method" line="154"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_height>
		<get_percentWidth set="method" line="162"><f a=""><x path="Int"/></f></get_percentWidth>
		<set_percentWidth set="method" line="169"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_percentWidth>
		<get_percentHeight set="method" line="177"><f a=""><x path="Int"/></f></get_percentHeight>
		<set_percentHeight set="method" line="184"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_percentHeight>
		<get_autoSize set="method" line="192"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize set="method" line="202"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<get_autoSizeSet set="method" line="208"><f a=""><x path="Bool"/></f></get_autoSizeSet>
		<get_backgroundImage set="method" line="218"><f a=""><c path="String"/></f></get_backgroundImage>
		<set_backgroundImage set="method" line="225"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_backgroundImage>
		<get_backgroundImageScale9 set="method" line="233"><f a=""><t path="openfl.geom.Rectangle"/></f></get_backgroundImageScale9>
		<set_backgroundImageScale9 set="method" line="240"><f a="value">
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
</f></set_backgroundImageScale9>
		<get_backgroundImageRect set="method" line="248"><f a=""><t path="openfl.geom.Rectangle"/></f></get_backgroundImageRect>
		<set_backgroundImageRect set="method" line="255"><f a="value">
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
</f></set_backgroundImageRect>
		<get_backgroundColor set="method" line="263"><f a=""><x path="Int"/></f></get_backgroundColor>
		<set_backgroundColor set="method" line="270"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_backgroundColor>
		<get_backgroundColorGradientEnd set="method" line="278"><f a=""><x path="Int"/></f></get_backgroundColorGradientEnd>
		<set_backgroundColorGradientEnd set="method" line="285"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_backgroundColorGradientEnd>
		<get_borderColor set="method" line="293"><f a=""><x path="Int"/></f></get_borderColor>
		<set_borderColor set="method" line="300"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_borderColor>
		<get_borderSize set="method" line="308"><f a=""><x path="Int"/></f></get_borderSize>
		<set_borderSize set="method" line="315"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_borderSize>
		<get_color set="method" line="323"><f a=""><x path="Int"/></f></get_color>
		<set_color set="method" line="330"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_color>
		<get_paddingLeft set="method" line="338"><f a=""><x path="Int"/></f></get_paddingLeft>
		<set_paddingLeft set="method" line="348"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_paddingLeft>
		<get_paddingRight set="method" line="356"><f a=""><x path="Int"/></f></get_paddingRight>
		<set_paddingRight set="method" line="366"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_paddingRight>
		<get_paddingTop set="method" line="374"><f a=""><x path="Int"/></f></get_paddingTop>
		<set_paddingTop set="method" line="384"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_paddingTop>
		<get_paddingBottom set="method" line="392"><f a=""><x path="Int"/></f></get_paddingBottom>
		<set_paddingBottom set="method" line="402"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_paddingBottom>
		<get_padding set="method" line="410"><f a=""><x path="Int"/></f></get_padding>
		<set_padding set="method" line="417"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_padding>
		<get_spacingX set="method" line="428"><f a=""><x path="Int"/></f></get_spacingX>
		<set_spacingX set="method" line="438"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingX>
		<get_spacingY set="method" line="446"><f a=""><x path="Int"/></f></get_spacingY>
		<set_spacingY set="method" line="456"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacingY>
		<get_spacing set="method" line="464"><f a=""><x path="Int"/></f></get_spacing>
		<set_spacing set="method" line="471"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_spacing>
		<get_horizontalAlignment set="method" line="480"><f a=""><c path="String"/></f></get_horizontalAlignment>
		<set_horizontalAlignment set="method" line="487"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_horizontalAlignment>
		<get_verticalAlignment set="method" line="495"><f a=""><c path="String"/></f></get_verticalAlignment>
		<set_verticalAlignment set="method" line="502"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_verticalAlignment>
		<get_cornerRadiusTopLeft set="method" line="510"><f a=""><x path="Int"/></f></get_cornerRadiusTopLeft>
		<set_cornerRadiusTopLeft set="method" line="520"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_cornerRadiusTopLeft>
		<get_cornerRadiusTopRight set="method" line="528"><f a=""><x path="Int"/></f></get_cornerRadiusTopRight>
		<set_cornerRadiusTopRight set="method" line="538"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_cornerRadiusTopRight>
		<get_cornerRadiusBottomLeft set="method" line="546"><f a=""><x path="Int"/></f></get_cornerRadiusBottomLeft>
		<set_cornerRadiusBottomLeft set="method" line="556"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_cornerRadiusBottomLeft>
		<get_cornerRadiusBottomRight set="method" line="564"><f a=""><x path="Int"/></f></get_cornerRadiusBottomRight>
		<set_cornerRadiusBottomRight set="method" line="574"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_cornerRadiusBottomRight>
		<get_cornerRadius set="method" line="582"><f a=""><x path="Int"/></f></get_cornerRadius>
		<set_cornerRadius set="method" line="589"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_cornerRadius>
		<get_filter set="method" line="600"><f a=""><t path="openfl.filters.BitmapFilter"/></f></get_filter>
		<set_filter set="method" line="607"><f a="value">
	<t path="openfl.filters.BitmapFilter"/>
	<t path="openfl.filters.BitmapFilter"/>
</f></set_filter>
		<get_alpha set="method" line="616"><f a=""><x path="Float"/></f></get_alpha>
		<set_alpha set="method" line="623"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_alpha>
		<get_fontName set="method" line="631"><f a=""><c path="String"/></f></get_fontName>
		<set_fontName set="method" line="638"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_fontName>
		<get_fontSize set="method" line="646"><f a=""><x path="Float"/></f></get_fontSize>
		<set_fontSize set="method" line="657"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fontSize>
		<get_fontScale set="method" line="665"><f a=""><x path="Float"/></f></get_fontScale>
		<set_fontScale set="method" line="672"><f a="value">
	<x path="Float"/>
	<x path="Float"/>
</f></set_fontScale>
		<get_fontEmbedded set="method" line="680"><f a=""><x path="Bool"/></f></get_fontEmbedded>
		<set_fontEmbedded set="method" line="690"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_fontEmbedded>
		<get_textAlign set="method" line="696"><f a=""><c path="String"/></f></get_textAlign>
		<set_textAlign set="method" line="703"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_textAlign>
		<get_iconPosition set="method" line="711"><f a=""><c path="String"/></f></get_iconPosition>
		<set_iconPosition set="method" line="718"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_iconPosition>
		<get_icon set="method" line="726"><f a=""><c path="String"/></f></get_icon>
		<set_icon set="method" line="733"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_icon>
		<get_hasButtons set="method" line="741"><f a=""><x path="Bool"/></f></get_hasButtons>
		<set_hasButtons set="method" line="751"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_hasButtons>
		<get_gradientType set="method" line="757"><f a=""><c path="String"/></f></get_gradientType>
		<set_gradientType set="method" line="764"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_gradientType>
		<get_selectionMethod set="method" line="772"><f a=""><c path="String"/></f></get_selectionMethod>
		<set_selectionMethod set="method" line="779"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_selectionMethod>
		<get_autoHideScrolls set="method" line="787"><f a=""><x path="Bool"/></f></get_autoHideScrolls>
		<set_autoHideScrolls set="method" line="797"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoHideScrolls>
		<get_inlineScrolls set="method" line="803"><f a=""><x path="Bool"/></f></get_inlineScrolls>
		<set_inlineScrolls set="method" line="813"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_inlineScrolls>
		<apply set="method" line="819"><f a=""><x path="Void"/></f></apply>
		<addDynamicValue public="1" set="method" line="827"><f a="property:script">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></addDynamicValue>
		<hasDynamicValue set="method" line="834"><f a="property">
	<c path="String"/>
	<x path="Bool"/>
</f></hasDynamicValue>
		<getDynamicValue params="T" set="method" line="841"><f a="property">
	<c path="String"/>
	<t path="Null"><c path="getDynamicValue.T"/></t>
</f></getDynamicValue>
		<merge public="1" set="method" line="847"><f a="with">
	<c path="haxe.ui.toolkit.style.Style"/>
	<x path="Void"/>
</f></merge>
		<toString public="1" set="method" line="911"><f a=""><c path="String"/></f></toString>
		<self public="1" set="method" line="926"><f a=""><c path="haxe.ui.toolkit.style.Style"/></f></self>
		<clone public="1" set="method" line="927"><f a=""><c path="haxe.ui.toolkit.style.Style"/></f></clone>
		<new public="1" set="method" line="105"><f a="?defaults" v="null">
	<d/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.style.StyleHelper" params="" file="src/haxe/ui/toolkit/style/StyleHelper.hx">
		<sectionCache static="1"><c path="haxe.ds.StringMap"><t path="openfl.display.BitmapData"/></c></sectionCache>
		<clearCache public="1" set="method" line="20" static="1"><f a=""><x path="Void"/></f></clearCache>
		<paintStyle public="1" set="method" line="24" static="1"><f a="g:style:rc">
	<t path="openfl.display.Graphics"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<t path="openfl.geom.Rectangle"/>
	<x path="Void"/>
</f></paintStyle>
		<paintScale9 public="1" set="method" line="132" static="1"><f a="g:resourceId:resourceRect:scale9:rc">
	<t path="openfl.display.Graphics"/>
	<c path="String"/>
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
	<x path="Void"/>
</f></paintScale9>
		<paintCompoundBitmap public="1" set="method" line="164" static="1"><f a="g:resourceId:resourceRect:sourceRects:targetRect">
	<t path="openfl.display.Graphics"/>
	<c path="String"/>
	<t path="openfl.geom.Rectangle"/>
	<c path="haxe.ds.StringMap"><t path="openfl.geom.Rectangle"/></c>
	<t path="openfl.geom.Rectangle"/>
	<x path="Void"/>
</f></paintCompoundBitmap>
		<paintBitmapSection public="1" set="method" line="237" static="1"><f a="g:resourceId:resourceRect:src:dst">
	<t path="openfl.display.Graphics"/>
	<c path="String"/>
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.geom.Rectangle"/>
	<x path="Void"/>
</f></paintBitmapSection>
		<getBitmapSection set="method" line="279" static="1"><f a="resourceId:?rc" v=":null">
	<c path="String"/>
	<t path="openfl.geom.Rectangle"/>
	<t path="openfl.display.BitmapData"/>
</f></getBitmapSection>
	</class>
	<class path="haxe.ui.toolkit.style.StyleManager" params="" file="src/haxe/ui/toolkit/style/StyleManager.hx">
		<_instance static="1"><c path="haxe.ui.toolkit.style.StyleManager"/></_instance>
		<instance public="1" get="accessor" set="null" static="1"><c path="haxe.ui.toolkit.style.StyleManager"/></instance>
		<get_instance set="method" line="15" static="1"><f a=""><c path="haxe.ui.toolkit.style.StyleManager"/></f></get_instance>
		<_styles><c path="haxe.ds.StringMap"><c path="haxe.ui.toolkit.style._StyleManager.StyleRule"/></c></_styles>
		<_rules><c path="Array"><c path="String"/></c></_rules>
		<stylesBuilt><x path="Int"/></stylesBuilt>
		<stylesBuiltFor><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></stylesBuiltFor>
		<hasStyles public="1" get="accessor" set="null"><x path="Bool"/></hasStyles>
		<_cacheStyles><x path="Bool"/></_cacheStyles>
		<_cachedStyles><x path="Map">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</x></_cachedStyles>
		<addStyle public="1" set="method" line="42"><f a="rule:style">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<x path="Void"/>
</f></addStyle>
		<addStyles public="1" set="method" line="62"><f a="styles">
	<c path="haxe.ui.toolkit.style.Styles"/>
	<x path="Void"/>
</f></addStyles>
		<findStyle public="1" set="method" line="68"><f a="rule">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></findStyle>
		<clear public="1" set="method" line="76"><f a=""><x path="Void"/></f></clear>
		<findAncestor set="method" line="82"><f a="c:rulePart">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.style._StyleManager.StyleRulePart"/>
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
</f></findAncestor>
		<rulePartMatch set="method" line="100"><f a="c:rulePart:state:?overriddenClassName" v=":::null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="haxe.ui.toolkit.style._StyleManager.StyleRulePart"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></rulePartMatch>
		<ruleMatch set="method" line="150"><f a="c:rule:state:?overriddenClassName" v=":::null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></ruleMatch>
		<buildStyleFor public="1" set="method" line="203"><f a="c:?state" v=":null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></buildStyleFor>
		<buildCacheKey set="method" line="268"><f a="c:?state" v=":null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="String"/>
</f></buildCacheKey>
		<buildFullCacheKey set="method" line="296"><f a="c:?state" v=":null">
	<c path="haxe.ui.toolkit.core.interfaces.IDisplayObjectContainer"/>
	<c path="String"/>
	<c path="String"/>
</f></buildFullCacheKey>
		<dump public="1" set="method" line="310"><f a=""><x path="Void"/></f></dump>
		<get_hasStyles set="method" line="317"><f a=""><x path="Bool"/></f></get_hasStyles>
		<new public="1" set="method" line="36"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.style._StyleManager.StyleRule" params="" file="src/haxe/ui/toolkit/style/StyleManager.hx" private="1" module="haxe.ui.toolkit.style.StyleManager">
		<ruleParts public="1"><c path="Array"><c path="haxe.ui.toolkit.style._StyleManager.StyleRulePart"/></c></ruleParts>
		<style public="1"><c path="haxe.ui.toolkit.style.Style"/></style>
		<containsClassName public="1" set="method" line="339"><f a="className">
	<c path="String"/>
	<x path="Bool"/>
</f></containsClassName>
		<isRelevant public="1" set="method" line="350"><f a="id:className:state:styleName">
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<x path="Bool"/>
</f></isRelevant>
		<new public="1" set="method" line="329"><f a="rule:style">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Style"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.style._StyleManager.StyleRulePart" params="" file="src/haxe/ui/toolkit/style/StyleManager.hx" private="1" module="haxe.ui.toolkit.style.StyleManager">
		<id public="1"><c path="String"/></id>
		<className public="1"><c path="String"/></className>
		<state public="1"><c path="String"/></state>
		<styleName public="1"><c path="String"/></styleName>
		<new public="1" set="method" line="379"><f a="rulePart">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.style.StyleParser" params="" file="src/haxe/ui/toolkit/style/StyleParser.hx"><fromString public="1" set="method" line="9" static="1"><f a="styleString">
	<c path="String"/>
	<c path="haxe.ui.toolkit.style.Styles"/>
</f></fromString></class>
	<class path="haxe.ui.toolkit.text.ITextDisplay" params="" file="src/haxe/ui/toolkit/text/ITextDisplay.hx" interface="1">
		<text public="1" get="null" set="null"><c path="String"/></text>
		<style public="1" get="null" set="null"><c path="haxe.ui.toolkit.style.Style"/></style>
		<display public="1" get="null" set="null"><t path="openfl.display.DisplayObject"/></display>
		<interactive public="1" get="null" set="null"><x path="Bool"/></interactive>
		<multiline public="1" get="null" set="null"><x path="Bool"/></multiline>
		<wrapLines public="1" get="null" set="null"><x path="Bool"/></wrapLines>
		<displayAsPassword public="1" get="null" set="null"><x path="Bool"/></displayAsPassword>
		<visible public="1" get="null" set="null"><x path="Bool"/></visible>
		<selectable public="1" get="null" set="null"><x path="Bool"/></selectable>
		<autoSize public="1" get="null" set="null"><x path="Bool"/></autoSize>
		<textAlign public="1" get="null" set="null"><c path="String"/></textAlign>
		<maxChars public="1" get="null" set="null"><x path="Int"/></maxChars>
		<restrictChars public="1" get="null" set="null"><c path="String"/></restrictChars>
	</class>
	<class path="haxe.ui.toolkit.text.TextDisplay" params="" file="src/haxe/ui/toolkit/text/TextDisplay.hx">
		<implements path="haxe.ui.toolkit.text.ITextDisplay"/>
		<X_PADDING get="inline" set="null" line="16" static="1"><x path="Int"/></X_PADDING>
		<Y_PADDING get="inline" set="null" line="17" static="1"><x path="Int"/></Y_PADDING>
		<_style><c path="haxe.ui.toolkit.style.Style"/></_style>
		<_tf><t path="openfl.text.TextField"/></_tf>
		<_autoSize><x path="Bool"/></_autoSize>
		<text public="1" get="accessor" set="accessor"><c path="String"/></text>
		<style public="1" get="accessor" set="accessor"><c path="haxe.ui.toolkit.style.Style"/></style>
		<display public="1" get="accessor" set="null"><t path="openfl.display.DisplayObject"/></display>
		<interactive public="1" get="accessor" set="accessor"><x path="Bool"/></interactive>
		<multiline public="1" get="accessor" set="accessor"><x path="Bool"/></multiline>
		<wrapLines public="1" get="accessor" set="accessor"><x path="Bool"/></wrapLines>
		<displayAsPassword public="1" get="accessor" set="accessor"><x path="Bool"/></displayAsPassword>
		<visible public="1" get="accessor" set="accessor"><x path="Bool"/></visible>
		<selectable public="1" get="accessor" set="accessor"><x path="Bool"/></selectable>
		<autoSize public="1" get="accessor" set="accessor"><x path="Bool"/></autoSize>
		<textAlign public="1" get="accessor" set="accessor"><c path="String"/></textAlign>
		<maxChars public="1" get="accessor" set="accessor"><x path="Int"/></maxChars>
		<restrictChars public="1" get="accessor" set="accessor"><c path="String"/></restrictChars>
		<get_text set="method" line="52"><f a=""><c path="String"/></f></get_text>
		<set_text set="method" line="56"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_text>
		<get_style set="method" line="69"><f a=""><c path="haxe.ui.toolkit.style.Style"/></f></get_style>
		<set_style set="method" line="73"><f a="value">
	<c path="haxe.ui.toolkit.style.Style"/>
	<c path="haxe.ui.toolkit.style.Style"/>
</f></set_style>
		<get_display set="method" line="98"><f a=""><t path="openfl.display.DisplayObject"/></f></get_display>
		<get_interactive set="method" line="102"><f a=""><x path="Bool"/></f></get_interactive>
		<set_interactive set="method" line="106"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_interactive>
		<get_multiline set="method" line="119"><f a=""><x path="Bool"/></f></get_multiline>
		<set_multiline set="method" line="123"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_multiline>
		<get_wrapLines set="method" line="128"><f a=""><x path="Bool"/></f></get_wrapLines>
		<set_wrapLines set="method" line="132"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_wrapLines>
		<get_displayAsPassword set="method" line="137"><f a=""><x path="Bool"/></f></get_displayAsPassword>
		<set_displayAsPassword set="method" line="141"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_displayAsPassword>
		<get_visible set="method" line="146"><f a=""><x path="Bool"/></f></get_visible>
		<set_visible set="method" line="150"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_visible>
		<get_selectable set="method" line="155"><f a=""><x path="Bool"/></f></get_selectable>
		<set_selectable set="method" line="159"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_selectable>
		<get_autoSize set="method" line="164"><f a=""><x path="Bool"/></f></get_autoSize>
		<set_autoSize set="method" line="168"><f a="value">
	<x path="Bool"/>
	<x path="Bool"/>
</f></set_autoSize>
		<get_textAlign set="method" line="177"><f a=""><c path="String"/></f></get_textAlign>
		<set_textAlign set="method" line="193"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_textAlign>
		<get_maxChars set="method" line="210"><f a=""><x path="Int"/></f></get_maxChars>
		<set_maxChars set="method" line="214"><f a="value">
	<x path="Int"/>
	<x path="Int"/>
</f></set_maxChars>
		<get_restrictChars set="method" line="219"><f a=""><c path="String"/></f></get_restrictChars>
		<set_restrictChars set="method" line="227"><f a="value">
	<c path="String"/>
	<c path="String"/>
</f></set_restrictChars>
		<new public="1" set="method" line="24"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.themes.Theme" params="" file="src/haxe/ui/toolkit/themes/Theme.hx">
		<assets line="13" static="1"><x path="Map">
	<c path="String"/>
	<c path="Array"><d/></c>
</x></assets>
		<addPublicAsset public="1" set="method" line="47" static="1"><f a="asset">
	<d/>
	<x path="Void"/>
</f></addPublicAsset>
		<addAsset public="1" set="method" line="51" static="1"><f a="t:asset">
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></addAsset>
		<name public="1"><c path="String"/></name>
		<apply public="1" set="method" line="18"><f a=""><x path="Void"/></f></apply>
		<applyAssetList set="method" line="23"><f a="n">
	<c path="String"/>
	<x path="Void"/>
</f></applyAssetList>
		<applyAsset set="method" line="34"><f a="asset">
	<d/>
	<x path="Void"/>
</f></applyAsset>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.themes.DefaultTheme" params="" file="src/haxe/ui/toolkit/themes/DefaultTheme.hx">
		<extends path="haxe.ui.toolkit.themes.Theme"/>
		<new public="1" set="method" line="7"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.themes.GradientTheme" params="" file="src/haxe/ui/toolkit/themes/GradientTheme.hx">
		<extends path="haxe.ui.toolkit.themes.Theme"/>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.themes.WindowsTheme" params="" file="src/haxe/ui/toolkit/themes/WindowsTheme.hx">
		<extends path="haxe.ui.toolkit.themes.Theme"/>
		<apply public="1" set="method" line="11" override="1"><f a=""><x path="Void"/></f></apply>
		<new public="1" set="method" line="6"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.util.ByteConverter" params="" file="src/haxe/ui/toolkit/util/ByteConverter.hx"><fromHaxeBytes public="1" set="method" line="7" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="openfl.utils.ByteArray"/>
</f></fromHaxeBytes></class>
	<class path="haxe.ui.toolkit.util.CallStackHelper" params="" file="src/haxe/ui/toolkit/util/CallStackHelper.hx"><traceCallStack public="1" set="method" line="6" static="1"><f a=""><x path="Void"/></f></traceCallStack></class>
	<class path="haxe.ui.toolkit.util.FilterParser" params="" file="src/haxe/ui/toolkit/util/FilterParser.hx">
		<filterParamDefaults line="9" static="1"><a>
	<glow><c path="Array"><c path="String"/></c></glow>
	<dropShadow><c path="Array"><c path="String"/></c></dropShadow>
	<blur><c path="Array"><c path="String"/></c></blur>
</a></filterParamDefaults>
		<parseFilter public="1" set="method" line="15" static="1"><f a="filterString">
	<c path="String"/>
	<t path="openfl.filters.BitmapFilter"/>
</f></parseFilter>
		<createFilter public="1" set="method" line="40" static="1"><f a="filterName:filterParams">
	<c path="String"/>
	<c path="String"/>
	<t path="openfl.filters.BitmapFilter"/>
</f></createFilter>
		<createBlurFilter set="method" line="62" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<t path="openfl.filters.BlurFilter"/>
</f></createBlurFilter>
		<createDropShadowFilter set="method" line="72" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<t path="openfl.filters.DropShadowFilter"/>
</f></createDropShadowFilter>
		<createGlowFilter set="method" line="90" static="1"><f a="params">
	<c path="Array"><c path="String"/></c>
	<t path="openfl.filters.GlowFilter"/>
</f></createGlowFilter>
		<copyFilterDefaults set="method" line="104" static="1"><f a="filterName:params">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
	<c path="Array"><c path="String"/></c>
</f></copyFilterDefaults>
	</class>
	<class path="haxe.ui.toolkit.util.Identifier" params="" file="src/haxe/ui/toolkit/util/Identifier.hx">
		<_objectCount line="4" static="1"><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></_objectCount>
		<createObjectId public="1" set="method" line="6" static="1"><f a="instance">
	<d/>
	<c path="String"/>
</f></createObjectId>
		<createClassId public="1" set="method" line="10" static="1"><f a="type">
	<x path="Class"><d/></x>
	<c path="String"/>
</f></createClassId>
		<guid public="1" set="method" line="23" static="1"><f a=""><c path="String"/></f></guid>
		<S4 set="method" line="27" static="1"><f a=""><c path="String"/></f></S4>
	</class>
	<class path="haxe.ui.toolkit.util.PerfTimer" params="" file="src/haxe/ui/toolkit/util/PerfTimer.hx">
		<name><c path="String"/></name>
		<startStamp><x path="Float"/></startStamp>
		<endStamp><x path="Float"/></endStamp>
		<end public="1" set="method" line="15"><f a=""><x path="Void"/></f></end>
		<new public="1" set="method" line="10"><f a="?s" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.util.StringUtil" params="" file="src/haxe/ui/toolkit/util/StringUtil.hx">
		<capitalizeFirstLetter public="1" set="method" line="4" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></capitalizeFirstLetter>
		<capitalizeHyphens public="1" set="method" line="9" static="1"><f a="s">
	<c path="String"/>
	<c path="String"/>
</f></capitalizeHyphens>
	</class>
	<class path="haxe.ui.toolkit.util.TypeParser" params="" file="src/haxe/ui/toolkit/util/TypeParser.hx">
		<parseInt public="1" set="method" line="4" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></parseInt>
		<parseFloat public="1" set="method" line="13" static="1"><f a="s">
	<c path="String"/>
	<x path="Float"/>
</f></parseFloat>
		<parseBool public="1" set="method" line="22" static="1"><f a="s">
	<c path="String"/>
	<x path="Bool"/>
</f></parseBool>
		<parseColor public="1" set="method" line="34" static="1"><f a="s">
	<c path="String"/>
	<x path="Int"/>
</f></parseColor>
	</class>
	<class path="haxe.ui.toolkit.util.pseudothreads.AsyncThreadCaller" params="" file="src/haxe/ui/toolkit/util/pseudothreads/AsyncThreadCaller.hx">
		<extends path="flash.events.EventDispatcher"/>
		<_workerExitTime><x path="Float"/></_workerExitTime>
		<_runnableWorker><c path="haxe.ui.toolkit.util.pseudothreads.IRunnable"/></_runnableWorker>
		<_data><d/></_data>
		<_runs><x path="Int"/></_runs>
		<_startTime><x path="Float"/></_startTime>
		<_endTime><x path="Float"/></_endTime>
		<_cancel><x path="Bool"/></_cancel>
		<start public="1" set="method" line="25"><f a=""><x path="Void"/></f></start>
		<cancel public="1" set="method" line="31"><f a=""><x path="Void"/></f></cancel>
		<needToExit public="1" set="method" line="35"><f a=""><x path="Bool"/></f></needToExit>
		<run set="method" line="39"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Void"/>
</f></run>
		<dispose set="method" line="60"><f a=""><x path="Void"/></f></dispose>
		<data public="1" get="accessor" set="null"><d/></data>
		<get_data set="method" line="66"><f a=""><d/></f></get_data>
		<runs public="1" get="accessor" set="null"><x path="Int"/></runs>
		<get_runs set="method" line="71"><f a=""><x path="Int"/></f></get_runs>
		<executionTime public="1" get="accessor" set="null"><x path="Float"/></executionTime>
		<get_executionTime set="method" line="76"><f a=""><x path="Float"/></f></get_executionTime>
		<worker public="1" get="accessor" set="null"><c path="haxe.ui.toolkit.util.pseudothreads.IRunnable"/></worker>
		<get_worker set="method" line="81"><f a=""><c path="haxe.ui.toolkit.util.pseudothreads.IRunnable"/></f></get_worker>
		<new public="1" set="method" line="19"><f a="runnable">
	<c path="haxe.ui.toolkit.util.pseudothreads.IRunnable"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="haxe.ui.toolkit.util.pseudothreads.IRunnable" params="" file="src/haxe/ui/toolkit/util/pseudothreads/IRunnable.hx" interface="1">
		<run public="1" set="method"><f a=""><x path="Void"/></f></run>
		<isComplete public="1" get="null" set="null"><x path="Bool"/></isComplete>
		<progress public="1" get="null" set="null"><x path="Int"/></progress>
		<total public="1" get="null" set="null"><x path="Int"/></total>
		<runningTimeShare public="1" get="null" set="null"><x path="Float"/></runningTimeShare>
		<needToExit public="1" get="null" set="null"><f a=""><x path="Bool"/></f></needToExit>
		<data public="1" get="null" set="null"><d/></data>
	</class>
	<class path="haxe.ui.toolkit.util.pseudothreads.Runner" params="" file="src/haxe/ui/toolkit/util/pseudothreads/Runner.hx">
		<implements path="haxe.ui.toolkit.util.pseudothreads.IRunnable"/>
		<run public="1" set="method" line="8"><f a=""><x path="Void"/></f></run>
		<_isComplete><x path="Bool"/></_isComplete>
		<isComplete public="1" get="accessor" set="null"><x path="Bool"/></isComplete>
		<get_isComplete public="1" set="method" line="14"><f a=""><x path="Bool"/></f></get_isComplete>
		<_progress><x path="Int"/></_progress>
		<progress public="1" get="accessor" set="null"><x path="Int"/></progress>
		<get_progress public="1" set="method" line="20"><f a=""><x path="Int"/></f></get_progress>
		<_total><x path="Int"/></_total>
		<total public="1" get="accessor" set="null"><x path="Int"/></total>
		<get_total public="1" set="method" line="26"><f a=""><x path="Int"/></f></get_total>
		<_runningTimeShare><x path="Float"/></_runningTimeShare>
		<runningTimeShare public="1" get="accessor" set="null"><x path="Float"/></runningTimeShare>
		<get_runningTimeShare public="1" set="method" line="32"><f a=""><x path="Float"/></f></get_runningTimeShare>
		<_needToExit><f a=""><x path="Bool"/></f></_needToExit>
		<needToExit public="1" get="null" set="accessor"><f a=""><x path="Bool"/></f></needToExit>
		<set_needToExit public="1" set="method" line="38"><f a="value">
	<f a=""><x path="Bool"/></f>
	<f a=""><x path="Bool"/></f>
</f></set_needToExit>
		<_data><d/></_data>
		<data public="1" get="accessor" set="null"><d/></data>
		<get_data public="1" set="method" line="45"><f a=""><d/></f></get_data>
		<new public="1" set="method" line="4"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="haxe.ui.toolkit.util.pseudothreads.TestRunner" params="" file="src/haxe/ui/toolkit/util/pseudothreads/TestRunner.hx">
		<extends path="haxe.ui.toolkit.util.pseudothreads.Runner"/>
		<_breakIndex><x path="Int"/></_breakIndex>
		<run public="1" set="method" line="11" override="1"><f a=""><x path="Void"/></f></run>
		<new public="1" set="method" line="4"><f a="timeShare">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<enum path="hscript.Const" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<CInt a="v"><x path="Int"/></CInt>
		<CFloat a="f"><x path="Float"/></CFloat>
		<CString a="s"><c path="String"/></CString>
	</enum>
	<enum path="hscript.Expr" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Expr.hx">
		<EConst a="c"><e path="hscript.Const"/></EConst>
		<EIdent a="v"><c path="String"/></EIdent>
		<EVar a="n:?t:?e">
			<c path="String"/>
			<e path="hscript.CType"/>
			<e path="hscript.Expr"/>
		</EVar>
		<EParent a="e"><e path="hscript.Expr"/></EParent>
		<EBlock a="e"><c path="Array"><e path="hscript.Expr"/></c></EBlock>
		<EField a="e:f">
			<e path="hscript.Expr"/>
			<c path="String"/>
		</EField>
		<EBinop a="op:e1:e2">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EBinop>
		<EUnop a="op:prefix:e">
			<c path="String"/>
			<x path="Bool"/>
			<e path="hscript.Expr"/>
		</EUnop>
		<ECall a="e:params">
			<e path="hscript.Expr"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ECall>
		<EIf a="cond:e1:?e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EIf>
		<EWhile a="cond:e">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EWhile>
		<EFor a="v:it:e">
			<c path="String"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EFor>
		<EBreak/>
		<EContinue/>
		<EFunction a="args:e:?name:?ret">
			<c path="Array"><a>
	<t><t path="Null"><e path="hscript.CType"/></t></t>
	<name><c path="String"/></name>
</a></c>
			<e path="hscript.Expr"/>
			<c path="String"/>
			<e path="hscript.CType"/>
		</EFunction>
		<EReturn a="?e"><e path="hscript.Expr"/></EReturn>
		<EArray a="e:index">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</EArray>
		<EArrayDecl a="e"><c path="Array"><e path="hscript.Expr"/></c></EArrayDecl>
		<ENew a="cl:params">
			<c path="String"/>
			<c path="Array"><e path="hscript.Expr"/></c>
		</ENew>
		<EThrow a="e"><e path="hscript.Expr"/></EThrow>
		<ETry a="e:v:t:ecatch">
			<e path="hscript.Expr"/>
			<c path="String"/>
			<t path="Null"><e path="hscript.CType"/></t>
			<e path="hscript.Expr"/>
		</ETry>
		<EObject a="fl"><c path="Array"><a>
	<name><c path="String"/></name>
	<e><e path="hscript.Expr"/></e>
</a></c></EObject>
		<ETernary a="cond:e1:e2">
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
			<e path="hscript.Expr"/>
		</ETernary>
	</enum>
	<enum path="hscript.CType" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<CTPath a="path:?params">
			<c path="Array"><c path="String"/></c>
			<c path="Array"><e path="hscript.CType"/></c>
		</CTPath>
		<CTFun a="args:ret">
			<c path="Array"><e path="hscript.CType"/></c>
			<e path="hscript.CType"/>
		</CTFun>
		<CTAnon a="fields"><c path="Array"><a>
	<t><e path="hscript.CType"/></t>
	<name><c path="String"/></name>
</a></c></CTAnon>
		<CTParent a="t"><e path="hscript.CType"/></CTParent>
	</enum>
	<enum path="hscript.Error" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Expr.hx" module="hscript.Expr">
		<EInvalidChar a="c"><x path="Int"/></EInvalidChar>
		<EUnexpected a="s"><c path="String"/></EUnexpected>
		<EUnterminatedString/>
		<EUnterminatedComment/>
		<EUnknownVariable a="v"><c path="String"/></EUnknownVariable>
		<EInvalidIterator a="v"><c path="String"/></EInvalidIterator>
		<EInvalidOp a="op"><c path="String"/></EInvalidOp>
		<EInvalidAccess a="f"><c path="String"/></EInvalidAccess>
	</enum>
	<enum path="hscript._Interp.Stop" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Interp.hx" private="1" module="hscript.Interp">
		<SBreak/>
		<SContinue/>
		<SReturn a="v"><d/></SReturn>
	</enum>
	<class path="hscript.Interp" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Interp.hx">
		<variables public="1"><x path="Map">
	<c path="String"/>
	<d/>
</x></variables>
		<locals><x path="Map">
	<c path="String"/>
	<a><r><d/></r></a>
</x></locals>
		<binops><x path="Map">
	<c path="String"/>
	<f a=":">
		<e path="hscript.Expr"/>
		<e path="hscript.Expr"/>
		<d/>
	</f>
</x></binops>
		<declared><c path="Array"><a>
	<old><a><r><d/></r></a></old>
	<n><c path="String"/></n>
</a></c></declared>
		<initOps set="method" line="64"><f a=""><x path="Void"/></f></initOps>
		<assign set="method" line="105"><f a="e1:e2">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<d/>
</f></assign>
		<assignOp set="method" line="123"><f a="op:fop">
	<c path="String"/>
	<f a=":">
		<d/>
		<d/>
		<d/>
	</f>
	<x path="Void"/>
</f></assignOp>
		<evalAssignOp set="method" line="128"><f a="op:fop:e1:e2">
	<c path="String"/>
	<f a=":">
		<d/>
		<d/>
		<unknown/>
	</f>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<d/>
</f></evalAssignOp>
		<increment set="method" line="153"><f a="e:prefix:delta">
	<e path="hscript.Expr"/>
	<x path="Bool"/>
	<x path="Int"/>
	<d/>
</f></increment>
		<execute public="1" set="method" line="188"><f a="expr">
	<e path="hscript.Expr"/>
	<d/>
</f></execute>
		<exprReturn set="method" line="197"><f a="e">
	<e path="hscript.Expr"/>
	<d/>
</f></exprReturn>
		<duplicate params="T" set="method" line="210"><f a="h">
	<x path="Map">
		<c path="String"/>
		<c path="duplicate.T"/>
	</x>
	<x path="Map">
		<c path="String"/>
		<t path="Null"><c path="duplicate.T"/></t>
	</x>
</f></duplicate>
		<restore set="method" line="221"><f a="old">
	<x path="Int"/>
	<x path="Void"/>
</f></restore>
		<resolve set="method" line="228"><f a="id">
	<c path="String"/>
	<d/>
</f></resolve>
		<expr public="1" set="method" line="238"><f a="e">
	<e path="hscript.Expr"/>
	<d/>
</f></expr>
		<whileLoop set="method" line="385"><f a="econd:e">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<x path="Void"/>
</f></whileLoop>
		<makeIterator set="method" line="401"><f a="v">
	<d/>
	<t path="Iterator"><d/></t>
</f></makeIterator>
		<forLoop set="method" line="411"><f a="n:it:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<x path="Void"/>
</f></forLoop>
		<get set="method" line="430"><f a="o:f">
	<d/>
	<c path="String"/>
	<d/>
</f></get>
		<set set="method" line="435"><f a="o:f:v">
	<d/>
	<c path="String"/>
	<d/>
	<d/>
</f></set>
		<fcall set="method" line="441"><f a="o:f:args">
	<d/>
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></fcall>
		<call set="method" line="445"><f a="o:f:args">
	<d/>
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></call>
		<cnew set="method" line="449"><f a="cl:args">
	<c path="String"/>
	<c path="Array"><d/></c>
	<d/>
</f></cnew>
		<new public="1" set="method" line="48"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="hscript.Token" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Parser.hx" module="hscript.Parser">
		<TEof/>
		<TConst a="c"><e path="hscript.Const"/></TConst>
		<TId a="s"><c path="String"/></TId>
		<TOp a="s"><c path="String"/></TOp>
		<TPOpen/>
		<TPClose/>
		<TBrOpen/>
		<TBrClose/>
		<TDot/>
		<TComma/>
		<TSemicolon/>
		<TBkOpen/>
		<TBkClose/>
		<TQuestion/>
		<TDoubleDot/>
	</enum>
	<class path="hscript.Parser" params="" file="C:\Servers\Haxe\haxe\lib/hscript/2,0,1/hscript/Parser.hx">
		<p1 get="inline" set="null" line="86" static="1"><x path="Int"/></p1>
		<readPos get="inline" set="null" line="87" static="1"><x path="Int"/></readPos>
		<tokenMin get="inline" set="null" line="88" static="1"><x path="Int"/></tokenMin>
		<tokenMax get="inline" set="null" line="89" static="1"><x path="Int"/></tokenMax>
		<line public="1"><x path="Int"/></line>
		<opChars public="1"><c path="String"/></opChars>
		<identChars public="1"><c path="String"/></identChars>
		<opPriority public="1"><x path="Map">
	<c path="String"/>
	<x path="Int"/>
</x></opPriority>
		<opRightAssoc public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></opRightAssoc>
		<unops public="1"><x path="Map">
	<c path="String"/>
	<x path="Bool"/>
</x></unops>
		<allowJSON public="1">
			<x path="Bool"/>
			<haxe_doc>activate JSON compatiblity</haxe_doc>
		</allowJSON>
		<allowTypes public="1">
			<x path="Bool"/>
			<haxe_doc>allow types declarations</haxe_doc>
		</allowTypes>
		<input><c path="haxe.io.Input"/></input>
		<char><x path="Int"/></char>
		<ops><c path="Array"><x path="Bool"/></c></ops>
		<idents><c path="Array"><x path="Bool"/></c></idents>
		<tokens><c path="haxe.ds.GenericStack_hscript_Token"/></tokens>
		<error public="1" get="inline" set="null" line="133"><f a="err:pmin:pmax">
	<e path="hscript.Error"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></error>
		<invalidChar public="1" set="method" line="141"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></invalidChar>
		<parseString public="1" set="method" line="145"><f a="s">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseString>
		<parse public="1" set="method" line="150"><f a="s">
	<c path="haxe.io.Input"/>
	<e path="hscript.Expr"/>
</f></parse>
		<unexpected set="method" line="179"><f a="tk">
	<e path="hscript.Token"/>
	<d/>
</f></unexpected>
		<push get="inline" set="null" line="184"><f a="tk">
	<e path="hscript.Token"/>
	<x path="Void"/>
</f></push>
		<ensure get="inline" set="null" line="194"><f a="tk">
	<t path="Null"><e path="hscript.Token"/></t>
	<x path="Void"/>
</f></ensure>
		<expr get="inline" set="null" line="199"><f a="e">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></expr>
		<pmin get="inline" set="null" line="207"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmin>
		<pmax get="inline" set="null" line="215"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Int"/>
</f></pmax>
		<mk get="inline" set="null" line="223"><f a="e:?pmin:?pmax" v=":null:null">
	<e path="hscript.Expr"/>
	<x path="Int"/>
	<x path="Int"/>
	<e path="hscript.Expr"/>
</f></mk>
		<isBlock set="method" line="233"><f a="e">
	<e path="hscript.Expr"/>
	<x path="Bool"/>
</f></isBlock>
		<parseFullExpr set="method" line="248"><f a=""><e path="hscript.Expr"/></f></parseFullExpr>
		<parseObject set="method" line="260"><f a="p1">
	<t path="Null"><x path="Int"/></t>
	<e path="hscript.Expr"/>
</f></parseObject>
		<parseExpr set="method" line="294"><f a=""><e path="hscript.Expr"/></f></parseExpr>
		<makeUnop set="method" line="374"><f a="op:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeUnop>
		<makeBinop set="method" line="382"><f a="op:e1:e">
	<c path="String"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></makeBinop>
		<parseStructure set="method" line="399"><f a="id">
	<c path="String"/>
	<e path="hscript.Expr"/>
</f></parseStructure>
		<parseExprNext set="method" line="565"><f a="e1">
	<e path="hscript.Expr"/>
	<e path="hscript.Expr"/>
</f></parseExprNext>
		<parseType set="method" line="602"><f a=""><e path="hscript.CType"/></f></parseType>
		<parseTypeNext set="method" line="668"><f a="t">
	<e path="hscript.CType"/>
	<e path="hscript.CType"/>
</f></parseTypeNext>
		<parseExprList set="method" line="690"><f a="etk">
	<t path="Null"><e path="hscript.Token"/></t>
	<c path="Array"><e path="hscript.Expr"/></c>
</f></parseExprList>
		<incPos get="inline" set="null" line="709"><f a=""><x path="Void"/></f></incPos>
		<readChar set="method" line="715"><f a=""><x path="Int"/></f></readChar>
		<readString set="method" line="720"><f a="until">
	<x path="Int"/>
	<c path="String"/>
</f></readString>
		<token set="method" line="798"><f a=""><t path="Null"><e path="hscript.Token"/></t></f></token>
		<tokenComment set="method" line="974"><f a="op:char">
	<c path="String"/>
	<x path="Int"/>
	<t path="Null"><e path="hscript.Token"/></t>
</f></tokenComment>
		<constString set="method" line="1012"><f a="c">
	<e path="hscript.Const"/>
	<c path="String"/>
</f></constString>
		<tokenString set="method" line="1023"><f a="t">
	<e path="hscript.Token"/>
	<c path="String"/>
</f></tokenString>
		<new public="1" set="method" line="99"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.actuators.IGenericActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/GenericActuator.hx" module="motion.actuators.GenericActuator" interface="1">
		<autoVisible public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values
	 * @param	value		Whether autoVisible should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</autoVisible>
		<delay public="1" set="method">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Increases the delay before a tween is executed
	 * @param	duration		The amount of seconds to delay
	 * @return		The current actuator instance</haxe_doc>
		</delay>
		<ease public="1" set="method">
			<f a="easing">
				<c path="motion.easing.IEasing"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets the easing which is used when running the tween
	 * @param	easing		An easing equation, like Elastic.easeIn or Quad.easeOut
	 * @return		The current actuator instance</haxe_doc>
		</ease>
		<onComplete public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween finishes
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onComplete>
		<onRepeat public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween repeats
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onRepeat>
		<onUpdate public="1" set="method">
			<f a="handler:?parameters">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween updates
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onUpdate>
		<reflect public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect
	 * @param	value		Whether reflect should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reflect>
		<repeat public="1" set="method">
			<f a="?times">
				<x path="Int"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Repeats the tween after it finishes
	 * @param	times		The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)
	 * @return		The current actuator instance</haxe_doc>
		</repeat>
		<reverse public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets if the tween should be handled in reverse
	 * @param	value		Whether the tween should be reversed (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reverse>
		<smartRotation public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
	 * @param	value		Whether smart rotation should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</smartRotation>
		<snapping public="1" set="method">
			<f a="?value">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Snapping causes tween values to be rounded automatically
	 * @param	value		Whether tween values should be rounded (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</snapping>
	</class>
	<class path="motion.actuators.GenericActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/GenericActuator.hx">
		<implements path="motion.actuators.IGenericActuator"/>
		<duration public="1"><x path="Float"/></duration>
		<id public="1"><c path="String"/></id>
		<properties public="1"><d/></properties>
		<target public="1"><d/></target>
		<_autoVisible><x path="Bool"/></_autoVisible>
		<_delay><x path="Float"/></_delay>
		<_ease><c path="motion.easing.IEasing"/></_ease>
		<_onComplete><d/></_onComplete>
		<_onCompleteParams><c path="Array"><d/></c></_onCompleteParams>
		<_onRepeat><d/></_onRepeat>
		<_onRepeatParams><c path="Array"><d/></c></_onRepeatParams>
		<_onUpdate><d/></_onUpdate>
		<_onUpdateParams><c path="Array"><d/></c></_onUpdateParams>
		<_reflect><x path="Bool"/></_reflect>
		<_repeat><x path="Int"/></_repeat>
		<_reverse><x path="Bool"/></_reverse>
		<_smartRotation><x path="Bool"/></_smartRotation>
		<_snapping><x path="Bool"/></_snapping>
		<special><x path="Bool"/></special>
		<apply public="1" set="method" line="60"><f a=""><x path="Void"/></f></apply>
		<autoVisible public="1" set="method" line="92">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Flash performs faster when objects are set to visible = false rather than only alpha = 0. autoVisible toggles automatically based on alpha values
	 * @param	value		Whether autoVisible should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</autoVisible>
		<callMethod get="inline" set="null" line="107"><f a="method:?params" v=":null">
	<d/>
	<c path="Array"><d/></c>
	<d/>
</f></callMethod>
		<change set="method" line="138"><f a=""><x path="Void"/></f></change>
		<complete set="method" line="149"><f a="?sendEvent" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<delay public="1" set="method" line="173">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Increases the delay before a tween is executed
	 * @param	duration		The amount of seconds to delay
	 * @return		The current actuator instance</haxe_doc>
		</delay>
		<ease public="1" set="method" line="187">
			<f a="easing">
				<c path="motion.easing.IEasing"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets the easing which is used when running the tween
	 * @param	easing		An easing equation, like Elastic.easeIn or Quad.easeOut
	 * @return		The current actuator instance</haxe_doc>
		</ease>
		<move public="1" set="method" line="196"><f a=""><x path="Void"/></f></move>
		<onComplete public="1" set="method" line="209">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween finishes
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onComplete>
		<onRepeat public="1" set="method" line="240">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween repeats
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onRepeat>
		<onUpdate public="1" set="method" line="265">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Defines a function which will be called when the tween updates
	 * @param	handler		The function you would like to be called
	 * @param	parameters		Parameters you would like to pass to the handler function when it is called
	 * @return		The current actuator instance</haxe_doc>
		</onUpdate>
		<pause public="1" set="method" line="284"><f a=""><x path="Void"/></f></pause>
		<reflect public="1" set="method" line="296">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Automatically changes the reverse value when the tween repeats. Repeat must be enabled for this to have any effect
	 * @param	value		Whether reflect should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reflect>
		<repeat public="1" set="method" line="317">
			<f a="?times" v="null">
				<x path="Int"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Repeats the tween after it finishes
	 * @param	times		The number of times you would like the tween to repeat, or -1 if you would like to repeat the tween indefinitely (Default is -1)
	 * @return		The current actuator instance</haxe_doc>
		</repeat>
		<resume public="1" set="method" line="332"><f a=""><x path="Void"/></f></resume>
		<reverse public="1" set="method" line="344">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Sets if the tween should be handled in reverse
	 * @param	value		Whether the tween should be reversed (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</reverse>
		<smartRotation public="1" set="method" line="365">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Enabling smartRotation can prevent undesired results when tweening rotation values
	 * @param	value		Whether smart rotation should be enabled (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</smartRotation>
		<snapping public="1" set="method" line="386">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Snapping causes tween values to be rounded automatically
	 * @param	value		Whether tween values should be rounded (Default is true)
	 * @return		The current actuator instance</haxe_doc>
		</snapping>
		<stop public="1" set="method" line="402"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<new public="1" set="method" line="40"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<meta><m n=":keepSub"/></meta>
	</class>
	<class path="motion.actuators.SimpleActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/SimpleActuator.hx">
		<extends path="motion.actuators.GenericActuator"/>
		<actuators line="28" static="1"><c path="Array"><c path="motion.actuators.SimpleActuator"/></c></actuators>
		<actuatorsLength line="29" static="1"><x path="Int"/></actuatorsLength>
		<addedEvent line="30" static="1"><x path="Bool"/></addedEvent>
		<stage_onEnterFrame set="method" line="510" static="1"><f a="event">
	<c path="flash.events.Event"/>
	<x path="Void"/>
</f></stage_onEnterFrame>
		<timeOffset><x path="Float"/></timeOffset>
		<active><x path="Bool"/></active>
		<cacheVisible><x path="Bool"/></cacheVisible>
		<detailsLength><x path="Int"/></detailsLength>
		<initialized><x path="Bool"/></initialized>
		<paused><x path="Bool"/></paused>
		<pauseTime><x path="Float"/></pauseTime>
		<propertyDetails><c path="Array"><c path="motion.actuators.PropertyDetails"/></c></propertyDetails>
		<sendChange><x path="Bool"/></sendChange>
		<setVisible><x path="Bool"/></setVisible>
		<startTime><x path="Float"/></startTime>
		<toggleVisible><x path="Bool"/></toggleVisible>
		<autoVisible public="1" set="method" line="87" override="1">
			<f a="?value" v="null">
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</autoVisible>
		<delay public="1" set="method" line="117" override="1">
			<f a="duration">
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</delay>
		<getField get="inline" set="null" line="127"><f a="target:propertyName">
	<d/>
	<c path="String"/>
	<d/>
</f></getField>
		<initialize set="method" line="158"><f a=""><x path="Void"/></f></initialize>
		<move public="1" set="method" line="201" override="1"><f a=""><x path="Void"/></f></move>
		<onUpdate public="1" set="method" line="227" override="1">
			<f a="handler:?parameters" v=":null">
				<d/>
				<c path="Array"><d/></c>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* @inheritDoc</haxe_doc>
		</onUpdate>
		<pause public="1" set="method" line="248" override="1"><f a=""><x path="Void"/></f></pause>
		<resume public="1" set="method" line="261" override="1"><f a=""><x path="Void"/></f></resume>
		<setField get="inline" set="null" line="278"><f a="target:propertyName:value">
	<d/>
	<c path="String"/>
	<d/>
	<x path="Void"/>
</f></setField>
		<setProperty get="inline" set="null" line="299"><f a="details:value">
	<c path="motion.actuators.PropertyDetails"/>
	<d/>
	<x path="Void"/>
</f></setProperty>
		<stop public="1" set="method" line="320" override="1"><f a="properties:complete:sendEvent">
	<d/>
	<x path="Bool"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></stop>
		<update set="method" line="363"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="49"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.easing.Expo" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Expo.hx">
		<easeIn public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeIn>
		<easeInOut public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeInOut>
		<easeOut public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeOut>
		<get_easeIn set="method" line="19" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeIn>
		<get_easeInOut set="method" line="26" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeInOut>
		<get_easeOut set="method" line="33" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeOut>
	</class>
	<class path="motion.easing.IEasing" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/IEasing.hx" interface="1">
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<haxe_doc>* @author Joshua Granick
 * @author Philippe / http://philippe.elsass.me</haxe_doc>
	</class>
	<class path="motion.easing.ExpoEaseOut" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<calculate public="1" set="method" line="121"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="128"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="114"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.Actuate" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/Actuate.hx">
		<defaultActuator public="1" line="24" static="1"><x path="Class"><c path="motion.actuators.GenericActuator"/></x></defaultActuator>
		<defaultEase public="1" line="25" static="1"><c path="motion.easing.IEasing"/></defaultEase>
		<targetLibraries line="26" static="1"><t path="motion.ObjectHash"><c path="Array"><c path="motion.actuators.GenericActuator"/></c></t></targetLibraries>
		<apply public="1" set="method" line="37" static="1">
			<f a="target:properties:?customActuator" v="::null">
				<d/>
				<d/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Copies properties from one object to another. Conflicting tweens are stopped automatically
	 * @example		<code>Actuate.apply (MyClip, { alpha: 1 } );</code>
	 * @param	target		The object to copy to
	 * @param	properties		The object to copy from
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or onUpdate handlers]]></haxe_doc>
		</apply>
		<effects public="1" set="method" line="64" static="1">
			<f a="target:duration:?overwrite" v="::true">
				<c path="flash.display.DisplayObject"/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="motion._Actuate.EffectsOptions"/>
			</f>
			<haxe_doc>* Creates a new effects tween 
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		An EffectsOptions instance, which is used to select the kind of effect you would like to apply to the target</haxe_doc>
		</effects>
		<getLibrary set="method" line="73" static="1"><f a="target:?allowCreation" v=":true">
	<d/>
	<x path="Bool"/>
	<c path="Array"><c path="motion.actuators.GenericActuator"/></c>
</f></getLibrary>
		<motionPath public="1" set="method" line="94" static="1">
			<f a="target:duration:properties:?overwrite" v=":::true">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new MotionPath tween
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	properties		An object containing a motion path for each property you wish to tween
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</motionPath>
		<pause public="1" set="method" line="106" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Pauses tweens for the specified target objects
	 * @param	... targets		The target objects which will have their tweens paused. Passing no value pauses tweens for all objects</haxe_doc>
		</pause>
		<pauseAll public="1" set="method" line="131" static="1"><f a=""><x path="Void"/></f></pauseAll>
		<reset public="1" set="method" line="149" static="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Resets Actuate by stopping and removing tweens for all objects</haxe_doc>
		</reset>
		<resume public="1" set="method" line="170" static="1">
			<f a="target">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Resumes paused tweens for the specified target objects
	 * @param	... targets		The target objects which will have their tweens resumed. Passing no value resumes tweens for all objects</haxe_doc>
		</resume>
		<resumeAll public="1" set="method" line="195" static="1"><f a=""><x path="Void"/></f></resumeAll>
		<stop public="1" set="method" line="217" static="1">
			<f a="target:?properties:?complete:?sendEvent" v=":null:false:true">
				<d/>
				<d/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Stops all tweens for an individual object
	 * @param	target		The target object which will have its tweens stopped, or a generic actuator instance
	 * @param	properties		A string, array or object which contains the properties you wish to stop, like "alpha", [ "x", "y" ] or { alpha: null }. Passing no value removes all tweens for the object (Optional)
	 * @param	complete		If tweens should apply their final target values before stopping. Default is false (Optional) 
	 * @param	sendEvent	If a complete() event should be dispatched for the specified target. Default is true (Optional)</haxe_doc>
		</stop>
		<timer public="1" set="method" line="273" static="1">
			<f a="duration:?customActuator" v=":null">
				<x path="Float"/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a tween-based timer, which is useful for synchronizing function calls with other animations
	 * @example		<code>Actuate.timer (1).onComplete (trace, [ "Timer is now complete" ]);</code>
	 * @param	duration		The length of the timer in seconds
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like onComplete or to gain a reference to the target timer object]]></haxe_doc>
		</timer>
		<transform public="1" set="method" line="290" static="1">
			<f a="target:?duration:?overwrite" v=":0:true">
				<d/>
				<x path="Float"/>
				<x path="Bool"/>
				<c path="motion._Actuate.TransformOptions"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new transform tween
	 * @example		<code>Actuate.transform (MyClip, 1).color (0xFF0000);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		A TransformOptions instance, which is used to select the kind of transform you would like to apply to the target]]></haxe_doc>
		</transform>
		<tween public="1" set="method" line="309" static="1">
			<f a="target:duration:properties:?overwrite:?customActuator" v=":::true:null">
				<d/>
				<x path="Float"/>
				<d/>
				<x path="Bool"/>
				<x path="Class"><c path="motion.actuators.GenericActuator"/></x>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new tween
	 * @example		<code>Actuate.tween (MyClip, 1, { alpha: 1 } ).onComplete (trace, [ "MyClip is now visible" ]);</code>
	 * @param	target		The object to tween
	 * @param	duration		The length of the tween in seconds
	 * @param	properties		The end values to tween the target to
	 * @param	overwrite			Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @param	customActuator		A custom actuator to use instead of the default (Optional)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</tween>
		<unload public="1" set="method" line="368" static="1"><f a="actuator">
	<c path="motion.actuators.GenericActuator"/>
	<x path="Void"/>
</f></unload>
		<update public="1" set="method" line="397" static="1">
			<f a="target:duration:?start:?end:?overwrite" v="::null:null:true">
				<d/>
				<x path="Float"/>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<x path="Bool"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new tween that updates a method rather than setting the properties of an object
	 * @example		<code>Actuate.update (trace, 1, ["Value: ", 0], ["", 1]).onComplete (trace, [ "Finished tracing values between 0 and 1" ]);</code>
	 * @param	target		The method to update		
	 * @param	duration		The length of the tween in seconds
	 * @param	start		The starting parameters of the method call. You may use both numeric and non-numeric values
	 * @param	end		The ending parameters of the method call. You may use both numeric and non-numeric values, but the signature should match the start parameters
	 * @param	overwrite		Sets whether previous tweens for the same target and properties will be overwritten (Default is true)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate]]></haxe_doc>
		</update>
	</class>
	<class path="motion._Actuate.EffectsOptions" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/Actuate.hx" private="1" module="motion.Actuate">
		<duration><x path="Float"/></duration>
		<overwrite><x path="Bool"/></overwrite>
		<target><c path="flash.display.DisplayObject"/></target>
		<filter public="1" set="method" line="446">
			<f a="reference:properties">
				<d/>
				<d/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new BitmapFilter tween
	 * @param	reference		A reference to the target's filter, which can be an array index or the class of the filter
	 * @param	properties		The end properties to use for the tween
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</filter>
		<new public="1" set="method" line="431"><f a="target:duration:overwrite">
	<c path="flash.display.DisplayObject"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion._Actuate.TransformOptions" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/Actuate.hx" private="1" module="motion.Actuate">
		<duration><x path="Float"/></duration>
		<overwrite><x path="Bool"/></overwrite>
		<target><d/></target>
		<color public="1" set="method" line="482">
			<f a="?value:?strength:?alpha" v="0:1:null">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new ColorTransform tween
	 * @param	color		The color value
	 * @param	strength		The percentage amount of tint to apply (Default is 1)
	 * @param	alpha		The end alpha of the target. If you wish to tween alpha and tint simultaneously, you must do them both as part of the ColorTransform. A value of null will make no change to the alpha of the object (Default is null)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</color>
		<sound public="1" set="method" line="503">
			<f a="?volume:?pan" v="null:null">
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.actuators.IGenericActuator"/>
			</f>
			<haxe_doc>* Creates a new SoundTransform tween
	 * @param	volume		The end volume for the target, or null if you would like to ignore this property (Default is null)
	 * @param	pan		The end pan for the target, or null if you would like to ignore this property (Default is null)
	 * @return		The current actuator instance, which can be used to apply properties like ease, delay, onComplete or onUpdate</haxe_doc>
		</sound>
		<new public="1" set="method" line="466"><f a="target:duration:overwrite">
	<d/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion._Actuate.TweenTimer" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/Actuate.hx" private="1" module="motion.Actuate">
		<progress public="1"><x path="Float"/></progress>
		<new public="1" set="method" line="535"><f a="progress">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="motion.ObjectHash" params="T" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/Actuate.hx" module="motion.Actuate"><c path="haxe.ds.ObjectMap">
	<d/>
	<c path="motion.ObjectHash.T"/>
</c></typedef>
	<class path="motion.MotionPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx">
		<rotation public="1" get="accessor" set="null"><c path="motion.RotationPath"/></rotation>
		<x public="1" get="accessor" set="null"><c path="motion.IComponentPath"/></x>
		<y public="1" get="accessor" set="null"><c path="motion.IComponentPath"/></y>
		<_rotation><c path="motion.RotationPath"/></_rotation>
		<_x><c path="motion.ComponentPath"/></_x>
		<_y><c path="motion.ComponentPath"/></_y>
		<bezier public="1" set="method" line="39">
			<f a="x:y:controlX:controlY:?strength" v="::::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.MotionPath"/>
			</f>
			<haxe_doc>* Adds a bezier curve to the current motion path
	 * @param	x		The x position of the end point for the curve
	 * @param	y		The y position of the end point for the curve
	 * @param	controlX		The x position of the control point for the curve, which affects the angle and midpoint
	 * @param	controlX		The x position of the control point for the curve, which affects the angle and midpoint
	 * @param	strength		The degree of emphasis that should be placed on this segment. If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
	 * @return		The current motion path instance</haxe_doc>
		</bezier>
		<line public="1" set="method" line="56">
			<f a="x:y:?strength" v="::1">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<c path="motion.MotionPath"/>
			</f>
			<haxe_doc>* Adds a line to the current motion path
	 * @param	x		The x position of the end point for the line
	 * @param	x		The y position of the end point for the line
	 * @param	strength		The degree of emphasis that should be placed on this segment . If a motion path contains multiple segments with the same strength, they all receive equal emphasis (Default is 1)
	 * @return		The current motion path instance</haxe_doc>
		</line>
		<get_rotation set="method" line="73"><f a=""><c path="motion.RotationPath"/></f></get_rotation>
		<get_x set="method" line="86"><f a=""><c path="motion.IComponentPath"/></f></get_x>
		<get_y set="method" line="93"><f a=""><c path="motion.IComponentPath"/></f></get_y>
		<new public="1" set="method" line="20"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* @author Joshua Granick
 * @author Aleš Tomeček (for RotationPath)</haxe_doc>
	</class>
	<class path="motion.IComponentPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx" module="motion.MotionPath" interface="1">
		<end public="1" get="null" set="null"><x path="Float"/></end>
		<start public="1"><x path="Float"/></start>
		<calculate public="1" set="method"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
	</class>
	<class path="motion.ComponentPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx" module="motion.MotionPath">
		<implements path="motion.IComponentPath"/>
		<start public="1"><x path="Float"/></start>
		<end public="1" get="accessor" set="null"><x path="Float"/></end>
		<paths><c path="Array"><c path="motion.BezierPath"/></c></paths>
		<totalStrength><x path="Float"/></totalStrength>
		<addPath public="1" set="method" line="122"><f a="path">
	<c path="motion.BezierPath"/>
	<x path="Void"/>
</f></addPath>
		<calculate public="1" set="method" line="130"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<get_end set="method" line="169"><f a=""><x path="Float"/></f></get_end>
		<new public="1" set="method" line="113"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.BezierPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx" module="motion.MotionPath">
		<control public="1"><x path="Float"/></control>
		<end public="1"><x path="Float"/></end>
		<strength public="1"><x path="Float"/></strength>
		<calculate public="1" set="method" line="217"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="208"><f a="end:control:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.LinearPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx" module="motion.MotionPath">
		<extends path="motion.BezierPath"/>
		<calculate public="1" set="method" line="237" override="1"><f a="start:k">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<new public="1" set="method" line="230"><f a="end:strength">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.RotationPath" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/MotionPath.hx" module="motion.MotionPath">
		<implements path="motion.IComponentPath"/>
		<end public="1" get="accessor" set="null"><x path="Float"/></end>
		<offset public="1"><x path="Float"/></offset>
		<start public="1"><x path="Float"/></start>
		<step><x path="Float"/></step>
		<_x><c path="motion.ComponentPath"/></_x>
		<_y><c path="motion.ComponentPath"/></_y>
		<calculate public="1" set="method" line="271"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<get_end public="1" set="method" line="291"><f a=""><x path="Float"/></f></get_end>
		<new public="1" set="method" line="259"><f a="x:y">
	<c path="motion.ComponentPath"/>
	<c path="motion.ComponentPath"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.FilterActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/FilterActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<filter><c path="flash.filters.BitmapFilter"/></filter>
		<filterClass><x path="Class"><c path="flash.filters.BitmapFilter"/></x></filterClass>
		<filterIndex><x path="Int"/></filterIndex>
		<apply public="1" set="method" line="51" override="1"><f a=""><x path="Void"/></f></apply>
		<initialize set="method" line="70" override="1"><f a=""><x path="Void"/></f></initialize>
		<update set="method" line="93" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="21"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.actuators.MethodActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/MethodActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<currentParameters><c path="Array"><d/></c></currentParameters>
		<tweenProperties><d/></tweenProperties>
		<apply public="1" set="method" line="43" override="1"><f a=""><x path="Void"/></f></apply>
		<complete set="method" line="50" override="1"><f a="?sendEvent" v="true">
	<x path="Bool"/>
	<x path="Void"/>
</f></complete>
		<initialize set="method" line="65" override="1"><f a=""><x path="Void"/></f></initialize>
		<update set="method" line="93" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="15"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.actuators.MotionPathActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/MotionPathActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<apply public="1" set="method" line="20" override="1"><f a=""><x path="Void"/></f></apply>
		<initialize set="method" line="47" override="1"><f a=""><x path="Void"/></f></initialize>
		<update set="method" line="92" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="13"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick</haxe_doc>
	</class>
	<class path="motion.actuators.PropertyDetails" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/PropertyDetails.hx">
		<change public="1"><x path="Float"/></change>
		<isField public="1"><x path="Bool"/></isField>
		<propertyName public="1"><c path="String"/></propertyName>
		<start public="1"><x path="Float"/></start>
		<target public="1"><d/></target>
		<new public="1" set="method" line="19"><f a="target:propertyName:start:change:?isField" v="::::true">
	<d/>
	<c path="String"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.PropertyPathDetails" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/MotionPathActuator.hx" module="motion.actuators.MotionPathActuator">
		<extends path="motion.actuators.PropertyDetails"/>
		<path public="1"><c path="motion.IComponentPath"/></path>
		<new public="1" set="method" line="245"><f a="target:propertyName:path:?isField" v=":::true">
	<d/>
	<c path="String"/>
	<c path="motion.IComponentPath"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></new>
	</class>
	<class path="motion.actuators.TransformActuator" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/actuators/TransformActuator.hx">
		<extends path="motion.actuators.SimpleActuator"/>
		<endColorTransform><c path="flash.geom.ColorTransform"/></endColorTransform>
		<endSoundTransform><c path="flash.media.SoundTransform"/></endSoundTransform>
		<tweenColorTransform><c path="flash.geom.ColorTransform"/></tweenColorTransform>
		<tweenSoundTransform><c path="flash.media.SoundTransform"/></tweenSoundTransform>
		<apply public="1" set="method" line="32" override="1"><f a=""><x path="Void"/></f></apply>
		<initialize set="method" line="52" override="1"><f a=""><x path="Void"/></f></initialize>
		<initializeColor set="method" line="72"><f a=""><x path="Void"/></f></initializeColor>
		<initializeSound set="method" line="149"><f a=""><x path="Void"/></f></initializeSound>
		<update set="method" line="178" override="1"><f a="currentTime">
	<x path="Float"/>
	<x path="Void"/>
</f></update>
		<new public="1" set="method" line="25"><f a="target:duration:properties">
	<d/>
	<x path="Float"/>
	<d/>
	<x path="Void"/>
</f></new>
		<haxe_doc>* @author Joshua Granick
 * @version 1.2</haxe_doc>
	</class>
	<class path="motion.easing.ExpoEaseIn" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<calculate public="1" set="method" line="53"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="60"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="46"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.easing.ExpoEaseInOut" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Expo.hx" module="motion.easing.Expo">
		<implements path="motion.easing.IEasing"/>
		<calculate public="1" set="method" line="80"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="92"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="73"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="motion.easing.Linear" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Linear.hx">
		<easeNone public="1" get="accessor" set="null" static="1"><c path="motion.easing.IEasing"/></easeNone>
		<get_easeNone set="method" line="17" static="1"><f a=""><c path="motion.easing.IEasing"/></f></get_easeNone>
	</class>
	<class path="motion.easing.LinearEaseNone" params="" file="C:\Servers\Haxe\haxe\lib/actuate/1,7,5/motion/easing/Linear.hx" module="motion.easing.Linear">
		<implements path="motion.easing.IEasing"/>
		<calculate public="1" set="method" line="37"><f a="k">
	<x path="Float"/>
	<x path="Float"/>
</f></calculate>
		<ease public="1" set="method" line="44"><f a="t:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></ease>
		<new public="1" set="method" line="30"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="openfl.AssetCache" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/openfl/Assets.hx" module="openfl.Assets">
		<bitmapData public="1"><x path="Map">
	<c path="String"/>
	<t path="openfl.display.BitmapData"/>
</x></bitmapData>
		<enabled public="1"><x path="Bool"/></enabled>
		<font public="1"><x path="Map">
	<c path="String"/>
	<t path="openfl.text.Font"/>
</x></font>
		<sound public="1"><x path="Map">
	<c path="String"/>
	<t path="openfl.media.Sound"/>
</x></sound>
		<clear public="1" set="method" line="1392"><f a="?prefix" v="null">
	<c path="String"/>
	<x path="Void"/>
</f></clear>
		<new public="1" set="method" line="1383"><f a=""><x path="Void"/></f></new>
	</class>
	<class path="openfl.Assets" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/openfl/Assets.hx">
		<cache public="1" line="38" static="1"><c path="openfl.AssetCache"/></cache>
		<libraries public="1" set="null" line="39" static="1"><x path="Map">
	<c path="String"/>
	<c path="openfl.AssetLibrary"/>
</x></libraries>
		<dispatcher line="41" static="1"><t path="openfl.events.EventDispatcher"/></dispatcher>
		<initialized line="42" static="1"><x path="Bool"/></initialized>
		<addEventListener public="1" set="method" line="45" static="1"><f a="type:listener:?useCapture:?priority:?useWeakReference" v="::false:0:false">
	<c path="String"/>
	<d/>
	<x path="Bool"/>
	<x path="Int"/>
	<x path="Bool"/>
	<x path="Void"/>
</f></addEventListener>
		<dispatchEvent public="1" set="method" line="54" static="1"><f a="event">
	<t path="openfl.events.Event"/>
	<x path="Bool"/>
</f></dispatchEvent>
		<exists public="1" set="method" line="63" static="1"><f a="id:?type" v=":null">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
</f></exists>
		<getBitmapData public="1" set="method" line="99" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<t path="openfl.display.BitmapData"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded bitmap
	 * @usage		var bitmap = new Bitmap(Assets.getBitmapData("image.jpg"));
	 * @param	id		The ID or asset path for the bitmap
	 * @param	useCache		(Optional) Whether to use BitmapData from the cache(Default: true)
	 * @return		A new BitmapData object</haxe_doc>
		</getBitmapData>
		<getBytes public="1" set="method" line="168" static="1">
			<f a="id">
				<c path="String"/>
				<t path="openfl.utils.ByteArray"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded binary asset
	 * @usage		var bytes = Assets.getBytes("file.zip");
	 * @param	id		The ID or asset path for the file
	 * @return		A new ByteArray object</haxe_doc>
		</getBytes>
		<getFont public="1" set="method" line="217" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<t path="openfl.text.Font"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded font
	 * @usage		var fontName = Assets.getFont("font.ttf").fontName;
	 * @param	id		The ID or asset path for the font
	 * @return		A new Font object</haxe_doc>
		</getFont>
		<getLibrary set="method" line="274" static="1"><f a="name">
	<c path="String"/>
	<c path="openfl.AssetLibrary"/>
</f></getLibrary>
		<getMovieClip public="1" set="method" line="293" static="1">
			<f a="id">
				<c path="String"/>
				<t path="openfl.display.MovieClip"/>
			</f>
			<haxe_doc>* Gets an instance of a library MovieClip
	 * @usage		var movieClip = Assets.getMovieClip("library:BouncingBall");
	 * @param	id		The library and ID for the MovieClip
	 * @return		A new Sound object</haxe_doc>
		</getMovieClip>
		<getMusic public="1" set="method" line="342" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<t path="openfl.media.Sound"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded streaming sound
	 * @usage		var sound = Assets.getMusic("sound.ogg");
	 * @param	id		The ID or asset path for the music track
	 * @return		A new Sound object</haxe_doc>
		</getMusic>
		<getPath public="1" set="method" line="411" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets the file path (if available) for an asset
	 * @usage		var path = Assets.getPath("image.jpg");
	 * @param	id		The ID or asset path for the asset
	 * @return		The path to the asset (or null)</haxe_doc>
		</getPath>
		<getSound public="1" set="method" line="452" static="1">
			<f a="id:?useCache" v=":true">
				<c path="String"/>
				<x path="Bool"/>
				<t path="openfl.media.Sound"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded sound
	 * @usage		var sound = Assets.getSound("sound.wav");
	 * @param	id		The ID or asset path for the sound
	 * @return		A new Sound object</haxe_doc>
		</getSound>
		<getText public="1" set="method" line="521" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded text asset
	 * @usage		var text = Assets.getText("text.txt");
	 * @param	id		The ID or asset path for the file
	 * @return		A new String object</haxe_doc>
		</getText>
		<hasEventListener public="1" set="method" line="564" static="1"><f a="type">
	<c path="String"/>
	<x path="Bool"/>
</f></hasEventListener>
		<initialize set="method" line="573" static="1"><f a=""><x path="Void"/></f></initialize>
		<isLocal public="1" set="method" line="590" static="1"><f a="id:?type:?useCache" v=":null:true">
	<c path="String"/>
	<e path="openfl.AssetType"/>
	<x path="Bool"/>
	<x path="Bool"/>
</f></isLocal>
		<isValidBitmapData set="method" line="635" static="1"><f a="bitmapData">
	<t path="openfl.display.BitmapData"/>
	<x path="Bool"/>
</f></isValidBitmapData>
		<isValidSound set="method" line="666" static="1"><f a="sound">
	<t path="openfl.media.Sound"/>
	<x path="Bool"/>
</f></isValidSound>
		<list public="1" set="method" line="681" static="1"><f a="?type" v="null">
	<e path="openfl.AssetType"/>
	<c path="Array"><c path="String"/></c>
</f></list>
		<loadBitmapData public="1" set="method" line="704" static="1"><f a="id:handler:?useCache" v="::true">
	<c path="String"/>
	<f a="">
		<t path="openfl.display.BitmapData"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadBitmapData>
		<loadBytes public="1" set="method" line="767" static="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.utils.ByteArray"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadBytes>
		<loadFont public="1" set="method" line="803" static="1"><f a="id:handler:?useCache" v="::true">
	<c path="String"/>
	<f a="">
		<t path="openfl.text.Font"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadFont>
		<loadLibrary public="1" set="method" line="860" static="1"><f a="name:handler">
	<c path="String"/>
	<f a="">
		<c path="openfl.AssetLibrary"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadLibrary>
		<loadMusic public="1" set="method" line="889" static="1"><f a="id:handler:?useCache" v="::true">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadMusic>
		<loadMovieClip public="1" set="method" line="952" static="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<t path="openfl.display.MovieClip"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadMovieClip>
		<loadSound public="1" set="method" line="988" static="1"><f a="id:handler:?useCache" v="::true">
	<c path="String"/>
	<f a="">
		<t path="openfl.media.Sound"/>
		<x path="Void"/>
	</f>
	<x path="Bool"/>
	<x path="Void"/>
</f></loadSound>
		<loadText public="1" set="method" line="1051" static="1"><f a="id:handler">
	<c path="String"/>
	<f a="">
		<c path="String"/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></loadText>
		<registerLibrary public="1" set="method" line="1087" static="1"><f a="name:library">
	<c path="String"/>
	<c path="openfl.AssetLibrary"/>
	<x path="Void"/>
</f></registerLibrary>
		<removeEventListener public="1" set="method" line="1106" static="1"><f a="type:listener:?capture" v="::false">
	<c path="String"/>
	<d/>
	<x path="Bool"/>
	<x path="Void"/>
</f></removeEventListener>
		<resolveClass set="method" line="1115" static="1"><f a="name">
	<c path="String"/>
	<x path="Class"><d/></x>
</f></resolveClass>
		<resolveEnum set="method" line="1122" static="1"><f a="name">
	<c path="String"/>
	<x path="Enum"><d/></x>
</f></resolveEnum>
		<unloadLibrary public="1" set="method" line="1141" static="1"><f a="name">
	<c path="String"/>
	<x path="Void"/>
</f></unloadLibrary>
		<library_onEvent set="method" line="1170" static="1"><f a="library:type">
	<c path="openfl.AssetLibrary"/>
	<c path="String"/>
	<x path="Void"/>
</f></library_onEvent>
		<haxe_doc><![CDATA[* <p>The Assets class provides a cross-platform interface to access 
 * embedded images, fonts, sounds and other resource files.</p>
 * 
 * <p>The contents are populated automatically when an application
 * is compiled using the OpenFL command-line tools, based on the
 * contents of the *.nmml project file.</p>
 * 
 * <p>For most platforms, the assets are included in the same directory
 * or package as the application, and the paths are handled
 * automatically. For web content, the assets are preloaded before
 * the start of the rest of the application. You can customize the 
 * preloader by extending the <code>NMEPreloader</code> class,
 * and specifying a custom preloader using <window preloader="" />
 * in the project file.</p>]]></haxe_doc>
		<meta>
			<m n=":access"><e>'???'</e></m>
			<m n=":access"><e>'???'</e></m>
		</meta>
	</class>
	<class path="openfl.AssetData" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/openfl/Assets.hx" module="openfl.Assets">
		<id public="1"><c path="String"/></id>
		<path public="1"><c path="String"/></path>
		<type public="1"><e path="openfl.AssetType"/></type>
		<new public="1" set="method" line="1453"><f a=""><x path="Void"/></f></new>
	</class>
	<enum path="openfl.AssetType" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/openfl/Assets.hx" module="openfl.Assets">
		<BINARY/>
		<FONT/>
		<IMAGE/>
		<MOVIE_CLIP/>
		<MUSIC/>
		<SOUND/>
		<TEMPLATE/>
		<TEXT/>
		<meta><m n=":flatEnum"/></meta>
	</enum>
	<typedef path="openfl.Lib" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Lib.hx"><c path="flash.Lib"/></typedef>
	<abstract path="openfl.Vector" params="T" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Vector.hx">
		<from>
			<icast field="fromArray"><c path="Array"><c path="fromArray.T"/></c></icast>
			<icast field="fromHaxeVector"><x path="haxe.ds.Vector"><c path="fromHaxeVector.T"/></x></icast>
			<icast field="fromVectorData"><t path="openfl._Vector.VectorData"><c path="fromVectorData.T"/></t></icast>
		</from>
		<this><t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t></this>
		<to>
			<icast field="toArray"><c path="Array"><c path="toArray.T"/></c></icast>
			<icast field="toHaxeVector"><x path="haxe.ds.Vector"><c path="toHaxeVector.T"/></x></icast>
			<icast field="toVectorData"><c path="flash.Vector"><c path="toVectorData.T"/></c></icast>
		</to>
		<impl><class path="openfl._Vector.Vector_Impl_" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Vector.hx" private="1" module="openfl.Vector">
	<length public="1" get="accessor" set="accessor" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
	</length>
	<fixed public="1" get="accessor" set="accessor" static="1">
		<x path="Bool"/>
		<meta><m n=":impl"/></meta>
	</fixed>
	<_new public="1" get="inline" set="null" line="11" static="1">
		<f a="?length:?fixed" v="null:null">
			<x path="Int"/>
			<x path="Bool"/>
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</_new>
	<concat public="1" get="inline" set="null" line="19" static="1">
		<f a="this:?a" v=":null">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</concat>
	<copy public="1" get="inline" set="null" line="26" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</copy>
	<iterator public="1" params="T" get="inline" set="null" line="41" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="iterator.T"/></t>
			<t path="Iterator"><c path="iterator.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</iterator>
	<join public="1" get="inline" set="null" line="48" static="1">
		<f a="this:sep">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="String"/>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</join>
	<pop public="1" get="inline" set="null" line="55" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<t path="Null"><c path="openfl.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</pop>
	<push public="1" get="inline" set="null" line="62" static="1">
		<f a="this:x">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</push>
	<reverse public="1" get="inline" set="null" line="69" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</reverse>
	<shift public="1" get="inline" set="null" line="76" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<t path="Null"><c path="openfl.Vector.T"/></t>
		</f>
		<meta><m n=":impl"/></meta>
	</shift>
	<unshift public="1" get="inline" set="null" line="83" static="1">
		<f a="this:x">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="openfl.Vector.T"/>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</unshift>
	<slice public="1" get="inline" set="null" line="90" static="1">
		<f a="this:?pos:?end" v=":null:null">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
			<x path="Int"/>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</slice>
	<sort public="1" get="inline" set="null" line="97" static="1">
		<f a="this:f">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<f a=":">
				<c path="openfl.Vector.T"/>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":impl"/></meta>
	</sort>
	<splice public="1" get="inline" set="null" line="104" static="1">
		<f a="this:pos:len">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
			<x path="Int"/>
			<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
		</f>
		<meta><m n=":impl"/></meta>
	</splice>
	<toString public="1" get="inline" set="null" line="111" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="String"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toString>
	<indexOf public="1" get="inline" set="null" line="118" static="1">
		<f a="this:x:?from" v="::null">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</indexOf>
	<lastIndexOf public="1" get="inline" set="null" line="125" static="1">
		<f a="this:x:?from" v="::null">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<c path="openfl.Vector.T"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</lastIndexOf>
	<ofArray public="1" params="T" get="inline" set="null" line="132" static="1"><f a="a">
	<c path="Array"><d/></c>
	<x path="openfl.Vector"><c path="ofArray.T"/></x>
</f></ofArray>
	<convert public="1" params="T:U" get="inline" set="null" line="139" static="1"><f a="v">
	<x path="openfl.Vector"><c path="convert.T"/></x>
	<x path="openfl.Vector"><c path="convert.U"/></x>
</f></convert>
	<get public="1" get="inline" set="null" line="146" static="1">
		<f a="this:index">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
			<t path="Null"><c path="openfl.Vector.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</get>
	<set public="1" get="inline" set="null" line="153" static="1">
		<f a="this:index:value">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
			<c path="openfl.Vector.T"/>
			<c path="openfl.Vector.T"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":arrayAccess"/>
		</meta>
	</set>
	<fromArray public="1" params="T" get="inline" set="null" line="160" static="1">
		<f a="value">
			<c path="Array"><c path="fromArray.T"/></c>
			<x path="openfl.Vector"><c path="fromArray.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromArray>
	<toArray public="1" params="T" get="inline" set="null" line="167" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="toArray.T"/></t>
			<c path="Array"><c path="toArray.T"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromHaxeVector public="1" params="T" get="inline" set="null" line="182" static="1">
		<f a="value">
			<x path="haxe.ds.Vector"><c path="fromHaxeVector.T"/></x>
			<x path="openfl.Vector"><c path="fromHaxeVector.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromHaxeVector>
	<toHaxeVector public="1" params="T" get="inline" set="null" line="189" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="toHaxeVector.T"/></t>
			<x path="haxe.ds.Vector"><c path="toHaxeVector.T"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toHaxeVector>
	<fromVectorData public="1" params="T" get="inline" set="null" line="196" static="1">
		<f a="value">
			<t path="openfl._Vector.VectorData"><c path="fromVectorData.T"/></t>
			<x path="openfl.Vector"><c path="fromVectorData.T"/></x>
		</f>
		<meta><m n=":from"/></meta>
	</fromVectorData>
	<toVectorData public="1" params="T" get="inline" set="null" line="203" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="toVectorData.T"/></t>
			<t path="openfl._Vector.VectorData"><c path="toVectorData.T"/></t>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVectorData>
	<get_length get="inline" set="null" line="217" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_length>
	<set_length get="inline" set="null" line="224" static="1">
		<f a="this:value">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_length>
	<get_fixed get="inline" set="null" line="231" static="1">
		<f a="this">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_fixed>
	<set_fixed get="inline" set="null" line="238" static="1">
		<f a="this:value">
			<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			<x path="Bool"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_fixed>
</class></impl>
	</abstract>
	<class path="openfl._Vector.Vector_Impl_" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Vector.hx" private="1" module="openfl.Vector">
		<length public="1" get="accessor" set="accessor" static="1">
			<x path="Int"/>
			<meta><m n=":impl"/></meta>
		</length>
		<fixed public="1" get="accessor" set="accessor" static="1">
			<x path="Bool"/>
			<meta><m n=":impl"/></meta>
		</fixed>
		<_new public="1" get="inline" set="null" line="11" static="1">
			<f a="?length:?fixed" v="null:null">
				<x path="Int"/>
				<x path="Bool"/>
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</_new>
		<concat public="1" get="inline" set="null" line="19" static="1">
			<f a="this:?a" v=":null">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</concat>
		<copy public="1" get="inline" set="null" line="26" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</copy>
		<iterator public="1" params="T" get="inline" set="null" line="41" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="iterator.T"/></t>
				<t path="Iterator"><c path="iterator.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</iterator>
		<join public="1" get="inline" set="null" line="48" static="1">
			<f a="this:sep">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</join>
		<pop public="1" get="inline" set="null" line="55" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<t path="Null"><c path="openfl.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</pop>
		<push public="1" get="inline" set="null" line="62" static="1">
			<f a="this:x">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</push>
		<reverse public="1" get="inline" set="null" line="69" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</reverse>
		<shift public="1" get="inline" set="null" line="76" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<t path="Null"><c path="openfl.Vector.T"/></t>
			</f>
			<meta><m n=":impl"/></meta>
		</shift>
		<unshift public="1" get="inline" set="null" line="83" static="1">
			<f a="this:x">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="openfl.Vector.T"/>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</unshift>
		<slice public="1" get="inline" set="null" line="90" static="1">
			<f a="this:?pos:?end" v=":null:null">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</slice>
		<sort public="1" get="inline" set="null" line="97" static="1">
			<f a="this:f">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<f a=":">
					<c path="openfl.Vector.T"/>
					<c path="openfl.Vector.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":impl"/></meta>
		</sort>
		<splice public="1" get="inline" set="null" line="104" static="1">
			<f a="this:pos:len">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
				<x path="openfl.Vector"><c path="openfl.Vector.T"/></x>
			</f>
			<meta><m n=":impl"/></meta>
		</splice>
		<toString public="1" get="inline" set="null" line="111" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="String"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toString>
		<indexOf public="1" get="inline" set="null" line="118" static="1">
			<f a="this:x:?from" v="::null">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</indexOf>
		<lastIndexOf public="1" get="inline" set="null" line="125" static="1">
			<f a="this:x:?from" v="::null">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<c path="openfl.Vector.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</lastIndexOf>
		<ofArray public="1" params="T" get="inline" set="null" line="132" static="1"><f a="a">
	<c path="Array"><d/></c>
	<x path="openfl.Vector"><c path="ofArray.T"/></x>
</f></ofArray>
		<convert public="1" params="T:U" get="inline" set="null" line="139" static="1"><f a="v">
	<x path="openfl.Vector"><c path="convert.T"/></x>
	<x path="openfl.Vector"><c path="convert.U"/></x>
</f></convert>
		<get public="1" get="inline" set="null" line="146" static="1">
			<f a="this:index">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
				<t path="Null"><c path="openfl.Vector.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</get>
		<set public="1" get="inline" set="null" line="153" static="1">
			<f a="this:index:value">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
				<c path="openfl.Vector.T"/>
				<c path="openfl.Vector.T"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":arrayAccess"/>
			</meta>
		</set>
		<fromArray public="1" params="T" get="inline" set="null" line="160" static="1">
			<f a="value">
				<c path="Array"><c path="fromArray.T"/></c>
				<x path="openfl.Vector"><c path="fromArray.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromArray>
		<toArray public="1" params="T" get="inline" set="null" line="167" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="toArray.T"/></t>
				<c path="Array"><c path="toArray.T"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromHaxeVector public="1" params="T" get="inline" set="null" line="182" static="1">
			<f a="value">
				<x path="haxe.ds.Vector"><c path="fromHaxeVector.T"/></x>
				<x path="openfl.Vector"><c path="fromHaxeVector.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromHaxeVector>
		<toHaxeVector public="1" params="T" get="inline" set="null" line="189" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="toHaxeVector.T"/></t>
				<x path="haxe.ds.Vector"><c path="toHaxeVector.T"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toHaxeVector>
		<fromVectorData public="1" params="T" get="inline" set="null" line="196" static="1">
			<f a="value">
				<t path="openfl._Vector.VectorData"><c path="fromVectorData.T"/></t>
				<x path="openfl.Vector"><c path="fromVectorData.T"/></x>
			</f>
			<meta><m n=":from"/></meta>
		</fromVectorData>
		<toVectorData public="1" params="T" get="inline" set="null" line="203" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="toVectorData.T"/></t>
				<t path="openfl._Vector.VectorData"><c path="toVectorData.T"/></t>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVectorData>
		<get_length get="inline" set="null" line="217" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_length>
		<set_length get="inline" set="null" line="224" static="1">
			<f a="this:value">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_length>
		<get_fixed get="inline" set="null" line="231" static="1">
			<f a="this">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_fixed>
		<set_fixed get="inline" set="null" line="238" static="1">
			<f a="this:value">
				<t path="openfl._Vector.VectorData"><c path="openfl.Vector.T"/></t>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_fixed>
	</class>
	<class path="openfl._Vector.VectorDataIterator" params="T" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Vector.hx" private="1" module="openfl.Vector">
		<index><x path="Int"/></index>
		<vectorData><t path="openfl._Vector.VectorData"><c path="openfl._Vector.VectorDataIterator.T"/></t></vectorData>
		<hasNext public="1" set="method" line="263"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="270"><f a=""><c path="openfl._Vector.VectorDataIterator.T"/></f></next>
		<new public="1" set="method" line="255"><f a="data">
	<t path="openfl._Vector.VectorData"><c path="openfl._Vector.VectorDataIterator.T"/></t>
	<x path="Void"/>
</f></new>
	</class>
	<typedef path="openfl._Vector.VectorData" params="T" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/Vector.hx" private="1" module="openfl.Vector"><c path="flash.Vector"><c path="openfl._Vector.VectorData.T"/></c></typedef>
	<typedef path="openfl.display.Bitmap" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/Bitmap.hx"><c path="flash.display.Bitmap"/></typedef>
	<typedef path="openfl.display.BitmapData" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/BitmapData.hx"><c path="flash.display.BitmapData"/></typedef>
	<typedef path="openfl.display.DisplayObject" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/DisplayObject.hx"><c path="flash.display.DisplayObject"/></typedef>
	<typedef path="openfl.display.GradientType" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/GradientType.hx"><e path="flash.display.GradientType"/></typedef>
	<typedef path="openfl.display.Graphics" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/Graphics.hx"><c path="flash.display.Graphics"/></typedef>
	<typedef path="openfl.display.InterpolationMethod" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/InterpolationMethod.hx"><e path="flash.display.InterpolationMethod"/></typedef>
	<typedef path="openfl.display.Loader" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/Loader.hx"><c path="flash.display.Loader"/></typedef>
	<typedef path="openfl.display.LoaderInfo" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/LoaderInfo.hx"><c path="flash.display.LoaderInfo"/></typedef>
	<typedef path="openfl.display.MovieClip" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/MovieClip.hx"><c path="flash.display.MovieClip"/></typedef>
	<typedef path="openfl.display.SpreadMethod" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/SpreadMethod.hx"><e path="flash.display.SpreadMethod"/></typedef>
	<typedef path="openfl.display.Sprite" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/Sprite.hx"><c path="flash.display.Sprite"/></typedef>
	<typedef path="openfl.display.StageAlign" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/StageAlign.hx"><e path="flash.display.StageAlign"/></typedef>
	<typedef path="openfl.display.StageScaleMode" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/display/StageScaleMode.hx"><e path="flash.display.StageScaleMode"/></typedef>
	<typedef path="openfl.events.Event" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/Event.hx"><c path="flash.events.Event"/></typedef>
	<typedef path="openfl.events.EventDispatcher" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/EventDispatcher.hx"><c path="flash.events.EventDispatcher"/></typedef>
	<typedef path="openfl.events.IEventDispatcher" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/IEventDispatcher.hx"><c path="flash.events.IEventDispatcher"/></typedef>
	<typedef path="openfl.events.MouseEvent" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/MouseEvent.hx"><c path="flash.events.MouseEvent"/></typedef>
	<typedef path="openfl.events.ProgressEvent" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/ProgressEvent.hx"><c path="flash.events.ProgressEvent"/></typedef>
	<typedef path="openfl.events.TimerEvent" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/events/TimerEvent.hx"><c path="flash.events.TimerEvent"/></typedef>
	<typedef path="openfl.filters.BitmapFilter" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/filters/BitmapFilter.hx"><c path="flash.filters.BitmapFilter"/></typedef>
	<typedef path="openfl.filters.BlurFilter" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/filters/BlurFilter.hx"><c path="flash.filters.BlurFilter"/></typedef>
	<typedef path="openfl.filters.DropShadowFilter" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/filters/DropShadowFilter.hx"><c path="flash.filters.DropShadowFilter"/></typedef>
	<typedef path="openfl.filters.GlowFilter" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/filters/GlowFilter.hx"><c path="flash.filters.GlowFilter"/></typedef>
	<typedef path="openfl.geom.Matrix" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/geom/Matrix.hx"><c path="flash.geom.Matrix"/></typedef>
	<typedef path="openfl.geom.Point" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/geom/Point.hx"><c path="flash.geom.Point"/></typedef>
	<typedef path="openfl.geom.Rectangle" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/geom/Rectangle.hx"><c path="flash.geom.Rectangle"/></typedef>
	<typedef path="openfl.media.Sound" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/media/Sound.hx"><c path="flash.media.Sound"/></typedef>
	<typedef path="openfl.net.URLLoader" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/net/URLLoader.hx"><c path="flash.net.URLLoader"/></typedef>
	<typedef path="openfl.net.URLRequest" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/net/URLRequest.hx"><c path="flash.net.URLRequest"/></typedef>
	<typedef path="openfl.system.Capabilities" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/system/Capabilities.hx"><c path="flash.system.Capabilities"/></typedef>
	<typedef path="openfl.text.Font" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/Font.hx"><c path="flash.text.Font"/></typedef>
	<typedef path="openfl.text.TextField" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/TextField.hx"><c path="flash.text.TextField"/></typedef>
	<typedef path="openfl.text.TextFieldAutoSize" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/TextFieldAutoSize.hx"><e path="flash.text.TextFieldAutoSize"/></typedef>
	<typedef path="openfl.text.TextFieldType" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/TextFieldType.hx"><e path="flash.text.TextFieldType"/></typedef>
	<typedef path="openfl.text.TextFormat" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/TextFormat.hx"><c path="flash.text.TextFormat"/></typedef>
	<typedef path="openfl.text.TextFormatAlign" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/text/TextFormatAlign.hx"><e path="flash.text.TextFormatAlign"/></typedef>
	<typedef path="openfl.utils.ByteArray" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/utils/ByteArray.hx"><c path="flash.utils.ByteArray"/></typedef>
	<typedef path="openfl.utils.Timer" params="" file="C:\Servers\Haxe\haxe\lib/openfl/2,0,0/backends/flash/openfl/utils/Timer.hx"><c path="flash.utils.Timer"/></typedef>
</haxe>